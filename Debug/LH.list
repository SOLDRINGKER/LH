
LH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cd8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  08008e68  08008e68  00009e68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092f4  080092f4  0000b1fc  2**0
                  CONTENTS
  4 .ARM          00000008  080092f4  080092f4  0000a2f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092fc  080092fc  0000b1fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092fc  080092fc  0000a2fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009300  08009300  0000a300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08009304  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1fc  2**0
                  CONTENTS
 10 .bss          00000354  200001fc  200001fc  0000b1fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000550  20000550  0000b1fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000121d2  00000000  00000000  0000b22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003027  00000000  00000000  0001d3fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa8  00000000  00000000  00020428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c08  00000000  00000000  000213d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023480  00000000  00000000  00021fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014279  00000000  00000000  00045458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfca6  00000000  00000000  000596d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00129377  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000053a0  00000000  00000000  001293bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000047  00000000  00000000  0012e75c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008e50 	.word	0x08008e50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	08008e50 	.word	0x08008e50

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b9a0 	b.w	8000fa0 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f83c 	bl	8000ce4 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2lz>:
 8000c78:	b538      	push	{r3, r4, r5, lr}
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	4604      	mov	r4, r0
 8000c80:	460d      	mov	r5, r1
 8000c82:	f7ff ff33 	bl	8000aec <__aeabi_dcmplt>
 8000c86:	b928      	cbnz	r0, 8000c94 <__aeabi_d2lz+0x1c>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	4629      	mov	r1, r5
 8000c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c90:	f000 b80a 	b.w	8000ca8 <__aeabi_d2ulz>
 8000c94:	4620      	mov	r0, r4
 8000c96:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c9a:	f000 f805 	bl	8000ca8 <__aeabi_d2ulz>
 8000c9e:	4240      	negs	r0, r0
 8000ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca4:	bd38      	pop	{r3, r4, r5, pc}
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2ulz>:
 8000ca8:	b5d0      	push	{r4, r6, r7, lr}
 8000caa:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <__aeabi_d2ulz+0x34>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	4606      	mov	r6, r0
 8000cb0:	460f      	mov	r7, r1
 8000cb2:	f7ff fca9 	bl	8000608 <__aeabi_dmul>
 8000cb6:	f7ff ff57 	bl	8000b68 <__aeabi_d2uiz>
 8000cba:	4604      	mov	r4, r0
 8000cbc:	f7ff fc2a 	bl	8000514 <__aeabi_ui2d>
 8000cc0:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <__aeabi_d2ulz+0x38>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f7ff fca0 	bl	8000608 <__aeabi_dmul>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	4630      	mov	r0, r6
 8000cce:	4639      	mov	r1, r7
 8000cd0:	f7ff fae2 	bl	8000298 <__aeabi_dsub>
 8000cd4:	f7ff ff48 	bl	8000b68 <__aeabi_d2uiz>
 8000cd8:	4621      	mov	r1, r4
 8000cda:	bdd0      	pop	{r4, r6, r7, pc}
 8000cdc:	3df00000 	.word	0x3df00000
 8000ce0:	41f00000 	.word	0x41f00000

08000ce4 <__udivmoddi4>:
 8000ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce8:	9d08      	ldr	r5, [sp, #32]
 8000cea:	460c      	mov	r4, r1
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d14e      	bne.n	8000d8e <__udivmoddi4+0xaa>
 8000cf0:	4694      	mov	ip, r2
 8000cf2:	458c      	cmp	ip, r1
 8000cf4:	4686      	mov	lr, r0
 8000cf6:	fab2 f282 	clz	r2, r2
 8000cfa:	d962      	bls.n	8000dc2 <__udivmoddi4+0xde>
 8000cfc:	b14a      	cbz	r2, 8000d12 <__udivmoddi4+0x2e>
 8000cfe:	f1c2 0320 	rsb	r3, r2, #32
 8000d02:	4091      	lsls	r1, r2
 8000d04:	fa20 f303 	lsr.w	r3, r0, r3
 8000d08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d0c:	4319      	orrs	r1, r3
 8000d0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f f68c 	uxth.w	r6, ip
 8000d1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb07 1114 	mls	r1, r7, r4, r1
 8000d26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2a:	fb04 f106 	mul.w	r1, r4, r6
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x64>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d3a:	f080 8112 	bcs.w	8000f62 <__udivmoddi4+0x27e>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 810f 	bls.w	8000f62 <__udivmoddi4+0x27e>
 8000d44:	3c02      	subs	r4, #2
 8000d46:	4463      	add	r3, ip
 8000d48:	1a59      	subs	r1, r3, r1
 8000d4a:	fa1f f38e 	uxth.w	r3, lr
 8000d4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d52:	fb07 1110 	mls	r1, r7, r0, r1
 8000d56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5a:	fb00 f606 	mul.w	r6, r0, r6
 8000d5e:	429e      	cmp	r6, r3
 8000d60:	d90a      	bls.n	8000d78 <__udivmoddi4+0x94>
 8000d62:	eb1c 0303 	adds.w	r3, ip, r3
 8000d66:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d6a:	f080 80fc 	bcs.w	8000f66 <__udivmoddi4+0x282>
 8000d6e:	429e      	cmp	r6, r3
 8000d70:	f240 80f9 	bls.w	8000f66 <__udivmoddi4+0x282>
 8000d74:	4463      	add	r3, ip
 8000d76:	3802      	subs	r0, #2
 8000d78:	1b9b      	subs	r3, r3, r6
 8000d7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d7e:	2100      	movs	r1, #0
 8000d80:	b11d      	cbz	r5, 8000d8a <__udivmoddi4+0xa6>
 8000d82:	40d3      	lsrs	r3, r2
 8000d84:	2200      	movs	r2, #0
 8000d86:	e9c5 3200 	strd	r3, r2, [r5]
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d905      	bls.n	8000d9e <__udivmoddi4+0xba>
 8000d92:	b10d      	cbz	r5, 8000d98 <__udivmoddi4+0xb4>
 8000d94:	e9c5 0100 	strd	r0, r1, [r5]
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	e7f5      	b.n	8000d8a <__udivmoddi4+0xa6>
 8000d9e:	fab3 f183 	clz	r1, r3
 8000da2:	2900      	cmp	r1, #0
 8000da4:	d146      	bne.n	8000e34 <__udivmoddi4+0x150>
 8000da6:	42a3      	cmp	r3, r4
 8000da8:	d302      	bcc.n	8000db0 <__udivmoddi4+0xcc>
 8000daa:	4290      	cmp	r0, r2
 8000dac:	f0c0 80f0 	bcc.w	8000f90 <__udivmoddi4+0x2ac>
 8000db0:	1a86      	subs	r6, r0, r2
 8000db2:	eb64 0303 	sbc.w	r3, r4, r3
 8000db6:	2001      	movs	r0, #1
 8000db8:	2d00      	cmp	r5, #0
 8000dba:	d0e6      	beq.n	8000d8a <__udivmoddi4+0xa6>
 8000dbc:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc0:	e7e3      	b.n	8000d8a <__udivmoddi4+0xa6>
 8000dc2:	2a00      	cmp	r2, #0
 8000dc4:	f040 8090 	bne.w	8000ee8 <__udivmoddi4+0x204>
 8000dc8:	eba1 040c 	sub.w	r4, r1, ip
 8000dcc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd0:	fa1f f78c 	uxth.w	r7, ip
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dda:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dde:	fb08 4416 	mls	r4, r8, r6, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb07 f006 	mul.w	r0, r7, r6
 8000dea:	4298      	cmp	r0, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x11c>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x11a>
 8000df8:	4298      	cmp	r0, r3
 8000dfa:	f200 80cd 	bhi.w	8000f98 <__udivmoddi4+0x2b4>
 8000dfe:	4626      	mov	r6, r4
 8000e00:	1a1c      	subs	r4, r3, r0
 8000e02:	fa1f f38e 	uxth.w	r3, lr
 8000e06:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e0a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e12:	fb00 f707 	mul.w	r7, r0, r7
 8000e16:	429f      	cmp	r7, r3
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x148>
 8000e1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x146>
 8000e24:	429f      	cmp	r7, r3
 8000e26:	f200 80b0 	bhi.w	8000f8a <__udivmoddi4+0x2a6>
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	1bdb      	subs	r3, r3, r7
 8000e2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e32:	e7a5      	b.n	8000d80 <__udivmoddi4+0x9c>
 8000e34:	f1c1 0620 	rsb	r6, r1, #32
 8000e38:	408b      	lsls	r3, r1
 8000e3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e3e:	431f      	orrs	r7, r3
 8000e40:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e44:	fa04 f301 	lsl.w	r3, r4, r1
 8000e48:	ea43 030c 	orr.w	r3, r3, ip
 8000e4c:	40f4      	lsrs	r4, r6
 8000e4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e52:	0c38      	lsrs	r0, r7, #16
 8000e54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e58:	fbb4 fef0 	udiv	lr, r4, r0
 8000e5c:	fa1f fc87 	uxth.w	ip, r7
 8000e60:	fb00 441e 	mls	r4, r0, lr, r4
 8000e64:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e68:	fb0e f90c 	mul.w	r9, lr, ip
 8000e6c:	45a1      	cmp	r9, r4
 8000e6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e72:	d90a      	bls.n	8000e8a <__udivmoddi4+0x1a6>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e7a:	f080 8084 	bcs.w	8000f86 <__udivmoddi4+0x2a2>
 8000e7e:	45a1      	cmp	r9, r4
 8000e80:	f240 8081 	bls.w	8000f86 <__udivmoddi4+0x2a2>
 8000e84:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	eba4 0409 	sub.w	r4, r4, r9
 8000e8e:	fa1f f983 	uxth.w	r9, r3
 8000e92:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e96:	fb00 4413 	mls	r4, r0, r3, r4
 8000e9a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ea2:	45a4      	cmp	ip, r4
 8000ea4:	d907      	bls.n	8000eb6 <__udivmoddi4+0x1d2>
 8000ea6:	193c      	adds	r4, r7, r4
 8000ea8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eac:	d267      	bcs.n	8000f7e <__udivmoddi4+0x29a>
 8000eae:	45a4      	cmp	ip, r4
 8000eb0:	d965      	bls.n	8000f7e <__udivmoddi4+0x29a>
 8000eb2:	3b02      	subs	r3, #2
 8000eb4:	443c      	add	r4, r7
 8000eb6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eba:	fba0 9302 	umull	r9, r3, r0, r2
 8000ebe:	eba4 040c 	sub.w	r4, r4, ip
 8000ec2:	429c      	cmp	r4, r3
 8000ec4:	46ce      	mov	lr, r9
 8000ec6:	469c      	mov	ip, r3
 8000ec8:	d351      	bcc.n	8000f6e <__udivmoddi4+0x28a>
 8000eca:	d04e      	beq.n	8000f6a <__udivmoddi4+0x286>
 8000ecc:	b155      	cbz	r5, 8000ee4 <__udivmoddi4+0x200>
 8000ece:	ebb8 030e 	subs.w	r3, r8, lr
 8000ed2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ed6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eda:	40cb      	lsrs	r3, r1
 8000edc:	431e      	orrs	r6, r3
 8000ede:	40cc      	lsrs	r4, r1
 8000ee0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	e750      	b.n	8000d8a <__udivmoddi4+0xa6>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ef8:	4094      	lsls	r4, r2
 8000efa:	430c      	orrs	r4, r1
 8000efc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f00:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f04:	fa1f f78c 	uxth.w	r7, ip
 8000f08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f0c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f10:	0c23      	lsrs	r3, r4, #16
 8000f12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f16:	fb00 f107 	mul.w	r1, r0, r7
 8000f1a:	4299      	cmp	r1, r3
 8000f1c:	d908      	bls.n	8000f30 <__udivmoddi4+0x24c>
 8000f1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f22:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f26:	d22c      	bcs.n	8000f82 <__udivmoddi4+0x29e>
 8000f28:	4299      	cmp	r1, r3
 8000f2a:	d92a      	bls.n	8000f82 <__udivmoddi4+0x29e>
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	1a5b      	subs	r3, r3, r1
 8000f32:	b2a4      	uxth	r4, r4
 8000f34:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f38:	fb08 3311 	mls	r3, r8, r1, r3
 8000f3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f40:	fb01 f307 	mul.w	r3, r1, r7
 8000f44:	42a3      	cmp	r3, r4
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x276>
 8000f48:	eb1c 0404 	adds.w	r4, ip, r4
 8000f4c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f50:	d213      	bcs.n	8000f7a <__udivmoddi4+0x296>
 8000f52:	42a3      	cmp	r3, r4
 8000f54:	d911      	bls.n	8000f7a <__udivmoddi4+0x296>
 8000f56:	3902      	subs	r1, #2
 8000f58:	4464      	add	r4, ip
 8000f5a:	1ae4      	subs	r4, r4, r3
 8000f5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f60:	e739      	b.n	8000dd6 <__udivmoddi4+0xf2>
 8000f62:	4604      	mov	r4, r0
 8000f64:	e6f0      	b.n	8000d48 <__udivmoddi4+0x64>
 8000f66:	4608      	mov	r0, r1
 8000f68:	e706      	b.n	8000d78 <__udivmoddi4+0x94>
 8000f6a:	45c8      	cmp	r8, r9
 8000f6c:	d2ae      	bcs.n	8000ecc <__udivmoddi4+0x1e8>
 8000f6e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f72:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f76:	3801      	subs	r0, #1
 8000f78:	e7a8      	b.n	8000ecc <__udivmoddi4+0x1e8>
 8000f7a:	4631      	mov	r1, r6
 8000f7c:	e7ed      	b.n	8000f5a <__udivmoddi4+0x276>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	e799      	b.n	8000eb6 <__udivmoddi4+0x1d2>
 8000f82:	4630      	mov	r0, r6
 8000f84:	e7d4      	b.n	8000f30 <__udivmoddi4+0x24c>
 8000f86:	46d6      	mov	lr, sl
 8000f88:	e77f      	b.n	8000e8a <__udivmoddi4+0x1a6>
 8000f8a:	4463      	add	r3, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e74d      	b.n	8000e2c <__udivmoddi4+0x148>
 8000f90:	4606      	mov	r6, r0
 8000f92:	4623      	mov	r3, r4
 8000f94:	4608      	mov	r0, r1
 8000f96:	e70f      	b.n	8000db8 <__udivmoddi4+0xd4>
 8000f98:	3e02      	subs	r6, #2
 8000f9a:	4463      	add	r3, ip
 8000f9c:	e730      	b.n	8000e00 <__udivmoddi4+0x11c>
 8000f9e:	bf00      	nop

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <Emm_V5_Reset_CurPos_To_Zero>:

extern CAN_HandleTypeDef hcan1;
extern CAN_HandleTypeDef hcan2;
extern int out;

void Emm_V5_Reset_CurPos_To_Zero(uint8_t addr) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[16] = { 0 };
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]

	// 装载命令
	cmd[0] = addr;                       // 地址
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x0A;                       // 功能码
 8000fc2:	230a      	movs	r3, #10
 8000fc4:	727b      	strb	r3, [r7, #9]
	cmd[2] = 0x6D;                       // 辅助码
 8000fc6:	236d      	movs	r3, #109	@ 0x6d
 8000fc8:	72bb      	strb	r3, [r7, #10]
	cmd[3] = 0x6B;                       // 校验字节
 8000fca:	236b      	movs	r3, #107	@ 0x6b
 8000fcc:	72fb      	strb	r3, [r7, #11]

	// 发送命令
	can_SendCmd(cmd, 4);
 8000fce:	f107 0308 	add.w	r3, r7, #8
 8000fd2:	2104      	movs	r1, #4
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 f905 	bl	80011e4 <can_SendCmd>
}
 8000fda:	bf00      	nop
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <Emm_V5_Pos_Control>:
 * @param    raF ：相位/绝对标志，false为相对运动，true为绝对值运动
 * @param    snF ：多机同步标志 ，false为不启用，true为启用
 * @retval   地址 + 功能码 + 命令状态 + 校验字节
 */
void Emm_V5_Pos_Control(uint8_t addr, uint8_t dir, uint16_t vel, uint8_t acc,
		uint32_t clk, bool raF, bool snF) {
 8000fe2:	b590      	push	{r4, r7, lr}
 8000fe4:	b087      	sub	sp, #28
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	4604      	mov	r4, r0
 8000fea:	4608      	mov	r0, r1
 8000fec:	4611      	mov	r1, r2
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4623      	mov	r3, r4
 8000ff2:	71fb      	strb	r3, [r7, #7]
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	71bb      	strb	r3, [r7, #6]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	80bb      	strh	r3, [r7, #4]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[16] = { 0 };
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]

	// 装载命令
	cmd[0] = addr;                      // 地址
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0xFD;                      // 功能码
 8001014:	23fd      	movs	r3, #253	@ 0xfd
 8001016:	727b      	strb	r3, [r7, #9]
	cmd[2] = dir;                       // 方向
 8001018:	79bb      	ldrb	r3, [r7, #6]
 800101a:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (vel >> 8);       // 速度(RPM)高8位字节
 800101c:	88bb      	ldrh	r3, [r7, #4]
 800101e:	0a1b      	lsrs	r3, r3, #8
 8001020:	b29b      	uxth	r3, r3
 8001022:	b2db      	uxtb	r3, r3
 8001024:	72fb      	strb	r3, [r7, #11]
	cmd[4] = (uint8_t) (vel >> 0);       // 速度(RPM)低8位字节
 8001026:	88bb      	ldrh	r3, [r7, #4]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	733b      	strb	r3, [r7, #12]
	cmd[5] = acc;                       // 加速度，注意：0是直接启动
 800102c:	78fb      	ldrb	r3, [r7, #3]
 800102e:	737b      	strb	r3, [r7, #13]
	cmd[6] = (uint8_t) (clk >> 24);      // 脉冲数(bit24 - bit31)
 8001030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001032:	0e1b      	lsrs	r3, r3, #24
 8001034:	b2db      	uxtb	r3, r3
 8001036:	73bb      	strb	r3, [r7, #14]
	cmd[7] = (uint8_t) (clk >> 16);      // 脉冲数(bit16 - bit23)
 8001038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800103a:	0c1b      	lsrs	r3, r3, #16
 800103c:	b2db      	uxtb	r3, r3
 800103e:	73fb      	strb	r3, [r7, #15]
	cmd[8] = (uint8_t) (clk >> 8);       // 脉冲数(bit8  - bit15)
 8001040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001042:	0a1b      	lsrs	r3, r3, #8
 8001044:	b2db      	uxtb	r3, r3
 8001046:	743b      	strb	r3, [r7, #16]
	cmd[9] = (uint8_t) (clk >> 0);       // 脉冲数(bit0  - bit7 )
 8001048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800104a:	b2db      	uxtb	r3, r3
 800104c:	747b      	strb	r3, [r7, #17]
	cmd[10] = raF;                       // 相位/绝对标志，false为相对运动，true为绝对值运动
 800104e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001052:	74bb      	strb	r3, [r7, #18]
	cmd[11] = snF;                       // 多机同步运动标志，false为不启用，true为启用
 8001054:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001058:	74fb      	strb	r3, [r7, #19]
	cmd[12] = 0x6B;                      // 校验字节
 800105a:	236b      	movs	r3, #107	@ 0x6b
 800105c:	753b      	strb	r3, [r7, #20]

	// 发送命令
	can_SendCmd(cmd, 13);
 800105e:	f107 0308 	add.w	r3, r7, #8
 8001062:	210d      	movs	r1, #13
 8001064:	4618      	mov	r0, r3
 8001066:	f000 f8bd 	bl	80011e4 <can_SendCmd>
}
 800106a:	bf00      	nop
 800106c:	371c      	adds	r7, #28
 800106e:	46bd      	mov	sp, r7
 8001070:	bd90      	pop	{r4, r7, pc}

08001072 <Emm_V5_Origin_Set_O>:
 * @brief    设置单圈回零的零点位置
 * @param    addr  ：电机地址
 * @param    svF   ：是否存储标志，false为不存储，true为存储
 * @retval   地址 + 功能码 + 命令状态 + 校验字节
 */
void Emm_V5_Origin_Set_O(uint8_t addr, bool svF) {
 8001072:	b580      	push	{r7, lr}
 8001074:	b086      	sub	sp, #24
 8001076:	af00      	add	r7, sp, #0
 8001078:	4603      	mov	r3, r0
 800107a:	460a      	mov	r2, r1
 800107c:	71fb      	strb	r3, [r7, #7]
 800107e:	4613      	mov	r3, r2
 8001080:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[16] = { 0 };
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]

	// 装载命令
	cmd[0] = addr;                       // 地址
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x93;                       // 功能码
 8001096:	2393      	movs	r3, #147	@ 0x93
 8001098:	727b      	strb	r3, [r7, #9]
	cmd[2] = 0x88;                       // 辅助码
 800109a:	2388      	movs	r3, #136	@ 0x88
 800109c:	72bb      	strb	r3, [r7, #10]
	cmd[3] = svF;                        // 是否存储标志，false为不存储，true为存储
 800109e:	79bb      	ldrb	r3, [r7, #6]
 80010a0:	72fb      	strb	r3, [r7, #11]
	cmd[4] = 0x6B;                       // 校验字节
 80010a2:	236b      	movs	r3, #107	@ 0x6b
 80010a4:	733b      	strb	r3, [r7, #12]

	// 发送命令
	can_SendCmd(cmd, 5);
 80010a6:	f107 0308 	add.w	r3, r7, #8
 80010aa:	2105      	movs	r1, #5
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 f899 	bl	80011e4 <can_SendCmd>
}
 80010b2:	bf00      	nop
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <Emm_V5_Origin_Trigger_Return>:
 * @param    addr   ：电机地址
 * @param    o_mode ：回零模式，0为单圈就近回零，1为单圈方向回零，2为多圈无限位碰撞回零，3为多圈有限位开关回零
 * @param    snF   ：多机同步标志，false为不启用，true为启用
 * @retval   地址 + 功能码 + 命令状态 + 校验字节
 */
void Emm_V5_Origin_Trigger_Return(uint8_t addr, uint8_t o_mode, bool snF) {
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b086      	sub	sp, #24
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	71fb      	strb	r3, [r7, #7]
 80010c4:	460b      	mov	r3, r1
 80010c6:	71bb      	strb	r3, [r7, #6]
 80010c8:	4613      	mov	r3, r2
 80010ca:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[16] = { 0 };
 80010cc:	2300      	movs	r3, #0
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]

	// 装载命令
	cmd[0] = addr;                       // 地址
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x9A;                       // 功能码
 80010e0:	239a      	movs	r3, #154	@ 0x9a
 80010e2:	727b      	strb	r3, [r7, #9]
	cmd[2] = o_mode;           // 回零模式，0为单圈就近回零，1为单圈方向回零，2为多圈无限位碰撞回零，3为多圈有限位开关回零
 80010e4:	79bb      	ldrb	r3, [r7, #6]
 80010e6:	72bb      	strb	r3, [r7, #10]
	cmd[3] = snF;                        // 多机同步运动标志，false为不启用，true为启用
 80010e8:	797b      	ldrb	r3, [r7, #5]
 80010ea:	72fb      	strb	r3, [r7, #11]
	cmd[4] = 0x6B;                       // 校验字节
 80010ec:	236b      	movs	r3, #107	@ 0x6b
 80010ee:	733b      	strb	r3, [r7, #12]

	// 发送命令
	can_SendCmd(cmd, 5);
 80010f0:	f107 0308 	add.w	r3, r7, #8
 80010f4:	2105      	movs	r1, #5
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 f874 	bl	80011e4 <can_SendCmd>
}
 80010fc:	bf00      	nop
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <Emm_V5_init>:
	// 发送命令
	can_SendCmd(cmd, 4);
}

void Emm_V5_init()
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08e      	sub	sp, #56	@ 0x38
 8001108:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can_filter_st;
	__IO uint8_t id_o, im_o;
	__IO uint16_t id_l, id_h;
	__IO uint16_t im_l, im_h;

	id_o = (0x00); // 初始化低位CAN ID
 800110a:	2300      	movs	r3, #0
 800110c:	73fb      	strb	r3, [r7, #15]
	id_h = (uint16_t) ((uint16_t) id_o >> 5); // 获取低位CAN ID的高3�???
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	095b      	lsrs	r3, r3, #5
 8001114:	b2db      	uxtb	r3, r3
 8001116:	817b      	strh	r3, [r7, #10]
	id_l = ((uint16_t) ((uint16_t) id_o << 11) | CAN_ID_EXT); // 获取低位CAN ID的低5位，然后与扩展ID进行组合
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	b2db      	uxtb	r3, r3
 800111c:	02db      	lsls	r3, r3, #11
 800111e:	b29b      	uxth	r3, r3
 8001120:	f043 0304 	orr.w	r3, r3, #4
 8001124:	b29b      	uxth	r3, r3
 8001126:	81bb      	strh	r3, [r7, #12]

	im_o = (0x00); // 初始化高位CAN ID
 8001128:	2300      	movs	r3, #0
 800112a:	73bb      	strb	r3, [r7, #14]
	im_h = (uint16_t) ((uint16_t) im_o >> 5); // 获取高位CAN ID的高3�???
 800112c:	7bbb      	ldrb	r3, [r7, #14]
 800112e:	b2db      	uxtb	r3, r3
 8001130:	095b      	lsrs	r3, r3, #5
 8001132:	b2db      	uxtb	r3, r3
 8001134:	80fb      	strh	r3, [r7, #6]
	im_l = ((uint16_t) ((uint16_t) im_o << 11) | CAN_ID_EXT); // 获取高位CAN ID的低5位，然后与扩展ID进行组合
 8001136:	7bbb      	ldrb	r3, [r7, #14]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	02db      	lsls	r3, r3, #11
 800113c:	b29b      	uxth	r3, r3
 800113e:	f043 0304 	orr.w	r3, r3, #4
 8001142:	b29b      	uxth	r3, r3
 8001144:	813b      	strh	r3, [r7, #8]

	can_filter_st.FilterBank = 1;                                // 过滤�???1
 8001146:	2301      	movs	r3, #1
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
	can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;              // 掩码模式
 800114a:	2300      	movs	r3, #0
 800114c:	62bb      	str	r3, [r7, #40]	@ 0x28
	can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;             // 32位过滤器位宽
 800114e:	2301      	movs	r3, #1
 8001150:	62fb      	str	r3, [r7, #44]	@ 0x2c
	can_filter_st.FilterIdHigh = id_h;                         // 过滤器标识符的高16位�??
 8001152:	897b      	ldrh	r3, [r7, #10]
 8001154:	b29b      	uxth	r3, r3
 8001156:	613b      	str	r3, [r7, #16]
	can_filter_st.FilterIdLow = id_l;                          // 过滤器标识符的低16位�??
 8001158:	89bb      	ldrh	r3, [r7, #12]
 800115a:	b29b      	uxth	r3, r3
 800115c:	617b      	str	r3, [r7, #20]
	can_filter_st.FilterMaskIdHigh = im_h;                   // 过滤器屏蔽标识符的高16位�??
 800115e:	88fb      	ldrh	r3, [r7, #6]
 8001160:	b29b      	uxth	r3, r3
 8001162:	61bb      	str	r3, [r7, #24]
	can_filter_st.FilterMaskIdLow = im_l;                    // 过滤器屏蔽标识符的低16位�??
 8001164:	893b      	ldrh	r3, [r7, #8]
 8001166:	b29b      	uxth	r3, r3
 8001168:	61fb      	str	r3, [r7, #28]
	can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;        // 指向过滤器的FIFO�???0
 800116a:	2300      	movs	r3, #0
 800116c:	623b      	str	r3, [r7, #32]
	can_filter_st.FilterActivation = ENABLE;                       // 使能过滤�???
 800116e:	2301      	movs	r3, #1
 8001170:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 8001172:	f107 0310 	add.w	r3, r7, #16
 8001176:	4619      	mov	r1, r3
 8001178:	4806      	ldr	r0, [pc, #24]	@ (8001194 <Emm_V5_init+0x90>)
 800117a:	f001 f9e7 	bl	800254c <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 800117e:	4805      	ldr	r0, [pc, #20]	@ (8001194 <Emm_V5_init+0x90>)
 8001180:	f001 fac4 	bl	800270c <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001184:	2102      	movs	r1, #2
 8001186:	4803      	ldr	r0, [pc, #12]	@ (8001194 <Emm_V5_init+0x90>)
 8001188:	f001 fcf6 	bl	8002b78 <HAL_CAN_ActivateNotification>
//    can_filter_st.SlaveStartFilterBank = 14;
//    can_filter_st.FilterBank = 14;
//    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
//    HAL_CAN_Start(&hcan2);
//    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
}
 800118c:	bf00      	nop
 800118e:	3738      	adds	r7, #56	@ 0x38
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	200002ec 	.word	0x200002ec

08001198 <buzzer_on>:



extern TIM_HandleTypeDef htim4;
void buzzer_on(uint16_t psc, uint16_t pwm)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	460a      	mov	r2, r1
 80011a2:	80fb      	strh	r3, [r7, #6]
 80011a4:	4613      	mov	r3, r2
 80011a6:	80bb      	strh	r3, [r7, #4]

    __HAL_TIM_PRESCALER(&htim4, psc);
 80011a8:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <buzzer_on+0x2c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	88fa      	ldrh	r2, [r7, #6]
 80011ae:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, pwm);
 80011b0:	4b04      	ldr	r3, [pc, #16]	@ (80011c4 <buzzer_on+0x2c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	88ba      	ldrh	r2, [r7, #4]
 80011b6:	63da      	str	r2, [r3, #60]	@ 0x3c

}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	20000328 	.word	0x20000328

080011c8 <buzzer_off>:
		HAL_Delay(5);
	}
}

void buzzer_off(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
    __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 80011cc:	4b04      	ldr	r3, [pc, #16]	@ (80011e0 <buzzer_off+0x18>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2200      	movs	r2, #0
 80011d2:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000328 	.word	0x20000328

080011e4 <can_SendCmd>:
CAN_RxHeaderTypeDef rxHeader;
uint8_t rxData[8];
static CAN_TxHeaderTypeDef TX;
extern int out;

void can_SendCmd(uint8_t *date, uint8_t len) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	70fb      	strb	r3, [r7, #3]
	uint32_t txBox;
	uint8_t txData[8]={0};
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	2300      	movs	r3, #0
 80011f6:	61bb      	str	r3, [r7, #24]
	__IO uint8_t i = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	74fb      	strb	r3, [r7, #19]
	__IO uint8_t j = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	74bb      	strb	r3, [r7, #18]
	__IO uint8_t k = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	747b      	strb	r3, [r7, #17]
	__IO uint8_t l = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	743b      	strb	r3, [r7, #16]
	__IO uint8_t packNum = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	73fb      	strb	r3, [r7, #15]

	j = len - 2;
 800120c:	78fb      	ldrb	r3, [r7, #3]
 800120e:	3b02      	subs	r3, #2
 8001210:	b2db      	uxtb	r3, r3
 8001212:	74bb      	strb	r3, [r7, #18]

	while (i < j) {
 8001214:	e076      	b.n	8001304 <can_SendCmd+0x120>
		k = j - i;
 8001216:	7cbb      	ldrb	r3, [r7, #18]
 8001218:	b2da      	uxtb	r2, r3
 800121a:	7cfb      	ldrb	r3, [r7, #19]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	b2db      	uxtb	r3, r3
 8001222:	747b      	strb	r3, [r7, #17]
		// 填充缓存
		TX.StdId = 0x00;
 8001224:	4b3d      	ldr	r3, [pc, #244]	@ (800131c <can_SendCmd+0x138>)
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
		TX.ExtId = ((uint32_t) date[0] << 8) | (uint32_t) packNum;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	7bfa      	ldrb	r2, [r7, #15]
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	4313      	orrs	r3, r2
 8001236:	4a39      	ldr	r2, [pc, #228]	@ (800131c <can_SendCmd+0x138>)
 8001238:	6053      	str	r3, [r2, #4]
		TX.IDE = CAN_ID_EXT;
 800123a:	4b38      	ldr	r3, [pc, #224]	@ (800131c <can_SendCmd+0x138>)
 800123c:	2204      	movs	r2, #4
 800123e:	609a      	str	r2, [r3, #8]
		TX.RTR = CAN_RTR_DATA;
 8001240:	4b36      	ldr	r3, [pc, #216]	@ (800131c <can_SendCmd+0x138>)
 8001242:	2200      	movs	r2, #0
 8001244:	60da      	str	r2, [r3, #12]
		TX.TransmitGlobalTime = DISABLE;
 8001246:	4b35      	ldr	r3, [pc, #212]	@ (800131c <can_SendCmd+0x138>)
 8001248:	2200      	movs	r2, #0
 800124a:	751a      	strb	r2, [r3, #20]
		txData[0] = date[1];
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	785b      	ldrb	r3, [r3, #1]
 8001250:	753b      	strb	r3, [r7, #20]

		if (k < 8) {
 8001252:	7c7b      	ldrb	r3, [r7, #17]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b07      	cmp	r3, #7
 8001258:	d826      	bhi.n	80012a8 <can_SendCmd+0xc4>
			for (l = 0; l < k; l++, i++) {
 800125a:	2300      	movs	r3, #0
 800125c:	743b      	strb	r3, [r7, #16]
 800125e:	e016      	b.n	800128e <can_SendCmd+0xaa>
				txData[l + 1] = date[i + 2];
 8001260:	7cfb      	ldrb	r3, [r7, #19]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	3302      	adds	r3, #2
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	441a      	add	r2, r3
 800126a:	7c3b      	ldrb	r3, [r7, #16]
 800126c:	b2db      	uxtb	r3, r3
 800126e:	3301      	adds	r3, #1
 8001270:	7812      	ldrb	r2, [r2, #0]
 8001272:	3320      	adds	r3, #32
 8001274:	443b      	add	r3, r7
 8001276:	f803 2c0c 	strb.w	r2, [r3, #-12]
			for (l = 0; l < k; l++, i++) {
 800127a:	7c3b      	ldrb	r3, [r7, #16]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	3301      	adds	r3, #1
 8001280:	b2db      	uxtb	r3, r3
 8001282:	743b      	strb	r3, [r7, #16]
 8001284:	7cfb      	ldrb	r3, [r7, #19]
 8001286:	b2db      	uxtb	r3, r3
 8001288:	3301      	adds	r3, #1
 800128a:	b2db      	uxtb	r3, r3
 800128c:	74fb      	strb	r3, [r7, #19]
 800128e:	7c3b      	ldrb	r3, [r7, #16]
 8001290:	b2da      	uxtb	r2, r3
 8001292:	7c7b      	ldrb	r3, [r7, #17]
 8001294:	b2db      	uxtb	r3, r3
 8001296:	429a      	cmp	r2, r3
 8001298:	d3e2      	bcc.n	8001260 <can_SendCmd+0x7c>
			}
			TX.DLC = k + 1;
 800129a:	7c7b      	ldrb	r3, [r7, #17]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	3301      	adds	r3, #1
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b1e      	ldr	r3, [pc, #120]	@ (800131c <can_SendCmd+0x138>)
 80012a4:	611a      	str	r2, [r3, #16]
 80012a6:	e020      	b.n	80012ea <can_SendCmd+0x106>
		}
		// 大于8字节命令，分包发送，每包数据最多发送8个字节
		else {
			for (l = 0; l < 7; l++, i++) {
 80012a8:	2300      	movs	r3, #0
 80012aa:	743b      	strb	r3, [r7, #16]
 80012ac:	e016      	b.n	80012dc <can_SendCmd+0xf8>
				txData[l + 1] = date[i + 2];
 80012ae:	7cfb      	ldrb	r3, [r7, #19]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	3302      	adds	r3, #2
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	441a      	add	r2, r3
 80012b8:	7c3b      	ldrb	r3, [r7, #16]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	3301      	adds	r3, #1
 80012be:	7812      	ldrb	r2, [r2, #0]
 80012c0:	3320      	adds	r3, #32
 80012c2:	443b      	add	r3, r7
 80012c4:	f803 2c0c 	strb.w	r2, [r3, #-12]
			for (l = 0; l < 7; l++, i++) {
 80012c8:	7c3b      	ldrb	r3, [r7, #16]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	3301      	adds	r3, #1
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	743b      	strb	r3, [r7, #16]
 80012d2:	7cfb      	ldrb	r3, [r7, #19]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	3301      	adds	r3, #1
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	74fb      	strb	r3, [r7, #19]
 80012dc:	7c3b      	ldrb	r3, [r7, #16]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b06      	cmp	r3, #6
 80012e2:	d9e4      	bls.n	80012ae <can_SendCmd+0xca>
			}
			TX.DLC = 8;
 80012e4:	4b0d      	ldr	r3, [pc, #52]	@ (800131c <can_SendCmd+0x138>)
 80012e6:	2208      	movs	r2, #8
 80012e8:	611a      	str	r2, [r3, #16]
		}
		HAL_CAN_AddTxMessage(&hcan1, &TX, txData, &txBox);
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	f107 0214 	add.w	r2, r7, #20
 80012f2:	490a      	ldr	r1, [pc, #40]	@ (800131c <can_SendCmd+0x138>)
 80012f4:	480a      	ldr	r0, [pc, #40]	@ (8001320 <can_SendCmd+0x13c>)
 80012f6:	f001 fa4d 	bl	8002794 <HAL_CAN_AddTxMessage>
		++packNum;
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	3301      	adds	r3, #1
 8001300:	b2db      	uxtb	r3, r3
 8001302:	73fb      	strb	r3, [r7, #15]
	while (i < j) {
 8001304:	7cfb      	ldrb	r3, [r7, #19]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	7cbb      	ldrb	r3, [r7, #18]
 800130a:	b2db      	uxtb	r3, r3
 800130c:	429a      	cmp	r2, r3
 800130e:	d382      	bcc.n	8001216 <can_SendCmd+0x32>
	}
}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	3720      	adds	r7, #32
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	2000023c 	.word	0x2000023c
 8001320:	200002ec 	.word	0x200002ec

08001324 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]


	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK) {
 800132c:	4b18      	ldr	r3, [pc, #96]	@ (8001390 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800132e:	4a19      	ldr	r2, [pc, #100]	@ (8001394 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001330:	2100      	movs	r1, #0
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f001 fafe 	bl	8002934 <HAL_CAN_GetRxMessage>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 800133e:	f000 fb83 	bl	8001a48 <Error_Handler>
	}
	printf("Received CAN message - ID: %lx, DLC: %ld, Data: ", rxHeader.StdId,
 8001342:	4b14      	ldr	r3, [pc, #80]	@ (8001394 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a13      	ldr	r2, [pc, #76]	@ (8001394 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001348:	6912      	ldr	r2, [r2, #16]
 800134a:	4619      	mov	r1, r3
 800134c:	4812      	ldr	r0, [pc, #72]	@ (8001398 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800134e:	f005 fda9 	bl	8006ea4 <iprintf>
			rxHeader.DLC);
	for (int i = 0; i < rxHeader.DLC; ++i) {
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	e00a      	b.n	800136e <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
		printf("%02X ", rxData[i]);
 8001358:	4a0d      	ldr	r2, [pc, #52]	@ (8001390 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4413      	add	r3, r2
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	480e      	ldr	r0, [pc, #56]	@ (800139c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001364:	f005 fd9e 	bl	8006ea4 <iprintf>
	for (int i = 0; i < rxHeader.DLC; ++i) {
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	3301      	adds	r3, #1
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001370:	691a      	ldr	r2, [r3, #16]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	429a      	cmp	r2, r3
 8001376:	d8ef      	bhi.n	8001358 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
	}
	printf("\n");
 8001378:	200a      	movs	r0, #10
 800137a:	f005 fda5 	bl	8006ec8 <putchar>
	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800137e:	2102      	movs	r1, #2
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f001 fbf9 	bl	8002b78 <HAL_CAN_ActivateNotification>
}
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000234 	.word	0x20000234
 8001394:	20000218 	.word	0x20000218
 8001398:	08008e68 	.word	0x08008e68
 800139c:	08008e9c 	.word	0x08008e9c

080013a0 <parseData>:
uint8_t DATA=0;

DataPacket dataPacket;
int k=70;

void parseData(uint8_t *buffer, uint16_t length, DataPacket *dataPacket) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	460b      	mov	r3, r1
 80013aa:	607a      	str	r2, [r7, #4]
 80013ac:	817b      	strh	r3, [r7, #10]
    char *jsonString = (char*)buffer;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	61fb      	str	r3, [r7, #28]

    // 去除数组的方括号
    if (jsonString[0] == '[') {
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b5b      	cmp	r3, #91	@ 0x5b
 80013b8:	d102      	bne.n	80013c0 <parseData+0x20>
        jsonString++;
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3301      	adds	r3, #1
 80013be:	61fb      	str	r3, [r7, #28]
    }
    if (jsonString[length - 2] == ']') {
 80013c0:	897b      	ldrh	r3, [r7, #10]
 80013c2:	3b02      	subs	r3, #2
 80013c4:	69fa      	ldr	r2, [r7, #28]
 80013c6:	4413      	add	r3, r2
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b5d      	cmp	r3, #93	@ 0x5d
 80013cc:	d105      	bne.n	80013da <parseData+0x3a>
        jsonString[length - 2] = '\0';
 80013ce:	897b      	ldrh	r3, [r7, #10]
 80013d0:	3b02      	subs	r3, #2
 80013d2:	69fa      	ldr	r2, [r7, #28]
 80013d4:	4413      	add	r3, r2
 80013d6:	2200      	movs	r2, #0
 80013d8:	701a      	strb	r2, [r3, #0]
    }

    char *token;
    char *endPtr;

    token = strtok(jsonString, "{\":,}");
 80013da:	4944      	ldr	r1, [pc, #272]	@ (80014ec <parseData+0x14c>)
 80013dc:	69f8      	ldr	r0, [r7, #28]
 80013de:	f005 fdd9 	bl	8006f94 <strtok>
 80013e2:	61b8      	str	r0, [r7, #24]
    while (token != NULL) {
 80013e4:	e079      	b.n	80014da <parseData+0x13a>
        if (strcmp(token, "id") == 0) {
 80013e6:	4942      	ldr	r1, [pc, #264]	@ (80014f0 <parseData+0x150>)
 80013e8:	69b8      	ldr	r0, [r7, #24]
 80013ea:	f7fe fef1 	bl	80001d0 <strcmp>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d10f      	bne.n	8001414 <parseData+0x74>
            token = strtok(NULL, "{\":,}");
 80013f4:	493d      	ldr	r1, [pc, #244]	@ (80014ec <parseData+0x14c>)
 80013f6:	2000      	movs	r0, #0
 80013f8:	f005 fdcc 	bl	8006f94 <strtok>
 80013fc:	61b8      	str	r0, [r7, #24]
            dataPacket->id = strtoul(token, &endPtr, 10);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	220a      	movs	r2, #10
 8001404:	4619      	mov	r1, r3
 8001406:	69b8      	ldr	r0, [r7, #24]
 8001408:	f005 fc80 	bl	8006d0c <strtoul>
 800140c:	4602      	mov	r2, r0
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	e05d      	b.n	80014d0 <parseData+0x130>
        } else if (strcmp(token, "x") == 0) {
 8001414:	4937      	ldr	r1, [pc, #220]	@ (80014f4 <parseData+0x154>)
 8001416:	69b8      	ldr	r0, [r7, #24]
 8001418:	f7fe feda 	bl	80001d0 <strcmp>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d110      	bne.n	8001444 <parseData+0xa4>
            token = strtok(NULL, "{\":,}");
 8001422:	4932      	ldr	r1, [pc, #200]	@ (80014ec <parseData+0x14c>)
 8001424:	2000      	movs	r0, #0
 8001426:	f005 fdb5 	bl	8006f94 <strtok>
 800142a:	61b8      	str	r0, [r7, #24]
            dataPacket->x = strtof(token, &endPtr);
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	4619      	mov	r1, r3
 8001432:	69b8      	ldr	r0, [r7, #24]
 8001434:	f005 fb14 	bl	8006a60 <strtof>
 8001438:	eef0 7a40 	vmov.f32	s15, s0
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	edc3 7a01 	vstr	s15, [r3, #4]
 8001442:	e045      	b.n	80014d0 <parseData+0x130>
        } else if (strcmp(token, "y") == 0) {
 8001444:	492c      	ldr	r1, [pc, #176]	@ (80014f8 <parseData+0x158>)
 8001446:	69b8      	ldr	r0, [r7, #24]
 8001448:	f7fe fec2 	bl	80001d0 <strcmp>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d110      	bne.n	8001474 <parseData+0xd4>
            token = strtok(NULL, "{\":,}");
 8001452:	4926      	ldr	r1, [pc, #152]	@ (80014ec <parseData+0x14c>)
 8001454:	2000      	movs	r0, #0
 8001456:	f005 fd9d 	bl	8006f94 <strtok>
 800145a:	61b8      	str	r0, [r7, #24]
            dataPacket->y = strtof(token, &endPtr);
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	4619      	mov	r1, r3
 8001462:	69b8      	ldr	r0, [r7, #24]
 8001464:	f005 fafc 	bl	8006a60 <strtof>
 8001468:	eef0 7a40 	vmov.f32	s15, s0
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	edc3 7a02 	vstr	s15, [r3, #8]
 8001472:	e02d      	b.n	80014d0 <parseData+0x130>
        } else if (strcmp(token, "z") == 0) {
 8001474:	4921      	ldr	r1, [pc, #132]	@ (80014fc <parseData+0x15c>)
 8001476:	69b8      	ldr	r0, [r7, #24]
 8001478:	f7fe feaa 	bl	80001d0 <strcmp>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d10f      	bne.n	80014a2 <parseData+0x102>
            token = strtok(NULL, "{\":,}");
 8001482:	491a      	ldr	r1, [pc, #104]	@ (80014ec <parseData+0x14c>)
 8001484:	2000      	movs	r0, #0
 8001486:	f005 fd85 	bl	8006f94 <strtok>
 800148a:	61b8      	str	r0, [r7, #24]
            dataPacket->z = strtol(token, &endPtr, 10);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	220a      	movs	r2, #10
 8001492:	4619      	mov	r1, r3
 8001494:	69b8      	ldr	r0, [r7, #24]
 8001496:	f005 fbc1 	bl	8006c1c <strtol>
 800149a:	4602      	mov	r2, r0
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	e016      	b.n	80014d0 <parseData+0x130>
        } else if (strcmp(token, "quadrant") == 0) {
 80014a2:	4917      	ldr	r1, [pc, #92]	@ (8001500 <parseData+0x160>)
 80014a4:	69b8      	ldr	r0, [r7, #24]
 80014a6:	f7fe fe93 	bl	80001d0 <strcmp>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d10f      	bne.n	80014d0 <parseData+0x130>
            token = strtok(NULL, "{\":,}");
 80014b0:	490e      	ldr	r1, [pc, #56]	@ (80014ec <parseData+0x14c>)
 80014b2:	2000      	movs	r0, #0
 80014b4:	f005 fd6e 	bl	8006f94 <strtok>
 80014b8:	61b8      	str	r0, [r7, #24]
            dataPacket->quadrant = (uint8_t)strtoul(token, &endPtr, 10);
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	220a      	movs	r2, #10
 80014c0:	4619      	mov	r1, r3
 80014c2:	69b8      	ldr	r0, [r7, #24]
 80014c4:	f005 fc22 	bl	8006d0c <strtoul>
 80014c8:	4603      	mov	r3, r0
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	741a      	strb	r2, [r3, #16]
        }
        token = strtok(NULL, "{\":,}");
 80014d0:	4906      	ldr	r1, [pc, #24]	@ (80014ec <parseData+0x14c>)
 80014d2:	2000      	movs	r0, #0
 80014d4:	f005 fd5e 	bl	8006f94 <strtok>
 80014d8:	61b8      	str	r0, [r7, #24]
    while (token != NULL) {
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d182      	bne.n	80013e6 <parseData+0x46>
    }
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	3720      	adds	r7, #32
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	08008ea4 	.word	0x08008ea4
 80014f0:	08008eac 	.word	0x08008eac
 80014f4:	08008eb0 	.word	0x08008eb0
 80014f8:	08008eb4 	.word	0x08008eb4
 80014fc:	08008eb8 	.word	0x08008eb8
 8001500:	08008ebc 	.word	0x08008ebc

08001504 <HAL_UART_RxCpltCallback>:
 * @param    snF ：多机同步标志 ，false为不启用，true为启用
 * @retval   地址 + 功能码 + 命令状态 + 校验字节
 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af04      	add	r7, sp, #16
 800150a:	6078      	str	r0, [r7, #4]
    if (huart == &huart1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a77      	ldr	r2, [pc, #476]	@ (80016ec <HAL_UART_RxCpltCallback+0x1e8>)
 8001510:	4293      	cmp	r3, r2
 8001512:	f040 80e6 	bne.w	80016e2 <HAL_UART_RxCpltCallback+0x1de>
    {
        RXBUFF[LEN] = DATA;
 8001516:	4b76      	ldr	r3, [pc, #472]	@ (80016f0 <HAL_UART_RxCpltCallback+0x1ec>)
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	461a      	mov	r2, r3
 800151c:	4b75      	ldr	r3, [pc, #468]	@ (80016f4 <HAL_UART_RxCpltCallback+0x1f0>)
 800151e:	7819      	ldrb	r1, [r3, #0]
 8001520:	4b75      	ldr	r3, [pc, #468]	@ (80016f8 <HAL_UART_RxCpltCallback+0x1f4>)
 8001522:	5499      	strb	r1, [r3, r2]
        LEN++;
 8001524:	4b72      	ldr	r3, [pc, #456]	@ (80016f0 <HAL_UART_RxCpltCallback+0x1ec>)
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	3301      	adds	r3, #1
 800152a:	b29a      	uxth	r2, r3
 800152c:	4b70      	ldr	r3, [pc, #448]	@ (80016f0 <HAL_UART_RxCpltCallback+0x1ec>)
 800152e:	801a      	strh	r2, [r3, #0]
        if (RXBUFF[LEN - 1] == ']')
 8001530:	4b6f      	ldr	r3, [pc, #444]	@ (80016f0 <HAL_UART_RxCpltCallback+0x1ec>)
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	3b01      	subs	r3, #1
 8001536:	4a70      	ldr	r2, [pc, #448]	@ (80016f8 <HAL_UART_RxCpltCallback+0x1f4>)
 8001538:	5cd3      	ldrb	r3, [r2, r3]
 800153a:	2b5d      	cmp	r3, #93	@ 0x5d
 800153c:	f040 80cc 	bne.w	80016d8 <HAL_UART_RxCpltCallback+0x1d4>
        {
            parseData(RXBUFF, LEN, &dataPacket);
 8001540:	4b6b      	ldr	r3, [pc, #428]	@ (80016f0 <HAL_UART_RxCpltCallback+0x1ec>)
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	4a6d      	ldr	r2, [pc, #436]	@ (80016fc <HAL_UART_RxCpltCallback+0x1f8>)
 8001546:	4619      	mov	r1, r3
 8001548:	486b      	ldr	r0, [pc, #428]	@ (80016f8 <HAL_UART_RxCpltCallback+0x1f4>)
 800154a:	f7ff ff29 	bl	80013a0 <parseData>
            // 清理缓冲区
            memset(RXBUFF, 0, sizeof(RXBUFF));
 800154e:	227d      	movs	r2, #125	@ 0x7d
 8001550:	2100      	movs	r1, #0
 8001552:	4869      	ldr	r0, [pc, #420]	@ (80016f8 <HAL_UART_RxCpltCallback+0x1f4>)
 8001554:	f005 fd03 	bl	8006f5e <memset>
            LEN = 0;
 8001558:	4b65      	ldr	r3, [pc, #404]	@ (80016f0 <HAL_UART_RxCpltCallback+0x1ec>)
 800155a:	2200      	movs	r2, #0
 800155c:	801a      	strh	r2, [r3, #0]
            t++;
 800155e:	4b68      	ldr	r3, [pc, #416]	@ (8001700 <HAL_UART_RxCpltCallback+0x1fc>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	3301      	adds	r3, #1
 8001564:	4a66      	ldr	r2, [pc, #408]	@ (8001700 <HAL_UART_RxCpltCallback+0x1fc>)
 8001566:	6013      	str	r3, [r2, #0]
            // 解析完毕后发送 ACK
			Emm_V5_Pos_Control(b_x, 1, 500, 100, dataPacket.x*k, 1, 0); // 位置模式控制
 8001568:	4b66      	ldr	r3, [pc, #408]	@ (8001704 <HAL_UART_RxCpltCallback+0x200>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	b2d8      	uxtb	r0, r3
 800156e:	4b63      	ldr	r3, [pc, #396]	@ (80016fc <HAL_UART_RxCpltCallback+0x1f8>)
 8001570:	ed93 7a01 	vldr	s14, [r3, #4]
 8001574:	4b64      	ldr	r3, [pc, #400]	@ (8001708 <HAL_UART_RxCpltCallback+0x204>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	ee07 3a90 	vmov	s15, r3
 800157c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001584:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001588:	ee17 2a90 	vmov	r2, s15
 800158c:	2300      	movs	r3, #0
 800158e:	9302      	str	r3, [sp, #8]
 8001590:	2301      	movs	r3, #1
 8001592:	9301      	str	r3, [sp, #4]
 8001594:	9200      	str	r2, [sp, #0]
 8001596:	2364      	movs	r3, #100	@ 0x64
 8001598:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800159c:	2101      	movs	r1, #1
 800159e:	f7ff fd20 	bl	8000fe2 <Emm_V5_Pos_Control>
			HAL_Delay(20);
 80015a2:	2014      	movs	r0, #20
 80015a4:	f000 feb2 	bl	800230c <HAL_Delay>
			Emm_V5_Pos_Control(b_y, 1, 500, 100, dataPacket.y*k, 1, 0); // 位置模式控制
 80015a8:	4b58      	ldr	r3, [pc, #352]	@ (800170c <HAL_UART_RxCpltCallback+0x208>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	b2d8      	uxtb	r0, r3
 80015ae:	4b53      	ldr	r3, [pc, #332]	@ (80016fc <HAL_UART_RxCpltCallback+0x1f8>)
 80015b0:	ed93 7a02 	vldr	s14, [r3, #8]
 80015b4:	4b54      	ldr	r3, [pc, #336]	@ (8001708 <HAL_UART_RxCpltCallback+0x204>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	ee07 3a90 	vmov	s15, r3
 80015bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015c8:	ee17 2a90 	vmov	r2, s15
 80015cc:	2300      	movs	r3, #0
 80015ce:	9302      	str	r3, [sp, #8]
 80015d0:	2301      	movs	r3, #1
 80015d2:	9301      	str	r3, [sp, #4]
 80015d4:	9200      	str	r2, [sp, #0]
 80015d6:	2364      	movs	r3, #100	@ 0x64
 80015d8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80015dc:	2101      	movs	r1, #1
 80015de:	f7ff fd00 	bl	8000fe2 <Emm_V5_Pos_Control>
			HAL_Delay(20);
 80015e2:	2014      	movs	r0, #20
 80015e4:	f000 fe92 	bl	800230c <HAL_Delay>
			Emm_V5_Pos_Control(b_z, 1, 500, 100, (400-dataPacket.z)*100, 1, 0); // 位置模式控制
 80015e8:	4b49      	ldr	r3, [pc, #292]	@ (8001710 <HAL_UART_RxCpltCallback+0x20c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	b2d8      	uxtb	r0, r3
 80015ee:	4b43      	ldr	r3, [pc, #268]	@ (80016fc <HAL_UART_RxCpltCallback+0x1f8>)
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	f5c3 73c8 	rsb	r3, r3, #400	@ 0x190
 80015f6:	2264      	movs	r2, #100	@ 0x64
 80015f8:	fb02 f303 	mul.w	r3, r2, r3
 80015fc:	461a      	mov	r2, r3
 80015fe:	2300      	movs	r3, #0
 8001600:	9302      	str	r3, [sp, #8]
 8001602:	2301      	movs	r3, #1
 8001604:	9301      	str	r3, [sp, #4]
 8001606:	9200      	str	r2, [sp, #0]
 8001608:	2364      	movs	r3, #100	@ 0x64
 800160a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800160e:	2101      	movs	r1, #1
 8001610:	f7ff fce7 	bl	8000fe2 <Emm_V5_Pos_Control>
			HAL_Delay(50);
 8001614:	2032      	movs	r0, #50	@ 0x32
 8001616:	f000 fe79 	bl	800230c <HAL_Delay>
			Emm_V5_Pos_Control(a_x, 1, 500, 100, dataPacket.x*k, 1, 0); // 位置模式控制
 800161a:	4b3e      	ldr	r3, [pc, #248]	@ (8001714 <HAL_UART_RxCpltCallback+0x210>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	b2d8      	uxtb	r0, r3
 8001620:	4b36      	ldr	r3, [pc, #216]	@ (80016fc <HAL_UART_RxCpltCallback+0x1f8>)
 8001622:	ed93 7a01 	vldr	s14, [r3, #4]
 8001626:	4b38      	ldr	r3, [pc, #224]	@ (8001708 <HAL_UART_RxCpltCallback+0x204>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	ee07 3a90 	vmov	s15, r3
 800162e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800163a:	ee17 2a90 	vmov	r2, s15
 800163e:	2300      	movs	r3, #0
 8001640:	9302      	str	r3, [sp, #8]
 8001642:	2301      	movs	r3, #1
 8001644:	9301      	str	r3, [sp, #4]
 8001646:	9200      	str	r2, [sp, #0]
 8001648:	2364      	movs	r3, #100	@ 0x64
 800164a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800164e:	2101      	movs	r1, #1
 8001650:	f7ff fcc7 	bl	8000fe2 <Emm_V5_Pos_Control>
			HAL_Delay(20);
 8001654:	2014      	movs	r0, #20
 8001656:	f000 fe59 	bl	800230c <HAL_Delay>
			Emm_V5_Pos_Control(a_y, 1, 500, 100, dataPacket.y*k, 1, 0); // 位置模式控制
 800165a:	4b2f      	ldr	r3, [pc, #188]	@ (8001718 <HAL_UART_RxCpltCallback+0x214>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	b2d8      	uxtb	r0, r3
 8001660:	4b26      	ldr	r3, [pc, #152]	@ (80016fc <HAL_UART_RxCpltCallback+0x1f8>)
 8001662:	ed93 7a02 	vldr	s14, [r3, #8]
 8001666:	4b28      	ldr	r3, [pc, #160]	@ (8001708 <HAL_UART_RxCpltCallback+0x204>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	ee07 3a90 	vmov	s15, r3
 800166e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001676:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800167a:	ee17 2a90 	vmov	r2, s15
 800167e:	2300      	movs	r3, #0
 8001680:	9302      	str	r3, [sp, #8]
 8001682:	2301      	movs	r3, #1
 8001684:	9301      	str	r3, [sp, #4]
 8001686:	9200      	str	r2, [sp, #0]
 8001688:	2364      	movs	r3, #100	@ 0x64
 800168a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800168e:	2101      	movs	r1, #1
 8001690:	f7ff fca7 	bl	8000fe2 <Emm_V5_Pos_Control>
			HAL_Delay(20);
 8001694:	2014      	movs	r0, #20
 8001696:	f000 fe39 	bl	800230c <HAL_Delay>
			Emm_V5_Pos_Control(a_z, 1, 500, 100, (400-dataPacket.z)*100, 1, 0); // 位置模式控制
 800169a:	4b20      	ldr	r3, [pc, #128]	@ (800171c <HAL_UART_RxCpltCallback+0x218>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	b2d8      	uxtb	r0, r3
 80016a0:	4b16      	ldr	r3, [pc, #88]	@ (80016fc <HAL_UART_RxCpltCallback+0x1f8>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	f5c3 73c8 	rsb	r3, r3, #400	@ 0x190
 80016a8:	2264      	movs	r2, #100	@ 0x64
 80016aa:	fb02 f303 	mul.w	r3, r2, r3
 80016ae:	461a      	mov	r2, r3
 80016b0:	2300      	movs	r3, #0
 80016b2:	9302      	str	r3, [sp, #8]
 80016b4:	2301      	movs	r3, #1
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	9200      	str	r2, [sp, #0]
 80016ba:	2364      	movs	r3, #100	@ 0x64
 80016bc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80016c0:	2101      	movs	r1, #1
 80016c2:	f7ff fc8e 	bl	8000fe2 <Emm_V5_Pos_Control>
			HAL_Delay(50);
 80016c6:	2032      	movs	r0, #50	@ 0x32
 80016c8:	f000 fe20 	bl	800230c <HAL_Delay>

            HAL_UART_Transmit(&huart1, &date, sizeof(date), 20);
 80016cc:	2314      	movs	r3, #20
 80016ce:	2203      	movs	r2, #3
 80016d0:	4913      	ldr	r1, [pc, #76]	@ (8001720 <HAL_UART_RxCpltCallback+0x21c>)
 80016d2:	4806      	ldr	r0, [pc, #24]	@ (80016ec <HAL_UART_RxCpltCallback+0x1e8>)
 80016d4:	f003 fbba 	bl	8004e4c <HAL_UART_Transmit>
        }
        HAL_UART_Receive_IT(&huart1, &DATA, 1);
 80016d8:	2201      	movs	r2, #1
 80016da:	4906      	ldr	r1, [pc, #24]	@ (80016f4 <HAL_UART_RxCpltCallback+0x1f0>)
 80016dc:	4803      	ldr	r0, [pc, #12]	@ (80016ec <HAL_UART_RxCpltCallback+0x1e8>)
 80016de:	f003 fc40 	bl	8004f62 <HAL_UART_Receive_IT>
    }
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000370 	.word	0x20000370
 80016f0:	200002d6 	.word	0x200002d6
 80016f4:	200002d5 	.word	0x200002d5
 80016f8:	20000258 	.word	0x20000258
 80016fc:	200002d8 	.word	0x200002d8
 8001700:	20000254 	.word	0x20000254
 8001704:	20000014 	.word	0x20000014
 8001708:	20000004 	.word	0x20000004
 800170c:	20000018 	.word	0x20000018
 8001710:	2000001c 	.word	0x2000001c
 8001714:	20000008 	.word	0x20000008
 8001718:	2000000c 	.word	0x2000000c
 800171c:	20000010 	.word	0x20000010
 8001720:	20000000 	.word	0x20000000

08001724 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001728:	4b17      	ldr	r3, [pc, #92]	@ (8001788 <MX_CAN1_Init+0x64>)
 800172a:	4a18      	ldr	r2, [pc, #96]	@ (800178c <MX_CAN1_Init+0x68>)
 800172c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 800172e:	4b16      	ldr	r3, [pc, #88]	@ (8001788 <MX_CAN1_Init+0x64>)
 8001730:	220c      	movs	r2, #12
 8001732:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001734:	4b14      	ldr	r3, [pc, #80]	@ (8001788 <MX_CAN1_Init+0x64>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800173a:	4b13      	ldr	r3, [pc, #76]	@ (8001788 <MX_CAN1_Init+0x64>)
 800173c:	2200      	movs	r2, #0
 800173e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001740:	4b11      	ldr	r3, [pc, #68]	@ (8001788 <MX_CAN1_Init+0x64>)
 8001742:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001746:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001748:	4b0f      	ldr	r3, [pc, #60]	@ (8001788 <MX_CAN1_Init+0x64>)
 800174a:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 800174e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001750:	4b0d      	ldr	r3, [pc, #52]	@ (8001788 <MX_CAN1_Init+0x64>)
 8001752:	2200      	movs	r2, #0
 8001754:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001756:	4b0c      	ldr	r3, [pc, #48]	@ (8001788 <MX_CAN1_Init+0x64>)
 8001758:	2200      	movs	r2, #0
 800175a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800175c:	4b0a      	ldr	r3, [pc, #40]	@ (8001788 <MX_CAN1_Init+0x64>)
 800175e:	2200      	movs	r2, #0
 8001760:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001762:	4b09      	ldr	r3, [pc, #36]	@ (8001788 <MX_CAN1_Init+0x64>)
 8001764:	2200      	movs	r2, #0
 8001766:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001768:	4b07      	ldr	r3, [pc, #28]	@ (8001788 <MX_CAN1_Init+0x64>)
 800176a:	2200      	movs	r2, #0
 800176c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800176e:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <MX_CAN1_Init+0x64>)
 8001770:	2200      	movs	r2, #0
 8001772:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001774:	4804      	ldr	r0, [pc, #16]	@ (8001788 <MX_CAN1_Init+0x64>)
 8001776:	f000 fded 	bl	8002354 <HAL_CAN_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001780:	f000 f962 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}
 8001788:	200002ec 	.word	0x200002ec
 800178c:	40006400 	.word	0x40006400

08001790 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	@ 0x28
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001824 <HAL_CAN_MspInit+0x94>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d133      	bne.n	800181a <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001828 <HAL_CAN_MspInit+0x98>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001828 <HAL_CAN_MspInit+0x98>)
 80017bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017c2:	4b19      	ldr	r3, [pc, #100]	@ (8001828 <HAL_CAN_MspInit+0x98>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	4b15      	ldr	r3, [pc, #84]	@ (8001828 <HAL_CAN_MspInit+0x98>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	4a14      	ldr	r2, [pc, #80]	@ (8001828 <HAL_CAN_MspInit+0x98>)
 80017d8:	f043 0308 	orr.w	r3, r3, #8
 80017dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017de:	4b12      	ldr	r3, [pc, #72]	@ (8001828 <HAL_CAN_MspInit+0x98>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017ea:	2303      	movs	r3, #3
 80017ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ee:	2302      	movs	r3, #2
 80017f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f6:	2303      	movs	r3, #3
 80017f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80017fa:	2309      	movs	r3, #9
 80017fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	4619      	mov	r1, r3
 8001804:	4809      	ldr	r0, [pc, #36]	@ (800182c <HAL_CAN_MspInit+0x9c>)
 8001806:	f001 fdb1 	bl	800336c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 9, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2109      	movs	r1, #9
 800180e:	2014      	movs	r0, #20
 8001810:	f001 fce3 	bl	80031da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001814:	2014      	movs	r0, #20
 8001816:	f001 fcfc 	bl	8003212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800181a:	bf00      	nop
 800181c:	3728      	adds	r7, #40	@ 0x28
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40006400 	.word	0x40006400
 8001828:	40023800 	.word	0x40023800
 800182c:	40020c00 	.word	0x40020c00

08001830 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	@ 0x28
 8001834:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
 8001844:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	4b2e      	ldr	r3, [pc, #184]	@ (8001904 <MX_GPIO_Init+0xd4>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	4a2d      	ldr	r2, [pc, #180]	@ (8001904 <MX_GPIO_Init+0xd4>)
 8001850:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001854:	6313      	str	r3, [r2, #48]	@ 0x30
 8001856:	4b2b      	ldr	r3, [pc, #172]	@ (8001904 <MX_GPIO_Init+0xd4>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	4b27      	ldr	r3, [pc, #156]	@ (8001904 <MX_GPIO_Init+0xd4>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	4a26      	ldr	r2, [pc, #152]	@ (8001904 <MX_GPIO_Init+0xd4>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6313      	str	r3, [r2, #48]	@ 0x30
 8001872:	4b24      	ldr	r3, [pc, #144]	@ (8001904 <MX_GPIO_Init+0xd4>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	4b20      	ldr	r3, [pc, #128]	@ (8001904 <MX_GPIO_Init+0xd4>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	4a1f      	ldr	r2, [pc, #124]	@ (8001904 <MX_GPIO_Init+0xd4>)
 8001888:	f043 0302 	orr.w	r3, r3, #2
 800188c:	6313      	str	r3, [r2, #48]	@ 0x30
 800188e:	4b1d      	ldr	r3, [pc, #116]	@ (8001904 <MX_GPIO_Init+0xd4>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	4b19      	ldr	r3, [pc, #100]	@ (8001904 <MX_GPIO_Init+0xd4>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	4a18      	ldr	r2, [pc, #96]	@ (8001904 <MX_GPIO_Init+0xd4>)
 80018a4:	f043 0308 	orr.w	r3, r3, #8
 80018a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018aa:	4b16      	ldr	r3, [pc, #88]	@ (8001904 <MX_GPIO_Init+0xd4>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	603b      	str	r3, [r7, #0]
 80018ba:	4b12      	ldr	r3, [pc, #72]	@ (8001904 <MX_GPIO_Init+0xd4>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	4a11      	ldr	r2, [pc, #68]	@ (8001904 <MX_GPIO_Init+0xd4>)
 80018c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001904 <MX_GPIO_Init+0xd4>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018d2:	2301      	movs	r3, #1
 80018d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018d6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80018da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	4619      	mov	r1, r3
 80018e6:	4808      	ldr	r0, [pc, #32]	@ (8001908 <MX_GPIO_Init+0xd8>)
 80018e8:	f001 fd40 	bl	800336c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 14, 0);
 80018ec:	2200      	movs	r2, #0
 80018ee:	210e      	movs	r1, #14
 80018f0:	2006      	movs	r0, #6
 80018f2:	f001 fc72 	bl	80031da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80018f6:	2006      	movs	r0, #6
 80018f8:	f001 fc8b 	bl	8003212 <HAL_NVIC_EnableIRQ>

}
 80018fc:	bf00      	nop
 80018fe:	3728      	adds	r7, #40	@ 0x28
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40023800 	.word	0x40023800
 8001908:	40020000 	.word	0x40020000

0800190c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001910:	f000 fc8a 	bl	8002228 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001914:	f000 f82e 	bl	8001974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001918:	f7ff ff8a 	bl	8001830 <MX_GPIO_Init>
  MX_CAN1_Init();
 800191c:	f7ff ff02 	bl	8001724 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8001920:	f000 fb5c 	bl	8001fdc <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001924:	f000 fb84 	bl	8002030 <MX_USART6_UART_Init>
  MX_TIM4_Init();
 8001928:	f000 fa86 	bl	8001e38 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  Emm_V5_init();
 800192c:	f7ff fbea 	bl	8001104 <Emm_V5_init>
  HAL_UART_Receive_IT(&huart1,(uint8_t *)&DATA,1);
 8001930:	2201      	movs	r2, #1
 8001932:	490d      	ldr	r1, [pc, #52]	@ (8001968 <main+0x5c>)
 8001934:	480d      	ldr	r0, [pc, #52]	@ (800196c <main+0x60>)
 8001936:	f003 fb14 	bl	8004f62 <HAL_UART_Receive_IT>
  Emm_V5_Reset_CurPos_To_Zero(0);
 800193a:	2000      	movs	r0, #0
 800193c:	f7ff fb32 	bl	8000fa4 <Emm_V5_Reset_CurPos_To_Zero>
  HAL_Delay(50);
 8001940:	2032      	movs	r0, #50	@ 0x32
 8001942:	f000 fce3 	bl	800230c <HAL_Delay>
  Emm_V5_Origin_Set_O(0, 1);
 8001946:	2101      	movs	r1, #1
 8001948:	2000      	movs	r0, #0
 800194a:	f7ff fb92 	bl	8001072 <Emm_V5_Origin_Set_O>
  HAL_Delay(50);
 800194e:	2032      	movs	r0, #50	@ 0x32
 8001950:	f000 fcdc 	bl	800230c <HAL_Delay>
  HAL_TIM_Base_Start(&htim4);
 8001954:	4806      	ldr	r0, [pc, #24]	@ (8001970 <main+0x64>)
 8001956:	f002 fb7d 	bl	8004054 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800195a:	2108      	movs	r1, #8
 800195c:	4804      	ldr	r0, [pc, #16]	@ (8001970 <main+0x64>)
 800195e:	f002 fc3b 	bl	80041d8 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001962:	bf00      	nop
 8001964:	e7fd      	b.n	8001962 <main+0x56>
 8001966:	bf00      	nop
 8001968:	200002d5 	.word	0x200002d5
 800196c:	20000370 	.word	0x20000370
 8001970:	20000328 	.word	0x20000328

08001974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b094      	sub	sp, #80	@ 0x50
 8001978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800197a:	f107 0320 	add.w	r3, r7, #32
 800197e:	2230      	movs	r2, #48	@ 0x30
 8001980:	2100      	movs	r1, #0
 8001982:	4618      	mov	r0, r3
 8001984:	f005 faeb 	bl	8006f5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001988:	f107 030c 	add.w	r3, r7, #12
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001998:	2300      	movs	r3, #0
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	4b28      	ldr	r3, [pc, #160]	@ (8001a40 <SystemClock_Config+0xcc>)
 800199e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a0:	4a27      	ldr	r2, [pc, #156]	@ (8001a40 <SystemClock_Config+0xcc>)
 80019a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80019a8:	4b25      	ldr	r3, [pc, #148]	@ (8001a40 <SystemClock_Config+0xcc>)
 80019aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019b4:	2300      	movs	r3, #0
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	4b22      	ldr	r3, [pc, #136]	@ (8001a44 <SystemClock_Config+0xd0>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a21      	ldr	r2, [pc, #132]	@ (8001a44 <SystemClock_Config+0xd0>)
 80019be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a44 <SystemClock_Config+0xd0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019cc:	607b      	str	r3, [r7, #4]
 80019ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019d0:	2302      	movs	r3, #2
 80019d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019d4:	2301      	movs	r3, #1
 80019d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019d8:	2310      	movs	r3, #16
 80019da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019dc:	2302      	movs	r3, #2
 80019de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019e0:	2300      	movs	r3, #0
 80019e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019e4:	2308      	movs	r3, #8
 80019e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80019e8:	23a8      	movs	r3, #168	@ 0xa8
 80019ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019ec:	2302      	movs	r3, #2
 80019ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019f0:	2304      	movs	r3, #4
 80019f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f4:	f107 0320 	add.w	r3, r7, #32
 80019f8:	4618      	mov	r0, r3
 80019fa:	f001 fe83 	bl	8003704 <HAL_RCC_OscConfig>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a04:	f000 f820 	bl	8001a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a08:	230f      	movs	r3, #15
 8001a0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a14:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a20:	f107 030c 	add.w	r3, r7, #12
 8001a24:	2105      	movs	r1, #5
 8001a26:	4618      	mov	r0, r3
 8001a28:	f002 f8e4 	bl	8003bf4 <HAL_RCC_ClockConfig>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a32:	f000 f809 	bl	8001a48 <Error_Handler>
  }
}
 8001a36:	bf00      	nop
 8001a38:	3750      	adds	r7, #80	@ 0x50
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40007000 	.word	0x40007000

08001a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a4c:	b672      	cpsid	i
}
 8001a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <Error_Handler+0x8>

08001a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]
 8001a5e:	4b10      	ldr	r3, [pc, #64]	@ (8001aa0 <HAL_MspInit+0x4c>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a62:	4a0f      	ldr	r2, [pc, #60]	@ (8001aa0 <HAL_MspInit+0x4c>)
 8001a64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa0 <HAL_MspInit+0x4c>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a72:	607b      	str	r3, [r7, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	603b      	str	r3, [r7, #0]
 8001a7a:	4b09      	ldr	r3, [pc, #36]	@ (8001aa0 <HAL_MspInit+0x4c>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7e:	4a08      	ldr	r2, [pc, #32]	@ (8001aa0 <HAL_MspInit+0x4c>)
 8001a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a86:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <HAL_MspInit+0x4c>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a8e:	603b      	str	r3, [r7, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	40023800 	.word	0x40023800

08001aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aa8:	bf00      	nop
 8001aaa:	e7fd      	b.n	8001aa8 <NMI_Handler+0x4>

08001aac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab0:	bf00      	nop
 8001ab2:	e7fd      	b.n	8001ab0 <HardFault_Handler+0x4>

08001ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab8:	bf00      	nop
 8001aba:	e7fd      	b.n	8001ab8 <MemManage_Handler+0x4>

08001abc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac0:	bf00      	nop
 8001ac2:	e7fd      	b.n	8001ac0 <BusFault_Handler+0x4>

08001ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac8:	bf00      	nop
 8001aca:	e7fd      	b.n	8001ac8 <UsageFault_Handler+0x4>

08001acc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001afa:	f000 fbe7 	bl	80022cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001b06:	2001      	movs	r0, #1
 8001b08:	f001 fde4 	bl	80036d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001b14:	4802      	ldr	r0, [pc, #8]	@ (8001b20 <CAN1_RX0_IRQHandler+0x10>)
 8001b16:	f001 f855 	bl	8002bc4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200002ec 	.word	0x200002ec

08001b24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b28:	4802      	ldr	r0, [pc, #8]	@ (8001b34 <USART1_IRQHandler+0x10>)
 8001b2a:	f003 fa3f 	bl	8004fac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000370 	.word	0x20000370

08001b38 <HAL_GPIO_EXTI_Callback>:


uint8_t data[]={'C','L','K'};
uint8_t dae[]={'A','C','K'};
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_0)
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	f040 808a 	bne.w	8001c5e <HAL_GPIO_EXTI_Callback+0x126>
	{
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)== GPIO_PIN_RESET)
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	4846      	ldr	r0, [pc, #280]	@ (8001c68 <HAL_GPIO_EXTI_Callback+0x130>)
 8001b4e:	f001 fda9 	bl	80036a4 <HAL_GPIO_ReadPin>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f040 8082 	bne.w	8001c5e <HAL_GPIO_EXTI_Callback+0x126>
		{
			HAL_Delay(10);
 8001b5a:	200a      	movs	r0, #10
 8001b5c:	f000 fbd6 	bl	800230c <HAL_Delay>
			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)== GPIO_PIN_RESET)
 8001b60:	2101      	movs	r1, #1
 8001b62:	4841      	ldr	r0, [pc, #260]	@ (8001c68 <HAL_GPIO_EXTI_Callback+0x130>)
 8001b64:	f001 fd9e 	bl	80036a4 <HAL_GPIO_ReadPin>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d112      	bne.n	8001b94 <HAL_GPIO_EXTI_Callback+0x5c>
			{
				S_time=HAL_GetTick();
 8001b6e:	f000 fbc1 	bl	80022f4 <HAL_GetTick>
 8001b72:	4603      	mov	r3, r0
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b3d      	ldr	r3, [pc, #244]	@ (8001c6c <HAL_GPIO_EXTI_Callback+0x134>)
 8001b78:	601a      	str	r2, [r3, #0]
				while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)== GPIO_PIN_RESET)
 8001b7a:	e004      	b.n	8001b86 <HAL_GPIO_EXTI_Callback+0x4e>
				{
					a++;
 8001b7c:	4b3c      	ldr	r3, [pc, #240]	@ (8001c70 <HAL_GPIO_EXTI_Callback+0x138>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	3301      	adds	r3, #1
 8001b82:	4a3b      	ldr	r2, [pc, #236]	@ (8001c70 <HAL_GPIO_EXTI_Callback+0x138>)
 8001b84:	6013      	str	r3, [r2, #0]
				while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)== GPIO_PIN_RESET)
 8001b86:	2101      	movs	r1, #1
 8001b88:	4837      	ldr	r0, [pc, #220]	@ (8001c68 <HAL_GPIO_EXTI_Callback+0x130>)
 8001b8a:	f001 fd8b 	bl	80036a4 <HAL_GPIO_ReadPin>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0f3      	beq.n	8001b7c <HAL_GPIO_EXTI_Callback+0x44>
				}
			}
			N_time=HAL_GetTick();
 8001b94:	f000 fbae 	bl	80022f4 <HAL_GetTick>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	4b35      	ldr	r3, [pc, #212]	@ (8001c74 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001b9e:	601a      	str	r2, [r3, #0]
			num=N_time-S_time;
 8001ba0:	4b34      	ldr	r3, [pc, #208]	@ (8001c74 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b31      	ldr	r3, [pc, #196]	@ (8001c6c <HAL_GPIO_EXTI_Callback+0x134>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	4a33      	ldr	r2, [pc, #204]	@ (8001c78 <HAL_GPIO_EXTI_Callback+0x140>)
 8001bac:	6013      	str	r3, [r2, #0]
			if(num>2000)
 8001bae:	4b32      	ldr	r3, [pc, #200]	@ (8001c78 <HAL_GPIO_EXTI_Callback+0x140>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001bb6:	dd10      	ble.n	8001bda <HAL_GPIO_EXTI_Callback+0xa2>
			{
				buzzer_on(0,10000);
 8001bb8:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	f7ff faeb 	bl	8001198 <buzzer_on>
				HAL_Delay(1000);
 8001bc2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bc6:	f000 fba1 	bl	800230c <HAL_Delay>

				Emm_V5_Origin_Trigger_Return(0, 0, 0);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2100      	movs	r1, #0
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f7ff fa73 	bl	80010ba <Emm_V5_Origin_Trigger_Return>
				buzzer_off();
 8001bd4:	f7ff faf8 	bl	80011c8 <buzzer_off>
				}
			}

		}
	}
}
 8001bd8:	e041      	b.n	8001c5e <HAL_GPIO_EXTI_Callback+0x126>
				if(num>600)
 8001bda:	4b27      	ldr	r3, [pc, #156]	@ (8001c78 <HAL_GPIO_EXTI_Callback+0x140>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8001be2:	dd1e      	ble.n	8001c22 <HAL_GPIO_EXTI_Callback+0xea>
					HAL_UART_Transmit(&huart1,&data, sizeof(data), 20);
 8001be4:	2314      	movs	r3, #20
 8001be6:	2203      	movs	r2, #3
 8001be8:	4924      	ldr	r1, [pc, #144]	@ (8001c7c <HAL_GPIO_EXTI_Callback+0x144>)
 8001bea:	4825      	ldr	r0, [pc, #148]	@ (8001c80 <HAL_GPIO_EXTI_Callback+0x148>)
 8001bec:	f003 f92e 	bl	8004e4c <HAL_UART_Transmit>
					for(int i=0;i<5;i++)
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	e011      	b.n	8001c1a <HAL_GPIO_EXTI_Callback+0xe2>
						buzzer_on(0,10000);
 8001bf6:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	f7ff facc 	bl	8001198 <buzzer_on>
						HAL_Delay(400);
 8001c00:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001c04:	f000 fb82 	bl	800230c <HAL_Delay>
						buzzer_off();
 8001c08:	f7ff fade 	bl	80011c8 <buzzer_off>
						HAL_Delay(500);
 8001c0c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c10:	f000 fb7c 	bl	800230c <HAL_Delay>
					for(int i=0;i<5;i++)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	3301      	adds	r3, #1
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	ddea      	ble.n	8001bf6 <HAL_GPIO_EXTI_Callback+0xbe>
}
 8001c20:	e01d      	b.n	8001c5e <HAL_GPIO_EXTI_Callback+0x126>
					HAL_UART_Transmit(&huart1,&dae, sizeof(dae), 20);
 8001c22:	2314      	movs	r3, #20
 8001c24:	2203      	movs	r2, #3
 8001c26:	4917      	ldr	r1, [pc, #92]	@ (8001c84 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001c28:	4815      	ldr	r0, [pc, #84]	@ (8001c80 <HAL_GPIO_EXTI_Callback+0x148>)
 8001c2a:	f003 f90f 	bl	8004e4c <HAL_UART_Transmit>
					for(int i=0;i<3;i++)
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	e011      	b.n	8001c58 <HAL_GPIO_EXTI_Callback+0x120>
						buzzer_on(0,10000);
 8001c34:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001c38:	2000      	movs	r0, #0
 8001c3a:	f7ff faad 	bl	8001198 <buzzer_on>
						HAL_Delay(400);
 8001c3e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001c42:	f000 fb63 	bl	800230c <HAL_Delay>
						buzzer_off();
 8001c46:	f7ff fabf 	bl	80011c8 <buzzer_off>
						HAL_Delay(500);
 8001c4a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c4e:	f000 fb5d 	bl	800230c <HAL_Delay>
					for(int i=0;i<3;i++)
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	3301      	adds	r3, #1
 8001c56:	60bb      	str	r3, [r7, #8]
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	ddea      	ble.n	8001c34 <HAL_GPIO_EXTI_Callback+0xfc>
}
 8001c5e:	bf00      	nop
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40020000 	.word	0x40020000
 8001c6c:	20000318 	.word	0x20000318
 8001c70:	20000320 	.word	0x20000320
 8001c74:	2000031c 	.word	0x2000031c
 8001c78:	20000314 	.word	0x20000314
 8001c7c:	20000020 	.word	0x20000020
 8001c80:	20000370 	.word	0x20000370
 8001c84:	20000024 	.word	0x20000024

08001c88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return 1;
 8001c8c:	2301      	movs	r3, #1
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <_kill>:

int _kill(int pid, int sig)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ca2:	f005 fa19 	bl	80070d8 <__errno>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2216      	movs	r2, #22
 8001caa:	601a      	str	r2, [r3, #0]
  return -1;
 8001cac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <_exit>:

void _exit (int status)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff ffe7 	bl	8001c98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cca:	bf00      	nop
 8001ccc:	e7fd      	b.n	8001cca <_exit+0x12>

08001cce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b086      	sub	sp, #24
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	e00a      	b.n	8001cf6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ce0:	f3af 8000 	nop.w
 8001ce4:	4601      	mov	r1, r0
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	1c5a      	adds	r2, r3, #1
 8001cea:	60ba      	str	r2, [r7, #8]
 8001cec:	b2ca      	uxtb	r2, r1
 8001cee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	dbf0      	blt.n	8001ce0 <_read+0x12>
  }

  return len;
 8001cfe:	687b      	ldr	r3, [r7, #4]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	e009      	b.n	8001d2e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	1c5a      	adds	r2, r3, #1
 8001d1e:	60ba      	str	r2, [r7, #8]
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	dbf1      	blt.n	8001d1a <_write+0x12>
  }
  return len;
 8001d36:	687b      	ldr	r3, [r7, #4]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3718      	adds	r7, #24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <_close>:

int _close(int file)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d68:	605a      	str	r2, [r3, #4]
  return 0;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <_isatty>:

int _isatty(int file)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d80:	2301      	movs	r3, #1
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b085      	sub	sp, #20
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	60f8      	str	r0, [r7, #12]
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001db0:	4a14      	ldr	r2, [pc, #80]	@ (8001e04 <_sbrk+0x5c>)
 8001db2:	4b15      	ldr	r3, [pc, #84]	@ (8001e08 <_sbrk+0x60>)
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dbc:	4b13      	ldr	r3, [pc, #76]	@ (8001e0c <_sbrk+0x64>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d102      	bne.n	8001dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dc4:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <_sbrk+0x64>)
 8001dc6:	4a12      	ldr	r2, [pc, #72]	@ (8001e10 <_sbrk+0x68>)
 8001dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dca:	4b10      	ldr	r3, [pc, #64]	@ (8001e0c <_sbrk+0x64>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d207      	bcs.n	8001de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dd8:	f005 f97e 	bl	80070d8 <__errno>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	220c      	movs	r2, #12
 8001de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001de2:	f04f 33ff 	mov.w	r3, #4294967295
 8001de6:	e009      	b.n	8001dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001de8:	4b08      	ldr	r3, [pc, #32]	@ (8001e0c <_sbrk+0x64>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dee:	4b07      	ldr	r3, [pc, #28]	@ (8001e0c <_sbrk+0x64>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	4a05      	ldr	r2, [pc, #20]	@ (8001e0c <_sbrk+0x64>)
 8001df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20020000 	.word	0x20020000
 8001e08:	00000400 	.word	0x00000400
 8001e0c:	20000324 	.word	0x20000324
 8001e10:	20000550 	.word	0x20000550

08001e14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e18:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <SystemInit+0x20>)
 8001e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e1e:	4a05      	ldr	r2, [pc, #20]	@ (8001e34 <SystemInit+0x20>)
 8001e20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08e      	sub	sp, #56	@ 0x38
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	605a      	str	r2, [r3, #4]
 8001e48:	609a      	str	r2, [r3, #8]
 8001e4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e4c:	f107 0320 	add.w	r3, r7, #32
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e56:	1d3b      	adds	r3, r7, #4
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]
 8001e64:	615a      	str	r2, [r3, #20]
 8001e66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e68:	4b2c      	ldr	r3, [pc, #176]	@ (8001f1c <MX_TIM4_Init+0xe4>)
 8001e6a:	4a2d      	ldr	r2, [pc, #180]	@ (8001f20 <MX_TIM4_Init+0xe8>)
 8001e6c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001e6e:	4b2b      	ldr	r3, [pc, #172]	@ (8001f1c <MX_TIM4_Init+0xe4>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e74:	4b29      	ldr	r3, [pc, #164]	@ (8001f1c <MX_TIM4_Init+0xe4>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001e7a:	4b28      	ldr	r3, [pc, #160]	@ (8001f1c <MX_TIM4_Init+0xe4>)
 8001e7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e80:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e82:	4b26      	ldr	r3, [pc, #152]	@ (8001f1c <MX_TIM4_Init+0xe4>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e88:	4b24      	ldr	r3, [pc, #144]	@ (8001f1c <MX_TIM4_Init+0xe4>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001e8e:	4823      	ldr	r0, [pc, #140]	@ (8001f1c <MX_TIM4_Init+0xe4>)
 8001e90:	f002 f890 	bl	8003fb4 <HAL_TIM_Base_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001e9a:	f7ff fdd5 	bl	8001a48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ea4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	481c      	ldr	r0, [pc, #112]	@ (8001f1c <MX_TIM4_Init+0xe4>)
 8001eac:	f002 fb1e 	bl	80044ec <HAL_TIM_ConfigClockSource>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001eb6:	f7ff fdc7 	bl	8001a48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001eba:	4818      	ldr	r0, [pc, #96]	@ (8001f1c <MX_TIM4_Init+0xe4>)
 8001ebc:	f002 f932 	bl	8004124 <HAL_TIM_PWM_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001ec6:	f7ff fdbf 	bl	8001a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ed2:	f107 0320 	add.w	r3, r7, #32
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4810      	ldr	r0, [pc, #64]	@ (8001f1c <MX_TIM4_Init+0xe4>)
 8001eda:	f002 feeb 	bl	8004cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001ee4:	f7ff fdb0 	bl	8001a48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ee8:	2360      	movs	r3, #96	@ 0x60
 8001eea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ef8:	1d3b      	adds	r3, r7, #4
 8001efa:	2208      	movs	r2, #8
 8001efc:	4619      	mov	r1, r3
 8001efe:	4807      	ldr	r0, [pc, #28]	@ (8001f1c <MX_TIM4_Init+0xe4>)
 8001f00:	f002 fa32 	bl	8004368 <HAL_TIM_PWM_ConfigChannel>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001f0a:	f7ff fd9d 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001f0e:	4803      	ldr	r0, [pc, #12]	@ (8001f1c <MX_TIM4_Init+0xe4>)
 8001f10:	f000 f82a 	bl	8001f68 <HAL_TIM_MspPostInit>

}
 8001f14:	bf00      	nop
 8001f16:	3738      	adds	r7, #56	@ 0x38
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000328 	.word	0x20000328
 8001f20:	40000800 	.word	0x40000800

08001f24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0b      	ldr	r2, [pc, #44]	@ (8001f60 <HAL_TIM_Base_MspInit+0x3c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d10d      	bne.n	8001f52 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f64 <HAL_TIM_Base_MspInit+0x40>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3e:	4a09      	ldr	r2, [pc, #36]	@ (8001f64 <HAL_TIM_Base_MspInit+0x40>)
 8001f40:	f043 0304 	orr.w	r3, r3, #4
 8001f44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f46:	4b07      	ldr	r3, [pc, #28]	@ (8001f64 <HAL_TIM_Base_MspInit+0x40>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001f52:	bf00      	nop
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40000800 	.word	0x40000800
 8001f64:	40023800 	.word	0x40023800

08001f68 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	f107 030c 	add.w	r3, r7, #12
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a12      	ldr	r2, [pc, #72]	@ (8001fd0 <HAL_TIM_MspPostInit+0x68>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d11e      	bne.n	8001fc8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	4b11      	ldr	r3, [pc, #68]	@ (8001fd4 <HAL_TIM_MspPostInit+0x6c>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f92:	4a10      	ldr	r2, [pc, #64]	@ (8001fd4 <HAL_TIM_MspPostInit+0x6c>)
 8001f94:	f043 0308 	orr.w	r3, r3, #8
 8001f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd4 <HAL_TIM_MspPostInit+0x6c>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001fa6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001faa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fac:	2302      	movs	r3, #2
 8001fae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fbc:	f107 030c 	add.w	r3, r7, #12
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4805      	ldr	r0, [pc, #20]	@ (8001fd8 <HAL_TIM_MspPostInit+0x70>)
 8001fc4:	f001 f9d2 	bl	800336c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001fc8:	bf00      	nop
 8001fca:	3720      	adds	r7, #32
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40000800 	.word	0x40000800
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40020c00 	.word	0x40020c00

08001fdc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fe0:	4b11      	ldr	r3, [pc, #68]	@ (8002028 <MX_USART1_UART_Init+0x4c>)
 8001fe2:	4a12      	ldr	r2, [pc, #72]	@ (800202c <MX_USART1_UART_Init+0x50>)
 8001fe4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fe6:	4b10      	ldr	r3, [pc, #64]	@ (8002028 <MX_USART1_UART_Init+0x4c>)
 8001fe8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fee:	4b0e      	ldr	r3, [pc, #56]	@ (8002028 <MX_USART1_UART_Init+0x4c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8002028 <MX_USART1_UART_Init+0x4c>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8002028 <MX_USART1_UART_Init+0x4c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002000:	4b09      	ldr	r3, [pc, #36]	@ (8002028 <MX_USART1_UART_Init+0x4c>)
 8002002:	220c      	movs	r2, #12
 8002004:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002006:	4b08      	ldr	r3, [pc, #32]	@ (8002028 <MX_USART1_UART_Init+0x4c>)
 8002008:	2200      	movs	r2, #0
 800200a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800200c:	4b06      	ldr	r3, [pc, #24]	@ (8002028 <MX_USART1_UART_Init+0x4c>)
 800200e:	2200      	movs	r2, #0
 8002010:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002012:	4805      	ldr	r0, [pc, #20]	@ (8002028 <MX_USART1_UART_Init+0x4c>)
 8002014:	f002 feca 	bl	8004dac <HAL_UART_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800201e:	f7ff fd13 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000370 	.word	0x20000370
 800202c:	40011000 	.word	0x40011000

08002030 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002034:	4b11      	ldr	r3, [pc, #68]	@ (800207c <MX_USART6_UART_Init+0x4c>)
 8002036:	4a12      	ldr	r2, [pc, #72]	@ (8002080 <MX_USART6_UART_Init+0x50>)
 8002038:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800203a:	4b10      	ldr	r3, [pc, #64]	@ (800207c <MX_USART6_UART_Init+0x4c>)
 800203c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002040:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002042:	4b0e      	ldr	r3, [pc, #56]	@ (800207c <MX_USART6_UART_Init+0x4c>)
 8002044:	2200      	movs	r2, #0
 8002046:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002048:	4b0c      	ldr	r3, [pc, #48]	@ (800207c <MX_USART6_UART_Init+0x4c>)
 800204a:	2200      	movs	r2, #0
 800204c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800204e:	4b0b      	ldr	r3, [pc, #44]	@ (800207c <MX_USART6_UART_Init+0x4c>)
 8002050:	2200      	movs	r2, #0
 8002052:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002054:	4b09      	ldr	r3, [pc, #36]	@ (800207c <MX_USART6_UART_Init+0x4c>)
 8002056:	220c      	movs	r2, #12
 8002058:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800205a:	4b08      	ldr	r3, [pc, #32]	@ (800207c <MX_USART6_UART_Init+0x4c>)
 800205c:	2200      	movs	r2, #0
 800205e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002060:	4b06      	ldr	r3, [pc, #24]	@ (800207c <MX_USART6_UART_Init+0x4c>)
 8002062:	2200      	movs	r2, #0
 8002064:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002066:	4805      	ldr	r0, [pc, #20]	@ (800207c <MX_USART6_UART_Init+0x4c>)
 8002068:	f002 fea0 	bl	8004dac <HAL_UART_Init>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002072:	f7ff fce9 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	200003b8 	.word	0x200003b8
 8002080:	40011400 	.word	0x40011400

08002084 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08c      	sub	sp, #48	@ 0x30
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 031c 	add.w	r3, r7, #28
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a46      	ldr	r2, [pc, #280]	@ (80021bc <HAL_UART_MspInit+0x138>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d153      	bne.n	800214e <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	61bb      	str	r3, [r7, #24]
 80020aa:	4b45      	ldr	r3, [pc, #276]	@ (80021c0 <HAL_UART_MspInit+0x13c>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ae:	4a44      	ldr	r2, [pc, #272]	@ (80021c0 <HAL_UART_MspInit+0x13c>)
 80020b0:	f043 0310 	orr.w	r3, r3, #16
 80020b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80020b6:	4b42      	ldr	r3, [pc, #264]	@ (80021c0 <HAL_UART_MspInit+0x13c>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ba:	f003 0310 	and.w	r3, r3, #16
 80020be:	61bb      	str	r3, [r7, #24]
 80020c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	4b3e      	ldr	r3, [pc, #248]	@ (80021c0 <HAL_UART_MspInit+0x13c>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ca:	4a3d      	ldr	r2, [pc, #244]	@ (80021c0 <HAL_UART_MspInit+0x13c>)
 80020cc:	f043 0302 	orr.w	r3, r3, #2
 80020d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020d2:	4b3b      	ldr	r3, [pc, #236]	@ (80021c0 <HAL_UART_MspInit+0x13c>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	613b      	str	r3, [r7, #16]
 80020e2:	4b37      	ldr	r3, [pc, #220]	@ (80021c0 <HAL_UART_MspInit+0x13c>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e6:	4a36      	ldr	r2, [pc, #216]	@ (80021c0 <HAL_UART_MspInit+0x13c>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ee:	4b34      	ldr	r3, [pc, #208]	@ (80021c0 <HAL_UART_MspInit+0x13c>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80020fa:	2380      	movs	r3, #128	@ 0x80
 80020fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fe:	2302      	movs	r3, #2
 8002100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002106:	2303      	movs	r3, #3
 8002108:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800210a:	2307      	movs	r3, #7
 800210c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800210e:	f107 031c 	add.w	r3, r7, #28
 8002112:	4619      	mov	r1, r3
 8002114:	482b      	ldr	r0, [pc, #172]	@ (80021c4 <HAL_UART_MspInit+0x140>)
 8002116:	f001 f929 	bl	800336c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800211a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800211e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002120:	2302      	movs	r3, #2
 8002122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002128:	2303      	movs	r3, #3
 800212a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800212c:	2307      	movs	r3, #7
 800212e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002130:	f107 031c 	add.w	r3, r7, #28
 8002134:	4619      	mov	r1, r3
 8002136:	4824      	ldr	r0, [pc, #144]	@ (80021c8 <HAL_UART_MspInit+0x144>)
 8002138:	f001 f918 	bl	800336c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 800213c:	2200      	movs	r2, #0
 800213e:	2103      	movs	r1, #3
 8002140:	2025      	movs	r0, #37	@ 0x25
 8002142:	f001 f84a 	bl	80031da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002146:	2025      	movs	r0, #37	@ 0x25
 8002148:	f001 f863 	bl	8003212 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800214c:	e031      	b.n	80021b2 <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART6)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a1e      	ldr	r2, [pc, #120]	@ (80021cc <HAL_UART_MspInit+0x148>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d12c      	bne.n	80021b2 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	4b18      	ldr	r3, [pc, #96]	@ (80021c0 <HAL_UART_MspInit+0x13c>)
 800215e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002160:	4a17      	ldr	r2, [pc, #92]	@ (80021c0 <HAL_UART_MspInit+0x13c>)
 8002162:	f043 0320 	orr.w	r3, r3, #32
 8002166:	6453      	str	r3, [r2, #68]	@ 0x44
 8002168:	4b15      	ldr	r3, [pc, #84]	@ (80021c0 <HAL_UART_MspInit+0x13c>)
 800216a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216c:	f003 0320 	and.w	r3, r3, #32
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002174:	2300      	movs	r3, #0
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	4b11      	ldr	r3, [pc, #68]	@ (80021c0 <HAL_UART_MspInit+0x13c>)
 800217a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217c:	4a10      	ldr	r2, [pc, #64]	@ (80021c0 <HAL_UART_MspInit+0x13c>)
 800217e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002182:	6313      	str	r3, [r2, #48]	@ 0x30
 8002184:	4b0e      	ldr	r3, [pc, #56]	@ (80021c0 <HAL_UART_MspInit+0x13c>)
 8002186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8002190:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8002194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219e:	2303      	movs	r3, #3
 80021a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80021a2:	2308      	movs	r3, #8
 80021a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021a6:	f107 031c 	add.w	r3, r7, #28
 80021aa:	4619      	mov	r1, r3
 80021ac:	4808      	ldr	r0, [pc, #32]	@ (80021d0 <HAL_UART_MspInit+0x14c>)
 80021ae:	f001 f8dd 	bl	800336c <HAL_GPIO_Init>
}
 80021b2:	bf00      	nop
 80021b4:	3730      	adds	r7, #48	@ 0x30
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40011000 	.word	0x40011000
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40020400 	.word	0x40020400
 80021c8:	40020000 	.word	0x40020000
 80021cc:	40011400 	.word	0x40011400
 80021d0:	40021800 	.word	0x40021800

080021d4 <Reset_Handler>:
 80021d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800220c <LoopFillZerobss+0xe>
 80021d8:	f7ff fe1c 	bl	8001e14 <SystemInit>
 80021dc:	480c      	ldr	r0, [pc, #48]	@ (8002210 <LoopFillZerobss+0x12>)
 80021de:	490d      	ldr	r1, [pc, #52]	@ (8002214 <LoopFillZerobss+0x16>)
 80021e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002218 <LoopFillZerobss+0x1a>)
 80021e2:	2300      	movs	r3, #0
 80021e4:	e002      	b.n	80021ec <LoopCopyDataInit>

080021e6 <CopyDataInit>:
 80021e6:	58d4      	ldr	r4, [r2, r3]
 80021e8:	50c4      	str	r4, [r0, r3]
 80021ea:	3304      	adds	r3, #4

080021ec <LoopCopyDataInit>:
 80021ec:	18c4      	adds	r4, r0, r3
 80021ee:	428c      	cmp	r4, r1
 80021f0:	d3f9      	bcc.n	80021e6 <CopyDataInit>
 80021f2:	4a0a      	ldr	r2, [pc, #40]	@ (800221c <LoopFillZerobss+0x1e>)
 80021f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002220 <LoopFillZerobss+0x22>)
 80021f6:	2300      	movs	r3, #0
 80021f8:	e001      	b.n	80021fe <LoopFillZerobss>

080021fa <FillZerobss>:
 80021fa:	6013      	str	r3, [r2, #0]
 80021fc:	3204      	adds	r2, #4

080021fe <LoopFillZerobss>:
 80021fe:	42a2      	cmp	r2, r4
 8002200:	d3fb      	bcc.n	80021fa <FillZerobss>
 8002202:	f004 ff6f 	bl	80070e4 <__libc_init_array>
 8002206:	f7ff fb81 	bl	800190c <main>
 800220a:	4770      	bx	lr
 800220c:	20020000 	.word	0x20020000
 8002210:	20000000 	.word	0x20000000
 8002214:	200001fc 	.word	0x200001fc
 8002218:	08009304 	.word	0x08009304
 800221c:	200001fc 	.word	0x200001fc
 8002220:	20000550 	.word	0x20000550

08002224 <ADC_IRQHandler>:
 8002224:	e7fe      	b.n	8002224 <ADC_IRQHandler>
	...

08002228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800222c:	4b0e      	ldr	r3, [pc, #56]	@ (8002268 <HAL_Init+0x40>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a0d      	ldr	r2, [pc, #52]	@ (8002268 <HAL_Init+0x40>)
 8002232:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002236:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002238:	4b0b      	ldr	r3, [pc, #44]	@ (8002268 <HAL_Init+0x40>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a0a      	ldr	r2, [pc, #40]	@ (8002268 <HAL_Init+0x40>)
 800223e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002242:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002244:	4b08      	ldr	r3, [pc, #32]	@ (8002268 <HAL_Init+0x40>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a07      	ldr	r2, [pc, #28]	@ (8002268 <HAL_Init+0x40>)
 800224a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800224e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002250:	2003      	movs	r0, #3
 8002252:	f000 ffb7 	bl	80031c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002256:	2002      	movs	r0, #2
 8002258:	f000 f808 	bl	800226c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800225c:	f7ff fbfa 	bl	8001a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40023c00 	.word	0x40023c00

0800226c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002274:	4b12      	ldr	r3, [pc, #72]	@ (80022c0 <HAL_InitTick+0x54>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	4b12      	ldr	r3, [pc, #72]	@ (80022c4 <HAL_InitTick+0x58>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	4619      	mov	r1, r3
 800227e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002282:	fbb3 f3f1 	udiv	r3, r3, r1
 8002286:	fbb2 f3f3 	udiv	r3, r2, r3
 800228a:	4618      	mov	r0, r3
 800228c:	f000 ffcf 	bl	800322e <HAL_SYSTICK_Config>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e00e      	b.n	80022b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b0f      	cmp	r3, #15
 800229e:	d80a      	bhi.n	80022b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022a0:	2200      	movs	r2, #0
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	f04f 30ff 	mov.w	r0, #4294967295
 80022a8:	f000 ff97 	bl	80031da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022ac:	4a06      	ldr	r2, [pc, #24]	@ (80022c8 <HAL_InitTick+0x5c>)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	e000      	b.n	80022b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20000028 	.word	0x20000028
 80022c4:	20000030 	.word	0x20000030
 80022c8:	2000002c 	.word	0x2000002c

080022cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022d0:	4b06      	ldr	r3, [pc, #24]	@ (80022ec <HAL_IncTick+0x20>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	461a      	mov	r2, r3
 80022d6:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <HAL_IncTick+0x24>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4413      	add	r3, r2
 80022dc:	4a04      	ldr	r2, [pc, #16]	@ (80022f0 <HAL_IncTick+0x24>)
 80022de:	6013      	str	r3, [r2, #0]
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	20000030 	.word	0x20000030
 80022f0:	20000400 	.word	0x20000400

080022f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return uwTick;
 80022f8:	4b03      	ldr	r3, [pc, #12]	@ (8002308 <HAL_GetTick+0x14>)
 80022fa:	681b      	ldr	r3, [r3, #0]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20000400 	.word	0x20000400

0800230c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002314:	f7ff ffee 	bl	80022f4 <HAL_GetTick>
 8002318:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002324:	d005      	beq.n	8002332 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002326:	4b0a      	ldr	r3, [pc, #40]	@ (8002350 <HAL_Delay+0x44>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4413      	add	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002332:	bf00      	nop
 8002334:	f7ff ffde 	bl	80022f4 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	429a      	cmp	r2, r3
 8002342:	d8f7      	bhi.n	8002334 <HAL_Delay+0x28>
  {
  }
}
 8002344:	bf00      	nop
 8002346:	bf00      	nop
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000030 	.word	0x20000030

08002354 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e0ed      	b.n	8002542 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 3020 	ldrb.w	r3, [r3, #32]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d102      	bne.n	8002378 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff fa0c 	bl	8001790 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0201 	orr.w	r2, r2, #1
 8002386:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002388:	f7ff ffb4 	bl	80022f4 <HAL_GetTick>
 800238c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800238e:	e012      	b.n	80023b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002390:	f7ff ffb0 	bl	80022f4 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b0a      	cmp	r3, #10
 800239c:	d90b      	bls.n	80023b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2205      	movs	r2, #5
 80023ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e0c5      	b.n	8002542 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0e5      	beq.n	8002390 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0202 	bic.w	r2, r2, #2
 80023d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023d4:	f7ff ff8e 	bl	80022f4 <HAL_GetTick>
 80023d8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023da:	e012      	b.n	8002402 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023dc:	f7ff ff8a 	bl	80022f4 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b0a      	cmp	r3, #10
 80023e8:	d90b      	bls.n	8002402 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2205      	movs	r2, #5
 80023fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e09f      	b.n	8002542 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1e5      	bne.n	80023dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	7e1b      	ldrb	r3, [r3, #24]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d108      	bne.n	800242a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	e007      	b.n	800243a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002438:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	7e5b      	ldrb	r3, [r3, #25]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d108      	bne.n	8002454 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	e007      	b.n	8002464 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002462:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	7e9b      	ldrb	r3, [r3, #26]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d108      	bne.n	800247e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0220 	orr.w	r2, r2, #32
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	e007      	b.n	800248e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 0220 	bic.w	r2, r2, #32
 800248c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	7edb      	ldrb	r3, [r3, #27]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d108      	bne.n	80024a8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0210 	bic.w	r2, r2, #16
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	e007      	b.n	80024b8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0210 	orr.w	r2, r2, #16
 80024b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	7f1b      	ldrb	r3, [r3, #28]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d108      	bne.n	80024d2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0208 	orr.w	r2, r2, #8
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	e007      	b.n	80024e2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0208 	bic.w	r2, r2, #8
 80024e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	7f5b      	ldrb	r3, [r3, #29]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d108      	bne.n	80024fc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f042 0204 	orr.w	r2, r2, #4
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	e007      	b.n	800250c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0204 	bic.w	r2, r2, #4
 800250a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	431a      	orrs	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	ea42 0103 	orr.w	r1, r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	1e5a      	subs	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800254c:	b480      	push	{r7}
 800254e:	b087      	sub	sp, #28
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002562:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002564:	7cfb      	ldrb	r3, [r7, #19]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d003      	beq.n	8002572 <HAL_CAN_ConfigFilter+0x26>
 800256a:	7cfb      	ldrb	r3, [r7, #19]
 800256c:	2b02      	cmp	r3, #2
 800256e:	f040 80be 	bne.w	80026ee <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002572:	4b65      	ldr	r3, [pc, #404]	@ (8002708 <HAL_CAN_ConfigFilter+0x1bc>)
 8002574:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800257c:	f043 0201 	orr.w	r2, r3, #1
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800258c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a0:	021b      	lsls	r3, r3, #8
 80025a2:	431a      	orrs	r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	f003 031f 	and.w	r3, r3, #31
 80025b2:	2201      	movs	r2, #1
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	43db      	mvns	r3, r3
 80025c4:	401a      	ands	r2, r3
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d123      	bne.n	800261c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	43db      	mvns	r3, r3
 80025de:	401a      	ands	r2, r3
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80025f6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	3248      	adds	r2, #72	@ 0x48
 80025fc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002610:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002612:	6979      	ldr	r1, [r7, #20]
 8002614:	3348      	adds	r3, #72	@ 0x48
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	440b      	add	r3, r1
 800261a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d122      	bne.n	800266a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	431a      	orrs	r2, r3
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002644:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	3248      	adds	r2, #72	@ 0x48
 800264a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800265e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002660:	6979      	ldr	r1, [r7, #20]
 8002662:	3348      	adds	r3, #72	@ 0x48
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	440b      	add	r3, r1
 8002668:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d109      	bne.n	8002686 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	43db      	mvns	r3, r3
 800267c:	401a      	ands	r2, r3
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002684:	e007      	b.n	8002696 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	431a      	orrs	r2, r3
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d109      	bne.n	80026b2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	43db      	mvns	r3, r3
 80026a8:	401a      	ands	r2, r3
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80026b0:	e007      	b.n	80026c2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	431a      	orrs	r2, r3
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d107      	bne.n	80026da <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80026e0:	f023 0201 	bic.w	r2, r3, #1
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80026ea:	2300      	movs	r3, #0
 80026ec:	e006      	b.n	80026fc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
  }
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	371c      	adds	r7, #28
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	40006400 	.word	0x40006400

0800270c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 3020 	ldrb.w	r3, [r3, #32]
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b01      	cmp	r3, #1
 800271e:	d12e      	bne.n	800277e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0201 	bic.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002738:	f7ff fddc 	bl	80022f4 <HAL_GetTick>
 800273c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800273e:	e012      	b.n	8002766 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002740:	f7ff fdd8 	bl	80022f4 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b0a      	cmp	r3, #10
 800274c:	d90b      	bls.n	8002766 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002752:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2205      	movs	r2, #5
 800275e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e012      	b.n	800278c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1e5      	bne.n	8002740 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	e006      	b.n	800278c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002782:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
  }
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002794:	b480      	push	{r7}
 8002796:	b089      	sub	sp, #36	@ 0x24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027a8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80027b2:	7ffb      	ldrb	r3, [r7, #31]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d003      	beq.n	80027c0 <HAL_CAN_AddTxMessage+0x2c>
 80027b8:	7ffb      	ldrb	r3, [r7, #31]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	f040 80ad 	bne.w	800291a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10a      	bne.n	80027e0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d105      	bne.n	80027e0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 8095 	beq.w	800290a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	0e1b      	lsrs	r3, r3, #24
 80027e4:	f003 0303 	and.w	r3, r3, #3
 80027e8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80027ea:	2201      	movs	r2, #1
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	409a      	lsls	r2, r3
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d10d      	bne.n	8002818 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002806:	68f9      	ldr	r1, [r7, #12]
 8002808:	6809      	ldr	r1, [r1, #0]
 800280a:	431a      	orrs	r2, r3
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	3318      	adds	r3, #24
 8002810:	011b      	lsls	r3, r3, #4
 8002812:	440b      	add	r3, r1
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	e00f      	b.n	8002838 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002822:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002828:	68f9      	ldr	r1, [r7, #12]
 800282a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800282c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	3318      	adds	r3, #24
 8002832:	011b      	lsls	r3, r3, #4
 8002834:	440b      	add	r3, r1
 8002836:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6819      	ldr	r1, [r3, #0]
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	3318      	adds	r3, #24
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	440b      	add	r3, r1
 8002848:	3304      	adds	r3, #4
 800284a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	7d1b      	ldrb	r3, [r3, #20]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d111      	bne.n	8002878 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	3318      	adds	r3, #24
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	4413      	add	r3, r2
 8002860:	3304      	adds	r3, #4
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	6811      	ldr	r1, [r2, #0]
 8002868:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	3318      	adds	r3, #24
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	440b      	add	r3, r1
 8002874:	3304      	adds	r3, #4
 8002876:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3307      	adds	r3, #7
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	061a      	lsls	r2, r3, #24
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3306      	adds	r3, #6
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	041b      	lsls	r3, r3, #16
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	3305      	adds	r3, #5
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	021b      	lsls	r3, r3, #8
 8002892:	4313      	orrs	r3, r2
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	3204      	adds	r2, #4
 8002898:	7812      	ldrb	r2, [r2, #0]
 800289a:	4610      	mov	r0, r2
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	6811      	ldr	r1, [r2, #0]
 80028a0:	ea43 0200 	orr.w	r2, r3, r0
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	440b      	add	r3, r1
 80028aa:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80028ae:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3303      	adds	r3, #3
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	061a      	lsls	r2, r3, #24
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3302      	adds	r3, #2
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	041b      	lsls	r3, r3, #16
 80028c0:	431a      	orrs	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3301      	adds	r3, #1
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	021b      	lsls	r3, r3, #8
 80028ca:	4313      	orrs	r3, r2
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	7812      	ldrb	r2, [r2, #0]
 80028d0:	4610      	mov	r0, r2
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	6811      	ldr	r1, [r2, #0]
 80028d6:	ea43 0200 	orr.w	r2, r3, r0
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	011b      	lsls	r3, r3, #4
 80028de:	440b      	add	r3, r1
 80028e0:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80028e4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	3318      	adds	r3, #24
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	4413      	add	r3, r2
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	6811      	ldr	r1, [r2, #0]
 80028f8:	f043 0201 	orr.w	r2, r3, #1
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	3318      	adds	r3, #24
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	440b      	add	r3, r1
 8002904:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	e00e      	b.n	8002928 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e006      	b.n	8002928 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
  }
}
 8002928:	4618      	mov	r0, r3
 800292a:	3724      	adds	r7, #36	@ 0x24
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
 8002940:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002948:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800294a:	7dfb      	ldrb	r3, [r7, #23]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d003      	beq.n	8002958 <HAL_CAN_GetRxMessage+0x24>
 8002950:	7dfb      	ldrb	r3, [r7, #23]
 8002952:	2b02      	cmp	r3, #2
 8002954:	f040 8103 	bne.w	8002b5e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10e      	bne.n	800297c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f003 0303 	and.w	r3, r3, #3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d116      	bne.n	800299a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002970:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e0f7      	b.n	8002b6c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d107      	bne.n	800299a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e0e8      	b.n	8002b6c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	331b      	adds	r3, #27
 80029a2:	011b      	lsls	r3, r3, #4
 80029a4:	4413      	add	r3, r2
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0204 	and.w	r2, r3, #4
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10c      	bne.n	80029d2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	331b      	adds	r3, #27
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	4413      	add	r3, r2
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	0d5b      	lsrs	r3, r3, #21
 80029c8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	e00b      	b.n	80029ea <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	331b      	adds	r3, #27
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	4413      	add	r3, r2
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	08db      	lsrs	r3, r3, #3
 80029e2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	331b      	adds	r3, #27
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	4413      	add	r3, r2
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0202 	and.w	r2, r3, #2
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	331b      	adds	r3, #27
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0308 	and.w	r3, r3, #8
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2208      	movs	r2, #8
 8002a1c:	611a      	str	r2, [r3, #16]
 8002a1e:	e00b      	b.n	8002a38 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	331b      	adds	r3, #27
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 020f 	and.w	r2, r3, #15
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	331b      	adds	r3, #27
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	4413      	add	r3, r2
 8002a44:	3304      	adds	r3, #4
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	0a1b      	lsrs	r3, r3, #8
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	331b      	adds	r3, #27
 8002a58:	011b      	lsls	r3, r3, #4
 8002a5a:	4413      	add	r3, r2
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	0c1b      	lsrs	r3, r3, #16
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	4413      	add	r3, r2
 8002a72:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	011b      	lsls	r3, r3, #4
 8002a86:	4413      	add	r3, r2
 8002a88:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	0a1a      	lsrs	r2, r3, #8
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	3301      	adds	r3, #1
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	0c1a      	lsrs	r2, r3, #16
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	3302      	adds	r3, #2
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	011b      	lsls	r3, r3, #4
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	0e1a      	lsrs	r2, r3, #24
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	3303      	adds	r3, #3
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	3304      	adds	r3, #4
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	4413      	add	r3, r2
 8002aee:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	0a1a      	lsrs	r2, r3, #8
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	3305      	adds	r3, #5
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	0c1a      	lsrs	r2, r3, #16
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	3306      	adds	r3, #6
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	4413      	add	r3, r2
 8002b22:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	0e1a      	lsrs	r2, r3, #24
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	3307      	adds	r3, #7
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d108      	bne.n	8002b4a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0220 	orr.w	r2, r2, #32
 8002b46:	60da      	str	r2, [r3, #12]
 8002b48:	e007      	b.n	8002b5a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	691a      	ldr	r2, [r3, #16]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f042 0220 	orr.w	r2, r2, #32
 8002b58:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	e006      	b.n	8002b6c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b62:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
  }
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	371c      	adds	r7, #28
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b88:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b8a:	7bfb      	ldrb	r3, [r7, #15]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d002      	beq.n	8002b96 <HAL_CAN_ActivateNotification+0x1e>
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d109      	bne.n	8002baa <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6959      	ldr	r1, [r3, #20]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	e006      	b.n	8002bb8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bae:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
  }
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08a      	sub	sp, #40	@ 0x28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d07c      	beq.n	8002d04 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d023      	beq.n	8002c5c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f983 	bl	8002f32 <HAL_CAN_TxMailbox0CompleteCallback>
 8002c2c:	e016      	b.n	8002c5c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d004      	beq.n	8002c42 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c40:	e00c      	b.n	8002c5c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	f003 0308 	and.w	r3, r3, #8
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d004      	beq.n	8002c56 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c52:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c54:	e002      	b.n	8002c5c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f989 	bl	8002f6e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d024      	beq.n	8002cb0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c6e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f963 	bl	8002f46 <HAL_CAN_TxMailbox1CompleteCallback>
 8002c80:	e016      	b.n	8002cb0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d004      	beq.n	8002c96 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c92:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c94:	e00c      	b.n	8002cb0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d004      	beq.n	8002caa <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ca6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ca8:	e002      	b.n	8002cb0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f969 	bl	8002f82 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d024      	beq.n	8002d04 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002cc2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f943 	bl	8002f5a <HAL_CAN_TxMailbox2CompleteCallback>
 8002cd4:	e016      	b.n	8002d04 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d004      	beq.n	8002cea <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ce6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ce8:	e00c      	b.n	8002d04 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d004      	beq.n	8002cfe <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cfc:	e002      	b.n	8002d04 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f949 	bl	8002f96 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00c      	beq.n	8002d28 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d007      	beq.n	8002d28 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d1e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2210      	movs	r2, #16
 8002d26:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00b      	beq.n	8002d4a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f003 0308 	and.w	r3, r3, #8
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d006      	beq.n	8002d4a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2208      	movs	r2, #8
 8002d42:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f930 	bl	8002faa <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d009      	beq.n	8002d68 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d002      	beq.n	8002d68 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7fe fade 	bl	8001324 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00c      	beq.n	8002d8c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	f003 0310 	and.w	r3, r3, #16
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d007      	beq.n	8002d8c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d82:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2210      	movs	r2, #16
 8002d8a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	f003 0320 	and.w	r3, r3, #32
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00b      	beq.n	8002dae <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d006      	beq.n	8002dae <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2208      	movs	r2, #8
 8002da6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 f912 	bl	8002fd2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	f003 0310 	and.w	r3, r3, #16
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d009      	beq.n	8002dcc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d002      	beq.n	8002dcc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f8f9 	bl	8002fbe <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00b      	beq.n	8002dee <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	f003 0310 	and.w	r3, r3, #16
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d006      	beq.n	8002dee <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2210      	movs	r2, #16
 8002de6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f8fc 	bl	8002fe6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00b      	beq.n	8002e10 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d006      	beq.n	8002e10 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2208      	movs	r2, #8
 8002e08:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f8f5 	bl	8002ffa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002e10:	6a3b      	ldr	r3, [r7, #32]
 8002e12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d07b      	beq.n	8002f12 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d072      	beq.n	8002f0a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d008      	beq.n	8002e40 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d008      	beq.n	8002e5c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e56:	f043 0302 	orr.w	r3, r3, #2
 8002e5a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d008      	beq.n	8002e78 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e72:	f043 0304 	orr.w	r3, r3, #4
 8002e76:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d043      	beq.n	8002f0a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d03e      	beq.n	8002f0a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e92:	2b60      	cmp	r3, #96	@ 0x60
 8002e94:	d02b      	beq.n	8002eee <HAL_CAN_IRQHandler+0x32a>
 8002e96:	2b60      	cmp	r3, #96	@ 0x60
 8002e98:	d82e      	bhi.n	8002ef8 <HAL_CAN_IRQHandler+0x334>
 8002e9a:	2b50      	cmp	r3, #80	@ 0x50
 8002e9c:	d022      	beq.n	8002ee4 <HAL_CAN_IRQHandler+0x320>
 8002e9e:	2b50      	cmp	r3, #80	@ 0x50
 8002ea0:	d82a      	bhi.n	8002ef8 <HAL_CAN_IRQHandler+0x334>
 8002ea2:	2b40      	cmp	r3, #64	@ 0x40
 8002ea4:	d019      	beq.n	8002eda <HAL_CAN_IRQHandler+0x316>
 8002ea6:	2b40      	cmp	r3, #64	@ 0x40
 8002ea8:	d826      	bhi.n	8002ef8 <HAL_CAN_IRQHandler+0x334>
 8002eaa:	2b30      	cmp	r3, #48	@ 0x30
 8002eac:	d010      	beq.n	8002ed0 <HAL_CAN_IRQHandler+0x30c>
 8002eae:	2b30      	cmp	r3, #48	@ 0x30
 8002eb0:	d822      	bhi.n	8002ef8 <HAL_CAN_IRQHandler+0x334>
 8002eb2:	2b10      	cmp	r3, #16
 8002eb4:	d002      	beq.n	8002ebc <HAL_CAN_IRQHandler+0x2f8>
 8002eb6:	2b20      	cmp	r3, #32
 8002eb8:	d005      	beq.n	8002ec6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002eba:	e01d      	b.n	8002ef8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebe:	f043 0308 	orr.w	r3, r3, #8
 8002ec2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ec4:	e019      	b.n	8002efa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec8:	f043 0310 	orr.w	r3, r3, #16
 8002ecc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ece:	e014      	b.n	8002efa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed2:	f043 0320 	orr.w	r3, r3, #32
 8002ed6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ed8:	e00f      	b.n	8002efa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002edc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ee0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ee2:	e00a      	b.n	8002efa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002eea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002eec:	e005      	b.n	8002efa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ef4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ef6:	e000      	b.n	8002efa <HAL_CAN_IRQHandler+0x336>
            break;
 8002ef8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699a      	ldr	r2, [r3, #24]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002f08:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2204      	movs	r2, #4
 8002f10:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 f872 	bl	800300e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002f2a:	bf00      	nop
 8002f2c:	3728      	adds	r7, #40	@ 0x28
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
	...

08003024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003034:	4b0c      	ldr	r3, [pc, #48]	@ (8003068 <__NVIC_SetPriorityGrouping+0x44>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003040:	4013      	ands	r3, r2
 8003042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800304c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003050:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003056:	4a04      	ldr	r2, [pc, #16]	@ (8003068 <__NVIC_SetPriorityGrouping+0x44>)
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	60d3      	str	r3, [r2, #12]
}
 800305c:	bf00      	nop
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	e000ed00 	.word	0xe000ed00

0800306c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003070:	4b04      	ldr	r3, [pc, #16]	@ (8003084 <__NVIC_GetPriorityGrouping+0x18>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	0a1b      	lsrs	r3, r3, #8
 8003076:	f003 0307 	and.w	r3, r3, #7
}
 800307a:	4618      	mov	r0, r3
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	e000ed00 	.word	0xe000ed00

08003088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003096:	2b00      	cmp	r3, #0
 8003098:	db0b      	blt.n	80030b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800309a:	79fb      	ldrb	r3, [r7, #7]
 800309c:	f003 021f 	and.w	r2, r3, #31
 80030a0:	4907      	ldr	r1, [pc, #28]	@ (80030c0 <__NVIC_EnableIRQ+0x38>)
 80030a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a6:	095b      	lsrs	r3, r3, #5
 80030a8:	2001      	movs	r0, #1
 80030aa:	fa00 f202 	lsl.w	r2, r0, r2
 80030ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	e000e100 	.word	0xe000e100

080030c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4603      	mov	r3, r0
 80030cc:	6039      	str	r1, [r7, #0]
 80030ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	db0a      	blt.n	80030ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	490c      	ldr	r1, [pc, #48]	@ (8003110 <__NVIC_SetPriority+0x4c>)
 80030de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e2:	0112      	lsls	r2, r2, #4
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	440b      	add	r3, r1
 80030e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030ec:	e00a      	b.n	8003104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	4908      	ldr	r1, [pc, #32]	@ (8003114 <__NVIC_SetPriority+0x50>)
 80030f4:	79fb      	ldrb	r3, [r7, #7]
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	3b04      	subs	r3, #4
 80030fc:	0112      	lsls	r2, r2, #4
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	440b      	add	r3, r1
 8003102:	761a      	strb	r2, [r3, #24]
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	e000e100 	.word	0xe000e100
 8003114:	e000ed00 	.word	0xe000ed00

08003118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003118:	b480      	push	{r7}
 800311a:	b089      	sub	sp, #36	@ 0x24
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	f1c3 0307 	rsb	r3, r3, #7
 8003132:	2b04      	cmp	r3, #4
 8003134:	bf28      	it	cs
 8003136:	2304      	movcs	r3, #4
 8003138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	3304      	adds	r3, #4
 800313e:	2b06      	cmp	r3, #6
 8003140:	d902      	bls.n	8003148 <NVIC_EncodePriority+0x30>
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3b03      	subs	r3, #3
 8003146:	e000      	b.n	800314a <NVIC_EncodePriority+0x32>
 8003148:	2300      	movs	r3, #0
 800314a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800314c:	f04f 32ff 	mov.w	r2, #4294967295
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	43da      	mvns	r2, r3
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	401a      	ands	r2, r3
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003160:	f04f 31ff 	mov.w	r1, #4294967295
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	fa01 f303 	lsl.w	r3, r1, r3
 800316a:	43d9      	mvns	r1, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003170:	4313      	orrs	r3, r2
         );
}
 8003172:	4618      	mov	r0, r3
 8003174:	3724      	adds	r7, #36	@ 0x24
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
	...

08003180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3b01      	subs	r3, #1
 800318c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003190:	d301      	bcc.n	8003196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003192:	2301      	movs	r3, #1
 8003194:	e00f      	b.n	80031b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003196:	4a0a      	ldr	r2, [pc, #40]	@ (80031c0 <SysTick_Config+0x40>)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3b01      	subs	r3, #1
 800319c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800319e:	210f      	movs	r1, #15
 80031a0:	f04f 30ff 	mov.w	r0, #4294967295
 80031a4:	f7ff ff8e 	bl	80030c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031a8:	4b05      	ldr	r3, [pc, #20]	@ (80031c0 <SysTick_Config+0x40>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031ae:	4b04      	ldr	r3, [pc, #16]	@ (80031c0 <SysTick_Config+0x40>)
 80031b0:	2207      	movs	r2, #7
 80031b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	e000e010 	.word	0xe000e010

080031c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f7ff ff29 	bl	8003024 <__NVIC_SetPriorityGrouping>
}
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031da:	b580      	push	{r7, lr}
 80031dc:	b086      	sub	sp, #24
 80031de:	af00      	add	r7, sp, #0
 80031e0:	4603      	mov	r3, r0
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	607a      	str	r2, [r7, #4]
 80031e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031ec:	f7ff ff3e 	bl	800306c <__NVIC_GetPriorityGrouping>
 80031f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	68b9      	ldr	r1, [r7, #8]
 80031f6:	6978      	ldr	r0, [r7, #20]
 80031f8:	f7ff ff8e 	bl	8003118 <NVIC_EncodePriority>
 80031fc:	4602      	mov	r2, r0
 80031fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003202:	4611      	mov	r1, r2
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff ff5d 	bl	80030c4 <__NVIC_SetPriority>
}
 800320a:	bf00      	nop
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b082      	sub	sp, #8
 8003216:	af00      	add	r7, sp, #0
 8003218:	4603      	mov	r3, r0
 800321a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800321c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff ff31 	bl	8003088 <__NVIC_EnableIRQ>
}
 8003226:	bf00      	nop
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b082      	sub	sp, #8
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7ff ffa2 	bl	8003180 <SysTick_Config>
 800323c:	4603      	mov	r3, r0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b084      	sub	sp, #16
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003252:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003254:	f7ff f84e 	bl	80022f4 <HAL_GetTick>
 8003258:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d008      	beq.n	8003278 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2280      	movs	r2, #128	@ 0x80
 800326a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e052      	b.n	800331e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0216 	bic.w	r2, r2, #22
 8003286:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695a      	ldr	r2, [r3, #20]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003296:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329c:	2b00      	cmp	r3, #0
 800329e:	d103      	bne.n	80032a8 <HAL_DMA_Abort+0x62>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d007      	beq.n	80032b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0208 	bic.w	r2, r2, #8
 80032b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0201 	bic.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032c8:	e013      	b.n	80032f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032ca:	f7ff f813 	bl	80022f4 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b05      	cmp	r3, #5
 80032d6:	d90c      	bls.n	80032f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2220      	movs	r2, #32
 80032dc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2203      	movs	r2, #3
 80032e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e015      	b.n	800331e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1e4      	bne.n	80032ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003304:	223f      	movs	r2, #63	@ 0x3f
 8003306:	409a      	lsls	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003326:	b480      	push	{r7}
 8003328:	b083      	sub	sp, #12
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d004      	beq.n	8003344 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2280      	movs	r2, #128	@ 0x80
 800333e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e00c      	b.n	800335e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2205      	movs	r2, #5
 8003348:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0201 	bic.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
	...

0800336c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800336c:	b480      	push	{r7}
 800336e:	b089      	sub	sp, #36	@ 0x24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800337a:	2300      	movs	r3, #0
 800337c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800337e:	2300      	movs	r3, #0
 8003380:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003382:	2300      	movs	r3, #0
 8003384:	61fb      	str	r3, [r7, #28]
 8003386:	e16b      	b.n	8003660 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003388:	2201      	movs	r2, #1
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	4013      	ands	r3, r2
 800339a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	f040 815a 	bne.w	800365a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d005      	beq.n	80033be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d130      	bne.n	8003420 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	2203      	movs	r2, #3
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43db      	mvns	r3, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4013      	ands	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033f4:	2201      	movs	r2, #1
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	43db      	mvns	r3, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4013      	ands	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	091b      	lsrs	r3, r3, #4
 800340a:	f003 0201 	and.w	r2, r3, #1
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4313      	orrs	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 0303 	and.w	r3, r3, #3
 8003428:	2b03      	cmp	r3, #3
 800342a:	d017      	beq.n	800345c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	2203      	movs	r2, #3
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	4013      	ands	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4313      	orrs	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 0303 	and.w	r3, r3, #3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d123      	bne.n	80034b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	08da      	lsrs	r2, r3, #3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3208      	adds	r2, #8
 8003470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003474:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	220f      	movs	r2, #15
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	43db      	mvns	r3, r3
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4013      	ands	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4313      	orrs	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	08da      	lsrs	r2, r3, #3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	3208      	adds	r2, #8
 80034aa:	69b9      	ldr	r1, [r7, #24]
 80034ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	2203      	movs	r2, #3
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43db      	mvns	r3, r3
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4013      	ands	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 0203 	and.w	r2, r3, #3
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4313      	orrs	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 80b4 	beq.w	800365a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034f2:	2300      	movs	r3, #0
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	4b60      	ldr	r3, [pc, #384]	@ (8003678 <HAL_GPIO_Init+0x30c>)
 80034f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034fa:	4a5f      	ldr	r2, [pc, #380]	@ (8003678 <HAL_GPIO_Init+0x30c>)
 80034fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003500:	6453      	str	r3, [r2, #68]	@ 0x44
 8003502:	4b5d      	ldr	r3, [pc, #372]	@ (8003678 <HAL_GPIO_Init+0x30c>)
 8003504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003506:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800350e:	4a5b      	ldr	r2, [pc, #364]	@ (800367c <HAL_GPIO_Init+0x310>)
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	089b      	lsrs	r3, r3, #2
 8003514:	3302      	adds	r3, #2
 8003516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800351a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	220f      	movs	r2, #15
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	43db      	mvns	r3, r3
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4013      	ands	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a52      	ldr	r2, [pc, #328]	@ (8003680 <HAL_GPIO_Init+0x314>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d02b      	beq.n	8003592 <HAL_GPIO_Init+0x226>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a51      	ldr	r2, [pc, #324]	@ (8003684 <HAL_GPIO_Init+0x318>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d025      	beq.n	800358e <HAL_GPIO_Init+0x222>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a50      	ldr	r2, [pc, #320]	@ (8003688 <HAL_GPIO_Init+0x31c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d01f      	beq.n	800358a <HAL_GPIO_Init+0x21e>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a4f      	ldr	r2, [pc, #316]	@ (800368c <HAL_GPIO_Init+0x320>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d019      	beq.n	8003586 <HAL_GPIO_Init+0x21a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a4e      	ldr	r2, [pc, #312]	@ (8003690 <HAL_GPIO_Init+0x324>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d013      	beq.n	8003582 <HAL_GPIO_Init+0x216>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a4d      	ldr	r2, [pc, #308]	@ (8003694 <HAL_GPIO_Init+0x328>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d00d      	beq.n	800357e <HAL_GPIO_Init+0x212>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a4c      	ldr	r2, [pc, #304]	@ (8003698 <HAL_GPIO_Init+0x32c>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d007      	beq.n	800357a <HAL_GPIO_Init+0x20e>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a4b      	ldr	r2, [pc, #300]	@ (800369c <HAL_GPIO_Init+0x330>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d101      	bne.n	8003576 <HAL_GPIO_Init+0x20a>
 8003572:	2307      	movs	r3, #7
 8003574:	e00e      	b.n	8003594 <HAL_GPIO_Init+0x228>
 8003576:	2308      	movs	r3, #8
 8003578:	e00c      	b.n	8003594 <HAL_GPIO_Init+0x228>
 800357a:	2306      	movs	r3, #6
 800357c:	e00a      	b.n	8003594 <HAL_GPIO_Init+0x228>
 800357e:	2305      	movs	r3, #5
 8003580:	e008      	b.n	8003594 <HAL_GPIO_Init+0x228>
 8003582:	2304      	movs	r3, #4
 8003584:	e006      	b.n	8003594 <HAL_GPIO_Init+0x228>
 8003586:	2303      	movs	r3, #3
 8003588:	e004      	b.n	8003594 <HAL_GPIO_Init+0x228>
 800358a:	2302      	movs	r3, #2
 800358c:	e002      	b.n	8003594 <HAL_GPIO_Init+0x228>
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <HAL_GPIO_Init+0x228>
 8003592:	2300      	movs	r3, #0
 8003594:	69fa      	ldr	r2, [r7, #28]
 8003596:	f002 0203 	and.w	r2, r2, #3
 800359a:	0092      	lsls	r2, r2, #2
 800359c:	4093      	lsls	r3, r2
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035a4:	4935      	ldr	r1, [pc, #212]	@ (800367c <HAL_GPIO_Init+0x310>)
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	089b      	lsrs	r3, r3, #2
 80035aa:	3302      	adds	r3, #2
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035b2:	4b3b      	ldr	r3, [pc, #236]	@ (80036a0 <HAL_GPIO_Init+0x334>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	43db      	mvns	r3, r3
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	4013      	ands	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035d6:	4a32      	ldr	r2, [pc, #200]	@ (80036a0 <HAL_GPIO_Init+0x334>)
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035dc:	4b30      	ldr	r3, [pc, #192]	@ (80036a0 <HAL_GPIO_Init+0x334>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	43db      	mvns	r3, r3
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	4013      	ands	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003600:	4a27      	ldr	r2, [pc, #156]	@ (80036a0 <HAL_GPIO_Init+0x334>)
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003606:	4b26      	ldr	r3, [pc, #152]	@ (80036a0 <HAL_GPIO_Init+0x334>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	43db      	mvns	r3, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4013      	ands	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800362a:	4a1d      	ldr	r2, [pc, #116]	@ (80036a0 <HAL_GPIO_Init+0x334>)
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003630:	4b1b      	ldr	r3, [pc, #108]	@ (80036a0 <HAL_GPIO_Init+0x334>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	43db      	mvns	r3, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4013      	ands	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003654:	4a12      	ldr	r2, [pc, #72]	@ (80036a0 <HAL_GPIO_Init+0x334>)
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	3301      	adds	r3, #1
 800365e:	61fb      	str	r3, [r7, #28]
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	2b0f      	cmp	r3, #15
 8003664:	f67f ae90 	bls.w	8003388 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003668:	bf00      	nop
 800366a:	bf00      	nop
 800366c:	3724      	adds	r7, #36	@ 0x24
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40023800 	.word	0x40023800
 800367c:	40013800 	.word	0x40013800
 8003680:	40020000 	.word	0x40020000
 8003684:	40020400 	.word	0x40020400
 8003688:	40020800 	.word	0x40020800
 800368c:	40020c00 	.word	0x40020c00
 8003690:	40021000 	.word	0x40021000
 8003694:	40021400 	.word	0x40021400
 8003698:	40021800 	.word	0x40021800
 800369c:	40021c00 	.word	0x40021c00
 80036a0:	40013c00 	.word	0x40013c00

080036a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	887b      	ldrh	r3, [r7, #2]
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d002      	beq.n	80036c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036bc:	2301      	movs	r3, #1
 80036be:	73fb      	strb	r3, [r7, #15]
 80036c0:	e001      	b.n	80036c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036c2:	2300      	movs	r3, #0
 80036c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	4603      	mov	r3, r0
 80036dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80036de:	4b08      	ldr	r3, [pc, #32]	@ (8003700 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036e0:	695a      	ldr	r2, [r3, #20]
 80036e2:	88fb      	ldrh	r3, [r7, #6]
 80036e4:	4013      	ands	r3, r2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d006      	beq.n	80036f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036ea:	4a05      	ldr	r2, [pc, #20]	@ (8003700 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036ec:	88fb      	ldrh	r3, [r7, #6]
 80036ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036f0:	88fb      	ldrh	r3, [r7, #6]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fe fa20 	bl	8001b38 <HAL_GPIO_EXTI_Callback>
  }
}
 80036f8:	bf00      	nop
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40013c00 	.word	0x40013c00

08003704 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e267      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d075      	beq.n	800380e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003722:	4b88      	ldr	r3, [pc, #544]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 030c 	and.w	r3, r3, #12
 800372a:	2b04      	cmp	r3, #4
 800372c:	d00c      	beq.n	8003748 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800372e:	4b85      	ldr	r3, [pc, #532]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003736:	2b08      	cmp	r3, #8
 8003738:	d112      	bne.n	8003760 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800373a:	4b82      	ldr	r3, [pc, #520]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003742:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003746:	d10b      	bne.n	8003760 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003748:	4b7e      	ldr	r3, [pc, #504]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d05b      	beq.n	800380c <HAL_RCC_OscConfig+0x108>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d157      	bne.n	800380c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e242      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003768:	d106      	bne.n	8003778 <HAL_RCC_OscConfig+0x74>
 800376a:	4b76      	ldr	r3, [pc, #472]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a75      	ldr	r2, [pc, #468]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 8003770:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	e01d      	b.n	80037b4 <HAL_RCC_OscConfig+0xb0>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003780:	d10c      	bne.n	800379c <HAL_RCC_OscConfig+0x98>
 8003782:	4b70      	ldr	r3, [pc, #448]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a6f      	ldr	r2, [pc, #444]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 8003788:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	4b6d      	ldr	r3, [pc, #436]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a6c      	ldr	r2, [pc, #432]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 8003794:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	e00b      	b.n	80037b4 <HAL_RCC_OscConfig+0xb0>
 800379c:	4b69      	ldr	r3, [pc, #420]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a68      	ldr	r2, [pc, #416]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 80037a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037a6:	6013      	str	r3, [r2, #0]
 80037a8:	4b66      	ldr	r3, [pc, #408]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a65      	ldr	r2, [pc, #404]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 80037ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d013      	beq.n	80037e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037bc:	f7fe fd9a 	bl	80022f4 <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037c4:	f7fe fd96 	bl	80022f4 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b64      	cmp	r3, #100	@ 0x64
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e207      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d6:	4b5b      	ldr	r3, [pc, #364]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0f0      	beq.n	80037c4 <HAL_RCC_OscConfig+0xc0>
 80037e2:	e014      	b.n	800380e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e4:	f7fe fd86 	bl	80022f4 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ec:	f7fe fd82 	bl	80022f4 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b64      	cmp	r3, #100	@ 0x64
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e1f3      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037fe:	4b51      	ldr	r3, [pc, #324]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f0      	bne.n	80037ec <HAL_RCC_OscConfig+0xe8>
 800380a:	e000      	b.n	800380e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800380c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d063      	beq.n	80038e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800381a:	4b4a      	ldr	r3, [pc, #296]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 030c 	and.w	r3, r3, #12
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00b      	beq.n	800383e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003826:	4b47      	ldr	r3, [pc, #284]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800382e:	2b08      	cmp	r3, #8
 8003830:	d11c      	bne.n	800386c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003832:	4b44      	ldr	r3, [pc, #272]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d116      	bne.n	800386c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800383e:	4b41      	ldr	r3, [pc, #260]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d005      	beq.n	8003856 <HAL_RCC_OscConfig+0x152>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d001      	beq.n	8003856 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e1c7      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003856:	4b3b      	ldr	r3, [pc, #236]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	4937      	ldr	r1, [pc, #220]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 8003866:	4313      	orrs	r3, r2
 8003868:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800386a:	e03a      	b.n	80038e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d020      	beq.n	80038b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003874:	4b34      	ldr	r3, [pc, #208]	@ (8003948 <HAL_RCC_OscConfig+0x244>)
 8003876:	2201      	movs	r2, #1
 8003878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387a:	f7fe fd3b 	bl	80022f4 <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003882:	f7fe fd37 	bl	80022f4 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e1a8      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003894:	4b2b      	ldr	r3, [pc, #172]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0f0      	beq.n	8003882 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a0:	4b28      	ldr	r3, [pc, #160]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	4925      	ldr	r1, [pc, #148]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	600b      	str	r3, [r1, #0]
 80038b4:	e015      	b.n	80038e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038b6:	4b24      	ldr	r3, [pc, #144]	@ (8003948 <HAL_RCC_OscConfig+0x244>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038bc:	f7fe fd1a 	bl	80022f4 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038c4:	f7fe fd16 	bl	80022f4 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e187      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f0      	bne.n	80038c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d036      	beq.n	800395c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d016      	beq.n	8003924 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038f6:	4b15      	ldr	r3, [pc, #84]	@ (800394c <HAL_RCC_OscConfig+0x248>)
 80038f8:	2201      	movs	r2, #1
 80038fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fc:	f7fe fcfa 	bl	80022f4 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003904:	f7fe fcf6 	bl	80022f4 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e167      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003916:	4b0b      	ldr	r3, [pc, #44]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 8003918:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f0      	beq.n	8003904 <HAL_RCC_OscConfig+0x200>
 8003922:	e01b      	b.n	800395c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003924:	4b09      	ldr	r3, [pc, #36]	@ (800394c <HAL_RCC_OscConfig+0x248>)
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800392a:	f7fe fce3 	bl	80022f4 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003930:	e00e      	b.n	8003950 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003932:	f7fe fcdf 	bl	80022f4 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d907      	bls.n	8003950 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e150      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
 8003944:	40023800 	.word	0x40023800
 8003948:	42470000 	.word	0x42470000
 800394c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003950:	4b88      	ldr	r3, [pc, #544]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003952:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1ea      	bne.n	8003932 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 8097 	beq.w	8003a98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800396a:	2300      	movs	r3, #0
 800396c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800396e:	4b81      	ldr	r3, [pc, #516]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10f      	bne.n	800399a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800397a:	2300      	movs	r3, #0
 800397c:	60bb      	str	r3, [r7, #8]
 800397e:	4b7d      	ldr	r3, [pc, #500]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003982:	4a7c      	ldr	r2, [pc, #496]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003988:	6413      	str	r3, [r2, #64]	@ 0x40
 800398a:	4b7a      	ldr	r3, [pc, #488]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003992:	60bb      	str	r3, [r7, #8]
 8003994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003996:	2301      	movs	r3, #1
 8003998:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800399a:	4b77      	ldr	r3, [pc, #476]	@ (8003b78 <HAL_RCC_OscConfig+0x474>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d118      	bne.n	80039d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039a6:	4b74      	ldr	r3, [pc, #464]	@ (8003b78 <HAL_RCC_OscConfig+0x474>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a73      	ldr	r2, [pc, #460]	@ (8003b78 <HAL_RCC_OscConfig+0x474>)
 80039ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039b2:	f7fe fc9f 	bl	80022f4 <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ba:	f7fe fc9b 	bl	80022f4 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e10c      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039cc:	4b6a      	ldr	r3, [pc, #424]	@ (8003b78 <HAL_RCC_OscConfig+0x474>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0f0      	beq.n	80039ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d106      	bne.n	80039ee <HAL_RCC_OscConfig+0x2ea>
 80039e0:	4b64      	ldr	r3, [pc, #400]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 80039e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039e4:	4a63      	ldr	r2, [pc, #396]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 80039e6:	f043 0301 	orr.w	r3, r3, #1
 80039ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80039ec:	e01c      	b.n	8003a28 <HAL_RCC_OscConfig+0x324>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2b05      	cmp	r3, #5
 80039f4:	d10c      	bne.n	8003a10 <HAL_RCC_OscConfig+0x30c>
 80039f6:	4b5f      	ldr	r3, [pc, #380]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 80039f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039fa:	4a5e      	ldr	r2, [pc, #376]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 80039fc:	f043 0304 	orr.w	r3, r3, #4
 8003a00:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a02:	4b5c      	ldr	r3, [pc, #368]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a06:	4a5b      	ldr	r2, [pc, #364]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a08:	f043 0301 	orr.w	r3, r3, #1
 8003a0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a0e:	e00b      	b.n	8003a28 <HAL_RCC_OscConfig+0x324>
 8003a10:	4b58      	ldr	r3, [pc, #352]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a14:	4a57      	ldr	r2, [pc, #348]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a16:	f023 0301 	bic.w	r3, r3, #1
 8003a1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a1c:	4b55      	ldr	r3, [pc, #340]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a20:	4a54      	ldr	r2, [pc, #336]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a22:	f023 0304 	bic.w	r3, r3, #4
 8003a26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d015      	beq.n	8003a5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a30:	f7fe fc60 	bl	80022f4 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a36:	e00a      	b.n	8003a4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a38:	f7fe fc5c 	bl	80022f4 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e0cb      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a4e:	4b49      	ldr	r3, [pc, #292]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0ee      	beq.n	8003a38 <HAL_RCC_OscConfig+0x334>
 8003a5a:	e014      	b.n	8003a86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a5c:	f7fe fc4a 	bl	80022f4 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a62:	e00a      	b.n	8003a7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a64:	f7fe fc46 	bl	80022f4 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e0b5      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a7a:	4b3e      	ldr	r3, [pc, #248]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1ee      	bne.n	8003a64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a86:	7dfb      	ldrb	r3, [r7, #23]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d105      	bne.n	8003a98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a8c:	4b39      	ldr	r3, [pc, #228]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a90:	4a38      	ldr	r2, [pc, #224]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a96:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 80a1 	beq.w	8003be4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aa2:	4b34      	ldr	r3, [pc, #208]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 030c 	and.w	r3, r3, #12
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d05c      	beq.n	8003b68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d141      	bne.n	8003b3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab6:	4b31      	ldr	r3, [pc, #196]	@ (8003b7c <HAL_RCC_OscConfig+0x478>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003abc:	f7fe fc1a 	bl	80022f4 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac4:	f7fe fc16 	bl	80022f4 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e087      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad6:	4b27      	ldr	r3, [pc, #156]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1f0      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69da      	ldr	r2, [r3, #28]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af0:	019b      	lsls	r3, r3, #6
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af8:	085b      	lsrs	r3, r3, #1
 8003afa:	3b01      	subs	r3, #1
 8003afc:	041b      	lsls	r3, r3, #16
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b04:	061b      	lsls	r3, r3, #24
 8003b06:	491b      	ldr	r1, [pc, #108]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8003b7c <HAL_RCC_OscConfig+0x478>)
 8003b0e:	2201      	movs	r2, #1
 8003b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b12:	f7fe fbef 	bl	80022f4 <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b1a:	f7fe fbeb 	bl	80022f4 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e05c      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2c:	4b11      	ldr	r3, [pc, #68]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0f0      	beq.n	8003b1a <HAL_RCC_OscConfig+0x416>
 8003b38:	e054      	b.n	8003be4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b3a:	4b10      	ldr	r3, [pc, #64]	@ (8003b7c <HAL_RCC_OscConfig+0x478>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b40:	f7fe fbd8 	bl	80022f4 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b48:	f7fe fbd4 	bl	80022f4 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e045      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b5a:	4b06      	ldr	r3, [pc, #24]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1f0      	bne.n	8003b48 <HAL_RCC_OscConfig+0x444>
 8003b66:	e03d      	b.n	8003be4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d107      	bne.n	8003b80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e038      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
 8003b74:	40023800 	.word	0x40023800
 8003b78:	40007000 	.word	0x40007000
 8003b7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b80:	4b1b      	ldr	r3, [pc, #108]	@ (8003bf0 <HAL_RCC_OscConfig+0x4ec>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d028      	beq.n	8003be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d121      	bne.n	8003be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d11a      	bne.n	8003be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003bb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d111      	bne.n	8003be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc6:	085b      	lsrs	r3, r3, #1
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d107      	bne.n	8003be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d001      	beq.n	8003be4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3718      	adds	r7, #24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40023800 	.word	0x40023800

08003bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e0cc      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c08:	4b68      	ldr	r3, [pc, #416]	@ (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d90c      	bls.n	8003c30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c16:	4b65      	ldr	r3, [pc, #404]	@ (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	b2d2      	uxtb	r2, r2
 8003c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c1e:	4b63      	ldr	r3, [pc, #396]	@ (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d001      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e0b8      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d020      	beq.n	8003c7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c48:	4b59      	ldr	r3, [pc, #356]	@ (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	4a58      	ldr	r2, [pc, #352]	@ (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0308 	and.w	r3, r3, #8
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d005      	beq.n	8003c6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c60:	4b53      	ldr	r3, [pc, #332]	@ (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	4a52      	ldr	r2, [pc, #328]	@ (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c66:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c6c:	4b50      	ldr	r3, [pc, #320]	@ (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	494d      	ldr	r1, [pc, #308]	@ (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d044      	beq.n	8003d14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d107      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c92:	4b47      	ldr	r3, [pc, #284]	@ (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d119      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e07f      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d003      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cae:	2b03      	cmp	r3, #3
 8003cb0:	d107      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cb2:	4b3f      	ldr	r3, [pc, #252]	@ (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d109      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e06f      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc2:	4b3b      	ldr	r3, [pc, #236]	@ (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e067      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cd2:	4b37      	ldr	r3, [pc, #220]	@ (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f023 0203 	bic.w	r2, r3, #3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	4934      	ldr	r1, [pc, #208]	@ (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ce4:	f7fe fb06 	bl	80022f4 <HAL_GetTick>
 8003ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cea:	e00a      	b.n	8003d02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cec:	f7fe fb02 	bl	80022f4 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e04f      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d02:	4b2b      	ldr	r3, [pc, #172]	@ (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 020c 	and.w	r2, r3, #12
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d1eb      	bne.n	8003cec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d14:	4b25      	ldr	r3, [pc, #148]	@ (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d20c      	bcs.n	8003d3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d22:	4b22      	ldr	r3, [pc, #136]	@ (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d2a:	4b20      	ldr	r3, [pc, #128]	@ (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d001      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e032      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d48:	4b19      	ldr	r3, [pc, #100]	@ (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	4916      	ldr	r1, [pc, #88]	@ (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d009      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d66:	4b12      	ldr	r3, [pc, #72]	@ (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	490e      	ldr	r1, [pc, #56]	@ (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d7a:	f000 f821 	bl	8003dc0 <HAL_RCC_GetSysClockFreq>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	4b0b      	ldr	r3, [pc, #44]	@ (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	091b      	lsrs	r3, r3, #4
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	490a      	ldr	r1, [pc, #40]	@ (8003db4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d8c:	5ccb      	ldrb	r3, [r1, r3]
 8003d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d92:	4a09      	ldr	r2, [pc, #36]	@ (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d96:	4b09      	ldr	r3, [pc, #36]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c8>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fe fa66 	bl	800226c <HAL_InitTick>

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	40023c00 	.word	0x40023c00
 8003db0:	40023800 	.word	0x40023800
 8003db4:	08008ec8 	.word	0x08008ec8
 8003db8:	20000028 	.word	0x20000028
 8003dbc:	2000002c 	.word	0x2000002c

08003dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dc4:	b090      	sub	sp, #64	@ 0x40
 8003dc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dcc:	2300      	movs	r3, #0
 8003dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dd8:	4b59      	ldr	r3, [pc, #356]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 030c 	and.w	r3, r3, #12
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d00d      	beq.n	8003e00 <HAL_RCC_GetSysClockFreq+0x40>
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	f200 80a1 	bhi.w	8003f2c <HAL_RCC_GetSysClockFreq+0x16c>
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <HAL_RCC_GetSysClockFreq+0x34>
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	d003      	beq.n	8003dfa <HAL_RCC_GetSysClockFreq+0x3a>
 8003df2:	e09b      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003df4:	4b53      	ldr	r3, [pc, #332]	@ (8003f44 <HAL_RCC_GetSysClockFreq+0x184>)
 8003df6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003df8:	e09b      	b.n	8003f32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dfa:	4b53      	ldr	r3, [pc, #332]	@ (8003f48 <HAL_RCC_GetSysClockFreq+0x188>)
 8003dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003dfe:	e098      	b.n	8003f32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e00:	4b4f      	ldr	r3, [pc, #316]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e08:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e0a:	4b4d      	ldr	r3, [pc, #308]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d028      	beq.n	8003e68 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e16:	4b4a      	ldr	r3, [pc, #296]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	099b      	lsrs	r3, r3, #6
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	623b      	str	r3, [r7, #32]
 8003e20:	627a      	str	r2, [r7, #36]	@ 0x24
 8003e22:	6a3b      	ldr	r3, [r7, #32]
 8003e24:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e28:	2100      	movs	r1, #0
 8003e2a:	4b47      	ldr	r3, [pc, #284]	@ (8003f48 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e2c:	fb03 f201 	mul.w	r2, r3, r1
 8003e30:	2300      	movs	r3, #0
 8003e32:	fb00 f303 	mul.w	r3, r0, r3
 8003e36:	4413      	add	r3, r2
 8003e38:	4a43      	ldr	r2, [pc, #268]	@ (8003f48 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e3a:	fba0 1202 	umull	r1, r2, r0, r2
 8003e3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e40:	460a      	mov	r2, r1
 8003e42:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003e44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e46:	4413      	add	r3, r2
 8003e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	61bb      	str	r3, [r7, #24]
 8003e50:	61fa      	str	r2, [r7, #28]
 8003e52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003e5a:	f7fc fef5 	bl	8000c48 <__aeabi_uldivmod>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	460b      	mov	r3, r1
 8003e62:	4613      	mov	r3, r2
 8003e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e66:	e053      	b.n	8003f10 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e68:	4b35      	ldr	r3, [pc, #212]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	099b      	lsrs	r3, r3, #6
 8003e6e:	2200      	movs	r2, #0
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	617a      	str	r2, [r7, #20]
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e7a:	f04f 0b00 	mov.w	fp, #0
 8003e7e:	4652      	mov	r2, sl
 8003e80:	465b      	mov	r3, fp
 8003e82:	f04f 0000 	mov.w	r0, #0
 8003e86:	f04f 0100 	mov.w	r1, #0
 8003e8a:	0159      	lsls	r1, r3, #5
 8003e8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e90:	0150      	lsls	r0, r2, #5
 8003e92:	4602      	mov	r2, r0
 8003e94:	460b      	mov	r3, r1
 8003e96:	ebb2 080a 	subs.w	r8, r2, sl
 8003e9a:	eb63 090b 	sbc.w	r9, r3, fp
 8003e9e:	f04f 0200 	mov.w	r2, #0
 8003ea2:	f04f 0300 	mov.w	r3, #0
 8003ea6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003eaa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003eae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003eb2:	ebb2 0408 	subs.w	r4, r2, r8
 8003eb6:	eb63 0509 	sbc.w	r5, r3, r9
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	f04f 0300 	mov.w	r3, #0
 8003ec2:	00eb      	lsls	r3, r5, #3
 8003ec4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ec8:	00e2      	lsls	r2, r4, #3
 8003eca:	4614      	mov	r4, r2
 8003ecc:	461d      	mov	r5, r3
 8003ece:	eb14 030a 	adds.w	r3, r4, sl
 8003ed2:	603b      	str	r3, [r7, #0]
 8003ed4:	eb45 030b 	adc.w	r3, r5, fp
 8003ed8:	607b      	str	r3, [r7, #4]
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	f04f 0300 	mov.w	r3, #0
 8003ee2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ee6:	4629      	mov	r1, r5
 8003ee8:	028b      	lsls	r3, r1, #10
 8003eea:	4621      	mov	r1, r4
 8003eec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ef0:	4621      	mov	r1, r4
 8003ef2:	028a      	lsls	r2, r1, #10
 8003ef4:	4610      	mov	r0, r2
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003efa:	2200      	movs	r2, #0
 8003efc:	60bb      	str	r3, [r7, #8]
 8003efe:	60fa      	str	r2, [r7, #12]
 8003f00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f04:	f7fc fea0 	bl	8000c48 <__aeabi_uldivmod>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f10:	4b0b      	ldr	r3, [pc, #44]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	0c1b      	lsrs	r3, r3, #16
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003f20:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f28:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f2a:	e002      	b.n	8003f32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f2c:	4b05      	ldr	r3, [pc, #20]	@ (8003f44 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3740      	adds	r7, #64	@ 0x40
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f3e:	bf00      	nop
 8003f40:	40023800 	.word	0x40023800
 8003f44:	00f42400 	.word	0x00f42400
 8003f48:	017d7840 	.word	0x017d7840

08003f4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f50:	4b03      	ldr	r3, [pc, #12]	@ (8003f60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f52:	681b      	ldr	r3, [r3, #0]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	20000028 	.word	0x20000028

08003f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f68:	f7ff fff0 	bl	8003f4c <HAL_RCC_GetHCLKFreq>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	4b05      	ldr	r3, [pc, #20]	@ (8003f84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	0a9b      	lsrs	r3, r3, #10
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	4903      	ldr	r1, [pc, #12]	@ (8003f88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f7a:	5ccb      	ldrb	r3, [r1, r3]
 8003f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40023800 	.word	0x40023800
 8003f88:	08008ed8 	.word	0x08008ed8

08003f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f90:	f7ff ffdc 	bl	8003f4c <HAL_RCC_GetHCLKFreq>
 8003f94:	4602      	mov	r2, r0
 8003f96:	4b05      	ldr	r3, [pc, #20]	@ (8003fac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	0b5b      	lsrs	r3, r3, #13
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	4903      	ldr	r1, [pc, #12]	@ (8003fb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fa2:	5ccb      	ldrb	r3, [r1, r3]
 8003fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	08008ed8 	.word	0x08008ed8

08003fb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e041      	b.n	800404a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d106      	bne.n	8003fe0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7fd ffa2 	bl	8001f24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	4610      	mov	r0, r2
 8003ff4:	f000 fb42 	bl	800467c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
	...

08004054 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b01      	cmp	r3, #1
 8004066:	d001      	beq.n	800406c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e046      	b.n	80040fa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a23      	ldr	r2, [pc, #140]	@ (8004108 <HAL_TIM_Base_Start+0xb4>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d022      	beq.n	80040c4 <HAL_TIM_Base_Start+0x70>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004086:	d01d      	beq.n	80040c4 <HAL_TIM_Base_Start+0x70>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a1f      	ldr	r2, [pc, #124]	@ (800410c <HAL_TIM_Base_Start+0xb8>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d018      	beq.n	80040c4 <HAL_TIM_Base_Start+0x70>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a1e      	ldr	r2, [pc, #120]	@ (8004110 <HAL_TIM_Base_Start+0xbc>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d013      	beq.n	80040c4 <HAL_TIM_Base_Start+0x70>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004114 <HAL_TIM_Base_Start+0xc0>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d00e      	beq.n	80040c4 <HAL_TIM_Base_Start+0x70>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004118 <HAL_TIM_Base_Start+0xc4>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d009      	beq.n	80040c4 <HAL_TIM_Base_Start+0x70>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a19      	ldr	r2, [pc, #100]	@ (800411c <HAL_TIM_Base_Start+0xc8>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d004      	beq.n	80040c4 <HAL_TIM_Base_Start+0x70>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a18      	ldr	r2, [pc, #96]	@ (8004120 <HAL_TIM_Base_Start+0xcc>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d111      	bne.n	80040e8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 0307 	and.w	r3, r3, #7
 80040ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2b06      	cmp	r3, #6
 80040d4:	d010      	beq.n	80040f8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f042 0201 	orr.w	r2, r2, #1
 80040e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e6:	e007      	b.n	80040f8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0201 	orr.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	40010000 	.word	0x40010000
 800410c:	40000400 	.word	0x40000400
 8004110:	40000800 	.word	0x40000800
 8004114:	40000c00 	.word	0x40000c00
 8004118:	40010400 	.word	0x40010400
 800411c:	40014000 	.word	0x40014000
 8004120:	40001800 	.word	0x40001800

08004124 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e041      	b.n	80041ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d106      	bne.n	8004150 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f839 	bl	80041c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3304      	adds	r3, #4
 8004160:	4619      	mov	r1, r3
 8004162:	4610      	mov	r0, r2
 8004164:	f000 fa8a 	bl	800467c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b083      	sub	sp, #12
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
	...

080041d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d109      	bne.n	80041fc <HAL_TIM_PWM_Start+0x24>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	bf14      	ite	ne
 80041f4:	2301      	movne	r3, #1
 80041f6:	2300      	moveq	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	e022      	b.n	8004242 <HAL_TIM_PWM_Start+0x6a>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d109      	bne.n	8004216 <HAL_TIM_PWM_Start+0x3e>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b01      	cmp	r3, #1
 800420c:	bf14      	ite	ne
 800420e:	2301      	movne	r3, #1
 8004210:	2300      	moveq	r3, #0
 8004212:	b2db      	uxtb	r3, r3
 8004214:	e015      	b.n	8004242 <HAL_TIM_PWM_Start+0x6a>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b08      	cmp	r3, #8
 800421a:	d109      	bne.n	8004230 <HAL_TIM_PWM_Start+0x58>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b01      	cmp	r3, #1
 8004226:	bf14      	ite	ne
 8004228:	2301      	movne	r3, #1
 800422a:	2300      	moveq	r3, #0
 800422c:	b2db      	uxtb	r3, r3
 800422e:	e008      	b.n	8004242 <HAL_TIM_PWM_Start+0x6a>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b01      	cmp	r3, #1
 800423a:	bf14      	ite	ne
 800423c:	2301      	movne	r3, #1
 800423e:	2300      	moveq	r3, #0
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e07c      	b.n	8004344 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d104      	bne.n	800425a <HAL_TIM_PWM_Start+0x82>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004258:	e013      	b.n	8004282 <HAL_TIM_PWM_Start+0xaa>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b04      	cmp	r3, #4
 800425e:	d104      	bne.n	800426a <HAL_TIM_PWM_Start+0x92>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2202      	movs	r2, #2
 8004264:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004268:	e00b      	b.n	8004282 <HAL_TIM_PWM_Start+0xaa>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b08      	cmp	r3, #8
 800426e:	d104      	bne.n	800427a <HAL_TIM_PWM_Start+0xa2>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004278:	e003      	b.n	8004282 <HAL_TIM_PWM_Start+0xaa>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2202      	movs	r2, #2
 800427e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2201      	movs	r2, #1
 8004288:	6839      	ldr	r1, [r7, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f000 fcec 	bl	8004c68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a2d      	ldr	r2, [pc, #180]	@ (800434c <HAL_TIM_PWM_Start+0x174>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d004      	beq.n	80042a4 <HAL_TIM_PWM_Start+0xcc>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a2c      	ldr	r2, [pc, #176]	@ (8004350 <HAL_TIM_PWM_Start+0x178>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d101      	bne.n	80042a8 <HAL_TIM_PWM_Start+0xd0>
 80042a4:	2301      	movs	r3, #1
 80042a6:	e000      	b.n	80042aa <HAL_TIM_PWM_Start+0xd2>
 80042a8:	2300      	movs	r3, #0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d007      	beq.n	80042be <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a22      	ldr	r2, [pc, #136]	@ (800434c <HAL_TIM_PWM_Start+0x174>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d022      	beq.n	800430e <HAL_TIM_PWM_Start+0x136>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042d0:	d01d      	beq.n	800430e <HAL_TIM_PWM_Start+0x136>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a1f      	ldr	r2, [pc, #124]	@ (8004354 <HAL_TIM_PWM_Start+0x17c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d018      	beq.n	800430e <HAL_TIM_PWM_Start+0x136>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004358 <HAL_TIM_PWM_Start+0x180>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d013      	beq.n	800430e <HAL_TIM_PWM_Start+0x136>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a1c      	ldr	r2, [pc, #112]	@ (800435c <HAL_TIM_PWM_Start+0x184>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d00e      	beq.n	800430e <HAL_TIM_PWM_Start+0x136>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a16      	ldr	r2, [pc, #88]	@ (8004350 <HAL_TIM_PWM_Start+0x178>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d009      	beq.n	800430e <HAL_TIM_PWM_Start+0x136>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a18      	ldr	r2, [pc, #96]	@ (8004360 <HAL_TIM_PWM_Start+0x188>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d004      	beq.n	800430e <HAL_TIM_PWM_Start+0x136>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a16      	ldr	r2, [pc, #88]	@ (8004364 <HAL_TIM_PWM_Start+0x18c>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d111      	bne.n	8004332 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 0307 	and.w	r3, r3, #7
 8004318:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2b06      	cmp	r3, #6
 800431e:	d010      	beq.n	8004342 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0201 	orr.w	r2, r2, #1
 800432e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004330:	e007      	b.n	8004342 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f042 0201 	orr.w	r2, r2, #1
 8004340:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40010000 	.word	0x40010000
 8004350:	40010400 	.word	0x40010400
 8004354:	40000400 	.word	0x40000400
 8004358:	40000800 	.word	0x40000800
 800435c:	40000c00 	.word	0x40000c00
 8004360:	40014000 	.word	0x40014000
 8004364:	40001800 	.word	0x40001800

08004368 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004374:	2300      	movs	r3, #0
 8004376:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004382:	2302      	movs	r3, #2
 8004384:	e0ae      	b.n	80044e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b0c      	cmp	r3, #12
 8004392:	f200 809f 	bhi.w	80044d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004396:	a201      	add	r2, pc, #4	@ (adr r2, 800439c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439c:	080043d1 	.word	0x080043d1
 80043a0:	080044d5 	.word	0x080044d5
 80043a4:	080044d5 	.word	0x080044d5
 80043a8:	080044d5 	.word	0x080044d5
 80043ac:	08004411 	.word	0x08004411
 80043b0:	080044d5 	.word	0x080044d5
 80043b4:	080044d5 	.word	0x080044d5
 80043b8:	080044d5 	.word	0x080044d5
 80043bc:	08004453 	.word	0x08004453
 80043c0:	080044d5 	.word	0x080044d5
 80043c4:	080044d5 	.word	0x080044d5
 80043c8:	080044d5 	.word	0x080044d5
 80043cc:	08004493 	.word	0x08004493
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68b9      	ldr	r1, [r7, #8]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 f9fc 	bl	80047d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699a      	ldr	r2, [r3, #24]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0208 	orr.w	r2, r2, #8
 80043ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699a      	ldr	r2, [r3, #24]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0204 	bic.w	r2, r2, #4
 80043fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6999      	ldr	r1, [r3, #24]
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	691a      	ldr	r2, [r3, #16]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	619a      	str	r2, [r3, #24]
      break;
 800440e:	e064      	b.n	80044da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68b9      	ldr	r1, [r7, #8]
 8004416:	4618      	mov	r0, r3
 8004418:	f000 fa4c 	bl	80048b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699a      	ldr	r2, [r3, #24]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800442a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800443a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6999      	ldr	r1, [r3, #24]
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	021a      	lsls	r2, r3, #8
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	619a      	str	r2, [r3, #24]
      break;
 8004450:	e043      	b.n	80044da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68b9      	ldr	r1, [r7, #8]
 8004458:	4618      	mov	r0, r3
 800445a:	f000 faa1 	bl	80049a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	69da      	ldr	r2, [r3, #28]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f042 0208 	orr.w	r2, r2, #8
 800446c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	69da      	ldr	r2, [r3, #28]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0204 	bic.w	r2, r2, #4
 800447c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	69d9      	ldr	r1, [r3, #28]
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	691a      	ldr	r2, [r3, #16]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	430a      	orrs	r2, r1
 800448e:	61da      	str	r2, [r3, #28]
      break;
 8004490:	e023      	b.n	80044da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68b9      	ldr	r1, [r7, #8]
 8004498:	4618      	mov	r0, r3
 800449a:	f000 faf5 	bl	8004a88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69da      	ldr	r2, [r3, #28]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69da      	ldr	r2, [r3, #28]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69d9      	ldr	r1, [r3, #28]
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	021a      	lsls	r2, r3, #8
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	61da      	str	r2, [r3, #28]
      break;
 80044d2:	e002      	b.n	80044da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	75fb      	strb	r3, [r7, #23]
      break;
 80044d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3718      	adds	r7, #24
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044f6:	2300      	movs	r3, #0
 80044f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_TIM_ConfigClockSource+0x1c>
 8004504:	2302      	movs	r3, #2
 8004506:	e0b4      	b.n	8004672 <HAL_TIM_ConfigClockSource+0x186>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004526:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800452e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004540:	d03e      	beq.n	80045c0 <HAL_TIM_ConfigClockSource+0xd4>
 8004542:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004546:	f200 8087 	bhi.w	8004658 <HAL_TIM_ConfigClockSource+0x16c>
 800454a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800454e:	f000 8086 	beq.w	800465e <HAL_TIM_ConfigClockSource+0x172>
 8004552:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004556:	d87f      	bhi.n	8004658 <HAL_TIM_ConfigClockSource+0x16c>
 8004558:	2b70      	cmp	r3, #112	@ 0x70
 800455a:	d01a      	beq.n	8004592 <HAL_TIM_ConfigClockSource+0xa6>
 800455c:	2b70      	cmp	r3, #112	@ 0x70
 800455e:	d87b      	bhi.n	8004658 <HAL_TIM_ConfigClockSource+0x16c>
 8004560:	2b60      	cmp	r3, #96	@ 0x60
 8004562:	d050      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0x11a>
 8004564:	2b60      	cmp	r3, #96	@ 0x60
 8004566:	d877      	bhi.n	8004658 <HAL_TIM_ConfigClockSource+0x16c>
 8004568:	2b50      	cmp	r3, #80	@ 0x50
 800456a:	d03c      	beq.n	80045e6 <HAL_TIM_ConfigClockSource+0xfa>
 800456c:	2b50      	cmp	r3, #80	@ 0x50
 800456e:	d873      	bhi.n	8004658 <HAL_TIM_ConfigClockSource+0x16c>
 8004570:	2b40      	cmp	r3, #64	@ 0x40
 8004572:	d058      	beq.n	8004626 <HAL_TIM_ConfigClockSource+0x13a>
 8004574:	2b40      	cmp	r3, #64	@ 0x40
 8004576:	d86f      	bhi.n	8004658 <HAL_TIM_ConfigClockSource+0x16c>
 8004578:	2b30      	cmp	r3, #48	@ 0x30
 800457a:	d064      	beq.n	8004646 <HAL_TIM_ConfigClockSource+0x15a>
 800457c:	2b30      	cmp	r3, #48	@ 0x30
 800457e:	d86b      	bhi.n	8004658 <HAL_TIM_ConfigClockSource+0x16c>
 8004580:	2b20      	cmp	r3, #32
 8004582:	d060      	beq.n	8004646 <HAL_TIM_ConfigClockSource+0x15a>
 8004584:	2b20      	cmp	r3, #32
 8004586:	d867      	bhi.n	8004658 <HAL_TIM_ConfigClockSource+0x16c>
 8004588:	2b00      	cmp	r3, #0
 800458a:	d05c      	beq.n	8004646 <HAL_TIM_ConfigClockSource+0x15a>
 800458c:	2b10      	cmp	r3, #16
 800458e:	d05a      	beq.n	8004646 <HAL_TIM_ConfigClockSource+0x15a>
 8004590:	e062      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045a2:	f000 fb41 	bl	8004c28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80045b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	609a      	str	r2, [r3, #8]
      break;
 80045be:	e04f      	b.n	8004660 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045d0:	f000 fb2a 	bl	8004c28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689a      	ldr	r2, [r3, #8]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045e2:	609a      	str	r2, [r3, #8]
      break;
 80045e4:	e03c      	b.n	8004660 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045f2:	461a      	mov	r2, r3
 80045f4:	f000 fa9e 	bl	8004b34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2150      	movs	r1, #80	@ 0x50
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 faf7 	bl	8004bf2 <TIM_ITRx_SetConfig>
      break;
 8004604:	e02c      	b.n	8004660 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004612:	461a      	mov	r2, r3
 8004614:	f000 fabd 	bl	8004b92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2160      	movs	r1, #96	@ 0x60
 800461e:	4618      	mov	r0, r3
 8004620:	f000 fae7 	bl	8004bf2 <TIM_ITRx_SetConfig>
      break;
 8004624:	e01c      	b.n	8004660 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004632:	461a      	mov	r2, r3
 8004634:	f000 fa7e 	bl	8004b34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2140      	movs	r1, #64	@ 0x40
 800463e:	4618      	mov	r0, r3
 8004640:	f000 fad7 	bl	8004bf2 <TIM_ITRx_SetConfig>
      break;
 8004644:	e00c      	b.n	8004660 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4619      	mov	r1, r3
 8004650:	4610      	mov	r0, r2
 8004652:	f000 face 	bl	8004bf2 <TIM_ITRx_SetConfig>
      break;
 8004656:	e003      	b.n	8004660 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	73fb      	strb	r3, [r7, #15]
      break;
 800465c:	e000      	b.n	8004660 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800465e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004670:	7bfb      	ldrb	r3, [r7, #15]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
	...

0800467c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a46      	ldr	r2, [pc, #280]	@ (80047a8 <TIM_Base_SetConfig+0x12c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d013      	beq.n	80046bc <TIM_Base_SetConfig+0x40>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800469a:	d00f      	beq.n	80046bc <TIM_Base_SetConfig+0x40>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a43      	ldr	r2, [pc, #268]	@ (80047ac <TIM_Base_SetConfig+0x130>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d00b      	beq.n	80046bc <TIM_Base_SetConfig+0x40>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a42      	ldr	r2, [pc, #264]	@ (80047b0 <TIM_Base_SetConfig+0x134>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d007      	beq.n	80046bc <TIM_Base_SetConfig+0x40>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a41      	ldr	r2, [pc, #260]	@ (80047b4 <TIM_Base_SetConfig+0x138>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d003      	beq.n	80046bc <TIM_Base_SetConfig+0x40>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a40      	ldr	r2, [pc, #256]	@ (80047b8 <TIM_Base_SetConfig+0x13c>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d108      	bne.n	80046ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a35      	ldr	r2, [pc, #212]	@ (80047a8 <TIM_Base_SetConfig+0x12c>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d02b      	beq.n	800472e <TIM_Base_SetConfig+0xb2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046dc:	d027      	beq.n	800472e <TIM_Base_SetConfig+0xb2>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a32      	ldr	r2, [pc, #200]	@ (80047ac <TIM_Base_SetConfig+0x130>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d023      	beq.n	800472e <TIM_Base_SetConfig+0xb2>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a31      	ldr	r2, [pc, #196]	@ (80047b0 <TIM_Base_SetConfig+0x134>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d01f      	beq.n	800472e <TIM_Base_SetConfig+0xb2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a30      	ldr	r2, [pc, #192]	@ (80047b4 <TIM_Base_SetConfig+0x138>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d01b      	beq.n	800472e <TIM_Base_SetConfig+0xb2>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a2f      	ldr	r2, [pc, #188]	@ (80047b8 <TIM_Base_SetConfig+0x13c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d017      	beq.n	800472e <TIM_Base_SetConfig+0xb2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a2e      	ldr	r2, [pc, #184]	@ (80047bc <TIM_Base_SetConfig+0x140>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d013      	beq.n	800472e <TIM_Base_SetConfig+0xb2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a2d      	ldr	r2, [pc, #180]	@ (80047c0 <TIM_Base_SetConfig+0x144>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00f      	beq.n	800472e <TIM_Base_SetConfig+0xb2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a2c      	ldr	r2, [pc, #176]	@ (80047c4 <TIM_Base_SetConfig+0x148>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00b      	beq.n	800472e <TIM_Base_SetConfig+0xb2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a2b      	ldr	r2, [pc, #172]	@ (80047c8 <TIM_Base_SetConfig+0x14c>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d007      	beq.n	800472e <TIM_Base_SetConfig+0xb2>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a2a      	ldr	r2, [pc, #168]	@ (80047cc <TIM_Base_SetConfig+0x150>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d003      	beq.n	800472e <TIM_Base_SetConfig+0xb2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a29      	ldr	r2, [pc, #164]	@ (80047d0 <TIM_Base_SetConfig+0x154>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d108      	bne.n	8004740 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	4313      	orrs	r3, r2
 800473e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	4313      	orrs	r3, r2
 800474c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a10      	ldr	r2, [pc, #64]	@ (80047a8 <TIM_Base_SetConfig+0x12c>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d003      	beq.n	8004774 <TIM_Base_SetConfig+0xf8>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a12      	ldr	r2, [pc, #72]	@ (80047b8 <TIM_Base_SetConfig+0x13c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d103      	bne.n	800477c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	691a      	ldr	r2, [r3, #16]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b01      	cmp	r3, #1
 800478c:	d105      	bne.n	800479a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f023 0201 	bic.w	r2, r3, #1
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	611a      	str	r2, [r3, #16]
  }
}
 800479a:	bf00      	nop
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	40010000 	.word	0x40010000
 80047ac:	40000400 	.word	0x40000400
 80047b0:	40000800 	.word	0x40000800
 80047b4:	40000c00 	.word	0x40000c00
 80047b8:	40010400 	.word	0x40010400
 80047bc:	40014000 	.word	0x40014000
 80047c0:	40014400 	.word	0x40014400
 80047c4:	40014800 	.word	0x40014800
 80047c8:	40001800 	.word	0x40001800
 80047cc:	40001c00 	.word	0x40001c00
 80047d0:	40002000 	.word	0x40002000

080047d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	f023 0201 	bic.w	r2, r3, #1
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 0303 	bic.w	r3, r3, #3
 800480a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	4313      	orrs	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f023 0302 	bic.w	r3, r3, #2
 800481c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	4313      	orrs	r3, r2
 8004826:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a20      	ldr	r2, [pc, #128]	@ (80048ac <TIM_OC1_SetConfig+0xd8>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d003      	beq.n	8004838 <TIM_OC1_SetConfig+0x64>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a1f      	ldr	r2, [pc, #124]	@ (80048b0 <TIM_OC1_SetConfig+0xdc>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d10c      	bne.n	8004852 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	f023 0308 	bic.w	r3, r3, #8
 800483e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	4313      	orrs	r3, r2
 8004848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	f023 0304 	bic.w	r3, r3, #4
 8004850:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a15      	ldr	r2, [pc, #84]	@ (80048ac <TIM_OC1_SetConfig+0xd8>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d003      	beq.n	8004862 <TIM_OC1_SetConfig+0x8e>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a14      	ldr	r2, [pc, #80]	@ (80048b0 <TIM_OC1_SetConfig+0xdc>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d111      	bne.n	8004886 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	4313      	orrs	r3, r2
 800487a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	4313      	orrs	r3, r2
 8004884:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	621a      	str	r2, [r3, #32]
}
 80048a0:	bf00      	nop
 80048a2:	371c      	adds	r7, #28
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	40010000 	.word	0x40010000
 80048b0:	40010400 	.word	0x40010400

080048b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b087      	sub	sp, #28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	f023 0210 	bic.w	r2, r3, #16
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	021b      	lsls	r3, r3, #8
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f023 0320 	bic.w	r3, r3, #32
 80048fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	011b      	lsls	r3, r3, #4
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	4313      	orrs	r3, r2
 800490a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a22      	ldr	r2, [pc, #136]	@ (8004998 <TIM_OC2_SetConfig+0xe4>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d003      	beq.n	800491c <TIM_OC2_SetConfig+0x68>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a21      	ldr	r2, [pc, #132]	@ (800499c <TIM_OC2_SetConfig+0xe8>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d10d      	bne.n	8004938 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	011b      	lsls	r3, r3, #4
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	4313      	orrs	r3, r2
 800492e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004936:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a17      	ldr	r2, [pc, #92]	@ (8004998 <TIM_OC2_SetConfig+0xe4>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d003      	beq.n	8004948 <TIM_OC2_SetConfig+0x94>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a16      	ldr	r2, [pc, #88]	@ (800499c <TIM_OC2_SetConfig+0xe8>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d113      	bne.n	8004970 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800494e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004956:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	4313      	orrs	r3, r2
 8004962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	4313      	orrs	r3, r2
 800496e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	621a      	str	r2, [r3, #32]
}
 800498a:	bf00      	nop
 800498c:	371c      	adds	r7, #28
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	40010000 	.word	0x40010000
 800499c:	40010400 	.word	0x40010400

080049a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b087      	sub	sp, #28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 0303 	bic.w	r3, r3, #3
 80049d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	4313      	orrs	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80049e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	021b      	lsls	r3, r3, #8
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a21      	ldr	r2, [pc, #132]	@ (8004a80 <TIM_OC3_SetConfig+0xe0>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d003      	beq.n	8004a06 <TIM_OC3_SetConfig+0x66>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a20      	ldr	r2, [pc, #128]	@ (8004a84 <TIM_OC3_SetConfig+0xe4>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d10d      	bne.n	8004a22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	021b      	lsls	r3, r3, #8
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a16      	ldr	r2, [pc, #88]	@ (8004a80 <TIM_OC3_SetConfig+0xe0>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d003      	beq.n	8004a32 <TIM_OC3_SetConfig+0x92>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a15      	ldr	r2, [pc, #84]	@ (8004a84 <TIM_OC3_SetConfig+0xe4>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d113      	bne.n	8004a5a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	011b      	lsls	r3, r3, #4
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	621a      	str	r2, [r3, #32]
}
 8004a74:	bf00      	nop
 8004a76:	371c      	adds	r7, #28
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr
 8004a80:	40010000 	.word	0x40010000
 8004a84:	40010400 	.word	0x40010400

08004a88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b087      	sub	sp, #28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	021b      	lsls	r3, r3, #8
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ad2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	031b      	lsls	r3, r3, #12
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a12      	ldr	r2, [pc, #72]	@ (8004b2c <TIM_OC4_SetConfig+0xa4>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d003      	beq.n	8004af0 <TIM_OC4_SetConfig+0x68>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a11      	ldr	r2, [pc, #68]	@ (8004b30 <TIM_OC4_SetConfig+0xa8>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d109      	bne.n	8004b04 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004af6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	019b      	lsls	r3, r3, #6
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	621a      	str	r2, [r3, #32]
}
 8004b1e:	bf00      	nop
 8004b20:	371c      	adds	r7, #28
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	40010000 	.word	0x40010000
 8004b30:	40010400 	.word	0x40010400

08004b34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b087      	sub	sp, #28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	f023 0201 	bic.w	r2, r3, #1
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	011b      	lsls	r3, r3, #4
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f023 030a 	bic.w	r3, r3, #10
 8004b70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	621a      	str	r2, [r3, #32]
}
 8004b86:	bf00      	nop
 8004b88:	371c      	adds	r7, #28
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b087      	sub	sp, #28
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	60f8      	str	r0, [r7, #12]
 8004b9a:	60b9      	str	r1, [r7, #8]
 8004b9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	f023 0210 	bic.w	r2, r3, #16
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004bbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	031b      	lsls	r3, r3, #12
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004bce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	011b      	lsls	r3, r3, #4
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	621a      	str	r2, [r3, #32]
}
 8004be6:	bf00      	nop
 8004be8:	371c      	adds	r7, #28
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b085      	sub	sp, #20
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
 8004bfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	f043 0307 	orr.w	r3, r3, #7
 8004c14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	609a      	str	r2, [r3, #8]
}
 8004c1c:	bf00      	nop
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	021a      	lsls	r2, r3, #8
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	609a      	str	r2, [r3, #8]
}
 8004c5c:	bf00      	nop
 8004c5e:	371c      	adds	r7, #28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b087      	sub	sp, #28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f003 031f 	and.w	r3, r3, #31
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6a1a      	ldr	r2, [r3, #32]
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	43db      	mvns	r3, r3
 8004c8a:	401a      	ands	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6a1a      	ldr	r2, [r3, #32]
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	f003 031f 	and.w	r3, r3, #31
 8004c9a:	6879      	ldr	r1, [r7, #4]
 8004c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	621a      	str	r2, [r3, #32]
}
 8004ca6:	bf00      	nop
 8004ca8:	371c      	adds	r7, #28
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
	...

08004cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d101      	bne.n	8004ccc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cc8:	2302      	movs	r3, #2
 8004cca:	e05a      	b.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a21      	ldr	r2, [pc, #132]	@ (8004d90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d022      	beq.n	8004d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d18:	d01d      	beq.n	8004d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a1d      	ldr	r2, [pc, #116]	@ (8004d94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d018      	beq.n	8004d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a1b      	ldr	r2, [pc, #108]	@ (8004d98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d013      	beq.n	8004d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a1a      	ldr	r2, [pc, #104]	@ (8004d9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d00e      	beq.n	8004d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a18      	ldr	r2, [pc, #96]	@ (8004da0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d009      	beq.n	8004d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a17      	ldr	r2, [pc, #92]	@ (8004da4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d004      	beq.n	8004d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a15      	ldr	r2, [pc, #84]	@ (8004da8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d10c      	bne.n	8004d70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	40010000 	.word	0x40010000
 8004d94:	40000400 	.word	0x40000400
 8004d98:	40000800 	.word	0x40000800
 8004d9c:	40000c00 	.word	0x40000c00
 8004da0:	40010400 	.word	0x40010400
 8004da4:	40014000 	.word	0x40014000
 8004da8:	40001800 	.word	0x40001800

08004dac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e042      	b.n	8004e44 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d106      	bne.n	8004dd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7fd f956 	bl	8002084 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2224      	movs	r2, #36	@ 0x24
 8004ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68da      	ldr	r2, [r3, #12]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004dee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 fdbd 	bl	8005970 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	691a      	ldr	r2, [r3, #16]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695a      	ldr	r2, [r3, #20]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68da      	ldr	r2, [r3, #12]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2220      	movs	r2, #32
 8004e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08a      	sub	sp, #40	@ 0x28
 8004e50:	af02      	add	r7, sp, #8
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	603b      	str	r3, [r7, #0]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b20      	cmp	r3, #32
 8004e6a:	d175      	bne.n	8004f58 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d002      	beq.n	8004e78 <HAL_UART_Transmit+0x2c>
 8004e72:	88fb      	ldrh	r3, [r7, #6]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e06e      	b.n	8004f5a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2221      	movs	r2, #33	@ 0x21
 8004e86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e8a:	f7fd fa33 	bl	80022f4 <HAL_GetTick>
 8004e8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	88fa      	ldrh	r2, [r7, #6]
 8004e94:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	88fa      	ldrh	r2, [r7, #6]
 8004e9a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ea4:	d108      	bne.n	8004eb8 <HAL_UART_Transmit+0x6c>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d104      	bne.n	8004eb8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	61bb      	str	r3, [r7, #24]
 8004eb6:	e003      	b.n	8004ec0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ec0:	e02e      	b.n	8004f20 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	2180      	movs	r1, #128	@ 0x80
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 fb1f 	bl	8005510 <UART_WaitOnFlagUntilTimeout>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d005      	beq.n	8004ee4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e03a      	b.n	8004f5a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10b      	bne.n	8004f02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	881b      	ldrh	r3, [r3, #0]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ef8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	3302      	adds	r3, #2
 8004efe:	61bb      	str	r3, [r7, #24]
 8004f00:	e007      	b.n	8004f12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	781a      	ldrb	r2, [r3, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1cb      	bne.n	8004ec2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	2200      	movs	r2, #0
 8004f32:	2140      	movs	r1, #64	@ 0x40
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 faeb 	bl	8005510 <UART_WaitOnFlagUntilTimeout>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d005      	beq.n	8004f4c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2220      	movs	r2, #32
 8004f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e006      	b.n	8004f5a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004f54:	2300      	movs	r3, #0
 8004f56:	e000      	b.n	8004f5a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004f58:	2302      	movs	r3, #2
  }
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3720      	adds	r7, #32
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b084      	sub	sp, #16
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	60f8      	str	r0, [r7, #12]
 8004f6a:	60b9      	str	r1, [r7, #8]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b20      	cmp	r3, #32
 8004f7a:	d112      	bne.n	8004fa2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d002      	beq.n	8004f88 <HAL_UART_Receive_IT+0x26>
 8004f82:	88fb      	ldrh	r3, [r7, #6]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e00b      	b.n	8004fa4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f92:	88fb      	ldrh	r3, [r7, #6]
 8004f94:	461a      	mov	r2, r3
 8004f96:	68b9      	ldr	r1, [r7, #8]
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 fb12 	bl	80055c2 <UART_Start_Receive_IT>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	e000      	b.n	8004fa4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004fa2:	2302      	movs	r3, #2
  }
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b0ba      	sub	sp, #232	@ 0xe8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fe2:	f003 030f 	and.w	r3, r3, #15
 8004fe6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004fea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10f      	bne.n	8005012 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ff6:	f003 0320 	and.w	r3, r3, #32
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d009      	beq.n	8005012 <HAL_UART_IRQHandler+0x66>
 8004ffe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005002:	f003 0320 	and.w	r3, r3, #32
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 fbf2 	bl	80057f4 <UART_Receive_IT>
      return;
 8005010:	e25b      	b.n	80054ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005012:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 80de 	beq.w	80051d8 <HAL_UART_IRQHandler+0x22c>
 800501c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	2b00      	cmp	r3, #0
 8005026:	d106      	bne.n	8005036 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800502c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005030:	2b00      	cmp	r3, #0
 8005032:	f000 80d1 	beq.w	80051d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00b      	beq.n	800505a <HAL_UART_IRQHandler+0xae>
 8005042:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800504a:	2b00      	cmp	r3, #0
 800504c:	d005      	beq.n	800505a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005052:	f043 0201 	orr.w	r2, r3, #1
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800505a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800505e:	f003 0304 	and.w	r3, r3, #4
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00b      	beq.n	800507e <HAL_UART_IRQHandler+0xd2>
 8005066:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d005      	beq.n	800507e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005076:	f043 0202 	orr.w	r2, r3, #2
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800507e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00b      	beq.n	80050a2 <HAL_UART_IRQHandler+0xf6>
 800508a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d005      	beq.n	80050a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800509a:	f043 0204 	orr.w	r2, r3, #4
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80050a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050a6:	f003 0308 	and.w	r3, r3, #8
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d011      	beq.n	80050d2 <HAL_UART_IRQHandler+0x126>
 80050ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050b2:	f003 0320 	and.w	r3, r3, #32
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d105      	bne.n	80050c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80050ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d005      	beq.n	80050d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ca:	f043 0208 	orr.w	r2, r3, #8
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f000 81f2 	beq.w	80054c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050e0:	f003 0320 	and.w	r3, r3, #32
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d008      	beq.n	80050fa <HAL_UART_IRQHandler+0x14e>
 80050e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050ec:	f003 0320 	and.w	r3, r3, #32
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d002      	beq.n	80050fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 fb7d 	bl	80057f4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005104:	2b40      	cmp	r3, #64	@ 0x40
 8005106:	bf0c      	ite	eq
 8005108:	2301      	moveq	r3, #1
 800510a:	2300      	movne	r3, #0
 800510c:	b2db      	uxtb	r3, r3
 800510e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005116:	f003 0308 	and.w	r3, r3, #8
 800511a:	2b00      	cmp	r3, #0
 800511c:	d103      	bne.n	8005126 <HAL_UART_IRQHandler+0x17a>
 800511e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005122:	2b00      	cmp	r3, #0
 8005124:	d04f      	beq.n	80051c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 fa85 	bl	8005636 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005136:	2b40      	cmp	r3, #64	@ 0x40
 8005138:	d141      	bne.n	80051be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	3314      	adds	r3, #20
 8005140:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005144:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005148:	e853 3f00 	ldrex	r3, [r3]
 800514c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005150:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005154:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005158:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	3314      	adds	r3, #20
 8005162:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005166:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800516a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005172:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005176:	e841 2300 	strex	r3, r2, [r1]
 800517a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800517e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1d9      	bne.n	800513a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800518a:	2b00      	cmp	r3, #0
 800518c:	d013      	beq.n	80051b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005192:	4a7e      	ldr	r2, [pc, #504]	@ (800538c <HAL_UART_IRQHandler+0x3e0>)
 8005194:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800519a:	4618      	mov	r0, r3
 800519c:	f7fe f8c3 	bl	8003326 <HAL_DMA_Abort_IT>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d016      	beq.n	80051d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80051b0:	4610      	mov	r0, r2
 80051b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b4:	e00e      	b.n	80051d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f994 	bl	80054e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051bc:	e00a      	b.n	80051d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f990 	bl	80054e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c4:	e006      	b.n	80051d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f98c 	bl	80054e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80051d2:	e175      	b.n	80054c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d4:	bf00      	nop
    return;
 80051d6:	e173      	b.n	80054c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051dc:	2b01      	cmp	r3, #1
 80051de:	f040 814f 	bne.w	8005480 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80051e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051e6:	f003 0310 	and.w	r3, r3, #16
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f000 8148 	beq.w	8005480 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80051f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051f4:	f003 0310 	and.w	r3, r3, #16
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 8141 	beq.w	8005480 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051fe:	2300      	movs	r3, #0
 8005200:	60bb      	str	r3, [r7, #8]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	60bb      	str	r3, [r7, #8]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	60bb      	str	r3, [r7, #8]
 8005212:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800521e:	2b40      	cmp	r3, #64	@ 0x40
 8005220:	f040 80b6 	bne.w	8005390 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005230:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 8145 	beq.w	80054c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800523e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005242:	429a      	cmp	r2, r3
 8005244:	f080 813e 	bcs.w	80054c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800524e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800525a:	f000 8088 	beq.w	800536e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	330c      	adds	r3, #12
 8005264:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005268:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800526c:	e853 3f00 	ldrex	r3, [r3]
 8005270:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005274:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005278:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800527c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	330c      	adds	r3, #12
 8005286:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800528a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800528e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005292:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005296:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800529a:	e841 2300 	strex	r3, r2, [r1]
 800529e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80052a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1d9      	bne.n	800525e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	3314      	adds	r3, #20
 80052b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80052b4:	e853 3f00 	ldrex	r3, [r3]
 80052b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80052ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80052bc:	f023 0301 	bic.w	r3, r3, #1
 80052c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	3314      	adds	r3, #20
 80052ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80052ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80052d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80052d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80052da:	e841 2300 	strex	r3, r2, [r1]
 80052de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80052e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1e1      	bne.n	80052aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	3314      	adds	r3, #20
 80052ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052f0:	e853 3f00 	ldrex	r3, [r3]
 80052f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80052f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	3314      	adds	r3, #20
 8005306:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800530a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800530c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005310:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005312:	e841 2300 	strex	r3, r2, [r1]
 8005316:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005318:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1e3      	bne.n	80052e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2220      	movs	r2, #32
 8005322:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	330c      	adds	r3, #12
 8005332:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005334:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005336:	e853 3f00 	ldrex	r3, [r3]
 800533a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800533c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800533e:	f023 0310 	bic.w	r3, r3, #16
 8005342:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	330c      	adds	r3, #12
 800534c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005350:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005352:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005354:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005356:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005358:	e841 2300 	strex	r3, r2, [r1]
 800535c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800535e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1e3      	bne.n	800532c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005368:	4618      	mov	r0, r3
 800536a:	f7fd ff6c 	bl	8003246 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2202      	movs	r2, #2
 8005372:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800537c:	b29b      	uxth	r3, r3
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	b29b      	uxth	r3, r3
 8005382:	4619      	mov	r1, r3
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f8b7 	bl	80054f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800538a:	e09b      	b.n	80054c4 <HAL_UART_IRQHandler+0x518>
 800538c:	080056fd 	.word	0x080056fd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005398:	b29b      	uxth	r3, r3
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f000 808e 	beq.w	80054c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80053ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 8089 	beq.w	80054c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	330c      	adds	r3, #12
 80053bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c0:	e853 3f00 	ldrex	r3, [r3]
 80053c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	330c      	adds	r3, #12
 80053d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80053da:	647a      	str	r2, [r7, #68]	@ 0x44
 80053dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053e2:	e841 2300 	strex	r3, r2, [r1]
 80053e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1e3      	bne.n	80053b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	3314      	adds	r3, #20
 80053f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f8:	e853 3f00 	ldrex	r3, [r3]
 80053fc:	623b      	str	r3, [r7, #32]
   return(result);
 80053fe:	6a3b      	ldr	r3, [r7, #32]
 8005400:	f023 0301 	bic.w	r3, r3, #1
 8005404:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3314      	adds	r3, #20
 800540e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005412:	633a      	str	r2, [r7, #48]	@ 0x30
 8005414:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005416:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005418:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800541a:	e841 2300 	strex	r3, r2, [r1]
 800541e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1e3      	bne.n	80053ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2220      	movs	r2, #32
 800542a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	330c      	adds	r3, #12
 800543a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	e853 3f00 	ldrex	r3, [r3]
 8005442:	60fb      	str	r3, [r7, #12]
   return(result);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 0310 	bic.w	r3, r3, #16
 800544a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	330c      	adds	r3, #12
 8005454:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005458:	61fa      	str	r2, [r7, #28]
 800545a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545c:	69b9      	ldr	r1, [r7, #24]
 800545e:	69fa      	ldr	r2, [r7, #28]
 8005460:	e841 2300 	strex	r3, r2, [r1]
 8005464:	617b      	str	r3, [r7, #20]
   return(result);
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1e3      	bne.n	8005434 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005472:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005476:	4619      	mov	r1, r3
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f83d 	bl	80054f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800547e:	e023      	b.n	80054c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005484:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005488:	2b00      	cmp	r3, #0
 800548a:	d009      	beq.n	80054a0 <HAL_UART_IRQHandler+0x4f4>
 800548c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005494:	2b00      	cmp	r3, #0
 8005496:	d003      	beq.n	80054a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f943 	bl	8005724 <UART_Transmit_IT>
    return;
 800549e:	e014      	b.n	80054ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80054a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00e      	beq.n	80054ca <HAL_UART_IRQHandler+0x51e>
 80054ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d008      	beq.n	80054ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f983 	bl	80057c4 <UART_EndTransmit_IT>
    return;
 80054be:	e004      	b.n	80054ca <HAL_UART_IRQHandler+0x51e>
    return;
 80054c0:	bf00      	nop
 80054c2:	e002      	b.n	80054ca <HAL_UART_IRQHandler+0x51e>
      return;
 80054c4:	bf00      	nop
 80054c6:	e000      	b.n	80054ca <HAL_UART_IRQHandler+0x51e>
      return;
 80054c8:	bf00      	nop
  }
}
 80054ca:	37e8      	adds	r7, #232	@ 0xe8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	460b      	mov	r3, r1
 8005502:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	603b      	str	r3, [r7, #0]
 800551c:	4613      	mov	r3, r2
 800551e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005520:	e03b      	b.n	800559a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005528:	d037      	beq.n	800559a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800552a:	f7fc fee3 	bl	80022f4 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	6a3a      	ldr	r2, [r7, #32]
 8005536:	429a      	cmp	r2, r3
 8005538:	d302      	bcc.n	8005540 <UART_WaitOnFlagUntilTimeout+0x30>
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e03a      	b.n	80055ba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f003 0304 	and.w	r3, r3, #4
 800554e:	2b00      	cmp	r3, #0
 8005550:	d023      	beq.n	800559a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2b80      	cmp	r3, #128	@ 0x80
 8005556:	d020      	beq.n	800559a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2b40      	cmp	r3, #64	@ 0x40
 800555c:	d01d      	beq.n	800559a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0308 	and.w	r3, r3, #8
 8005568:	2b08      	cmp	r3, #8
 800556a:	d116      	bne.n	800559a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800556c:	2300      	movs	r3, #0
 800556e:	617b      	str	r3, [r7, #20]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	617b      	str	r3, [r7, #20]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	617b      	str	r3, [r7, #20]
 8005580:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 f857 	bl	8005636 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2208      	movs	r2, #8
 800558c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e00f      	b.n	80055ba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	4013      	ands	r3, r2
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	bf0c      	ite	eq
 80055aa:	2301      	moveq	r3, #1
 80055ac:	2300      	movne	r3, #0
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	461a      	mov	r2, r3
 80055b2:	79fb      	ldrb	r3, [r7, #7]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d0b4      	beq.n	8005522 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3718      	adds	r7, #24
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b085      	sub	sp, #20
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	60f8      	str	r0, [r7, #12]
 80055ca:	60b9      	str	r1, [r7, #8]
 80055cc:	4613      	mov	r3, r2
 80055ce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	88fa      	ldrh	r2, [r7, #6]
 80055da:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	88fa      	ldrh	r2, [r7, #6]
 80055e0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2222      	movs	r2, #34	@ 0x22
 80055ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d007      	beq.n	8005608 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68da      	ldr	r2, [r3, #12]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005606:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	695a      	ldr	r2, [r3, #20]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f042 0201 	orr.w	r2, r2, #1
 8005616:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68da      	ldr	r2, [r3, #12]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f042 0220 	orr.w	r2, r2, #32
 8005626:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3714      	adds	r7, #20
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005636:	b480      	push	{r7}
 8005638:	b095      	sub	sp, #84	@ 0x54
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	330c      	adds	r3, #12
 8005644:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005648:	e853 3f00 	ldrex	r3, [r3]
 800564c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800564e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005650:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005654:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	330c      	adds	r3, #12
 800565c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800565e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005660:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005662:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005664:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005666:	e841 2300 	strex	r3, r2, [r1]
 800566a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800566c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1e5      	bne.n	800563e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3314      	adds	r3, #20
 8005678:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	e853 3f00 	ldrex	r3, [r3]
 8005680:	61fb      	str	r3, [r7, #28]
   return(result);
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	f023 0301 	bic.w	r3, r3, #1
 8005688:	64bb      	str	r3, [r7, #72]	@ 0x48
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	3314      	adds	r3, #20
 8005690:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005692:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005694:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005696:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005698:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800569a:	e841 2300 	strex	r3, r2, [r1]
 800569e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1e5      	bne.n	8005672 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d119      	bne.n	80056e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	330c      	adds	r3, #12
 80056b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	e853 3f00 	ldrex	r3, [r3]
 80056bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	f023 0310 	bic.w	r3, r3, #16
 80056c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	330c      	adds	r3, #12
 80056cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056ce:	61ba      	str	r2, [r7, #24]
 80056d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d2:	6979      	ldr	r1, [r7, #20]
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	e841 2300 	strex	r3, r2, [r1]
 80056da:	613b      	str	r3, [r7, #16]
   return(result);
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1e5      	bne.n	80056ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2220      	movs	r2, #32
 80056e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80056f0:	bf00      	nop
 80056f2:	3754      	adds	r7, #84	@ 0x54
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005708:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f7ff fee4 	bl	80054e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800571c:	bf00      	nop
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b21      	cmp	r3, #33	@ 0x21
 8005736:	d13e      	bne.n	80057b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005740:	d114      	bne.n	800576c <UART_Transmit_IT+0x48>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d110      	bne.n	800576c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	461a      	mov	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800575e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	1c9a      	adds	r2, r3, #2
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	621a      	str	r2, [r3, #32]
 800576a:	e008      	b.n	800577e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	1c59      	adds	r1, r3, #1
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	6211      	str	r1, [r2, #32]
 8005776:	781a      	ldrb	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005782:	b29b      	uxth	r3, r3
 8005784:	3b01      	subs	r3, #1
 8005786:	b29b      	uxth	r3, r3
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	4619      	mov	r1, r3
 800578c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10f      	bne.n	80057b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68da      	ldr	r2, [r3, #12]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68da      	ldr	r2, [r3, #12]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80057b2:	2300      	movs	r3, #0
 80057b4:	e000      	b.n	80057b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80057b6:	2302      	movs	r3, #2
  }
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3714      	adds	r7, #20
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68da      	ldr	r2, [r3, #12]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2220      	movs	r2, #32
 80057e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f7ff fe73 	bl	80054d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3708      	adds	r7, #8
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b08c      	sub	sp, #48	@ 0x30
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b22      	cmp	r3, #34	@ 0x22
 8005806:	f040 80ae 	bne.w	8005966 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005812:	d117      	bne.n	8005844 <UART_Receive_IT+0x50>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d113      	bne.n	8005844 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800581c:	2300      	movs	r3, #0
 800581e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005824:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	b29b      	uxth	r3, r3
 800582e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005832:	b29a      	uxth	r2, r3
 8005834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005836:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800583c:	1c9a      	adds	r2, r3, #2
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	629a      	str	r2, [r3, #40]	@ 0x28
 8005842:	e026      	b.n	8005892 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005848:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800584a:	2300      	movs	r3, #0
 800584c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005856:	d007      	beq.n	8005868 <UART_Receive_IT+0x74>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10a      	bne.n	8005876 <UART_Receive_IT+0x82>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d106      	bne.n	8005876 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	b2da      	uxtb	r2, r3
 8005870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005872:	701a      	strb	r2, [r3, #0]
 8005874:	e008      	b.n	8005888 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	b2db      	uxtb	r3, r3
 800587e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005882:	b2da      	uxtb	r2, r3
 8005884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005886:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800588c:	1c5a      	adds	r2, r3, #1
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005896:	b29b      	uxth	r3, r3
 8005898:	3b01      	subs	r3, #1
 800589a:	b29b      	uxth	r3, r3
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	4619      	mov	r1, r3
 80058a0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d15d      	bne.n	8005962 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f022 0220 	bic.w	r2, r2, #32
 80058b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68da      	ldr	r2, [r3, #12]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80058c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	695a      	ldr	r2, [r3, #20]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f022 0201 	bic.w	r2, r2, #1
 80058d4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2220      	movs	r2, #32
 80058da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d135      	bne.n	8005958 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	330c      	adds	r3, #12
 80058f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	e853 3f00 	ldrex	r3, [r3]
 8005900:	613b      	str	r3, [r7, #16]
   return(result);
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	f023 0310 	bic.w	r3, r3, #16
 8005908:	627b      	str	r3, [r7, #36]	@ 0x24
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	330c      	adds	r3, #12
 8005910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005912:	623a      	str	r2, [r7, #32]
 8005914:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005916:	69f9      	ldr	r1, [r7, #28]
 8005918:	6a3a      	ldr	r2, [r7, #32]
 800591a:	e841 2300 	strex	r3, r2, [r1]
 800591e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1e5      	bne.n	80058f2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0310 	and.w	r3, r3, #16
 8005930:	2b10      	cmp	r3, #16
 8005932:	d10a      	bne.n	800594a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005934:	2300      	movs	r3, #0
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	60fb      	str	r3, [r7, #12]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800594e:	4619      	mov	r1, r3
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f7ff fdd1 	bl	80054f8 <HAL_UARTEx_RxEventCallback>
 8005956:	e002      	b.n	800595e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f7fb fdd3 	bl	8001504 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800595e:	2300      	movs	r3, #0
 8005960:	e002      	b.n	8005968 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	e000      	b.n	8005968 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005966:	2302      	movs	r3, #2
  }
}
 8005968:	4618      	mov	r0, r3
 800596a:	3730      	adds	r7, #48	@ 0x30
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005974:	b0c0      	sub	sp, #256	@ 0x100
 8005976:	af00      	add	r7, sp, #0
 8005978:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800597c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800598c:	68d9      	ldr	r1, [r3, #12]
 800598e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	ea40 0301 	orr.w	r3, r0, r1
 8005998:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800599a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800599e:	689a      	ldr	r2, [r3, #8]
 80059a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	431a      	orrs	r2, r3
 80059a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	431a      	orrs	r2, r3
 80059b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80059bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80059c8:	f021 010c 	bic.w	r1, r1, #12
 80059cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80059d6:	430b      	orrs	r3, r1
 80059d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80059e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ea:	6999      	ldr	r1, [r3, #24]
 80059ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	ea40 0301 	orr.w	r3, r0, r1
 80059f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	4b8f      	ldr	r3, [pc, #572]	@ (8005c3c <UART_SetConfig+0x2cc>)
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d005      	beq.n	8005a10 <UART_SetConfig+0xa0>
 8005a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	4b8d      	ldr	r3, [pc, #564]	@ (8005c40 <UART_SetConfig+0x2d0>)
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d104      	bne.n	8005a1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a10:	f7fe fabc 	bl	8003f8c <HAL_RCC_GetPCLK2Freq>
 8005a14:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005a18:	e003      	b.n	8005a22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a1a:	f7fe faa3 	bl	8003f64 <HAL_RCC_GetPCLK1Freq>
 8005a1e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a26:	69db      	ldr	r3, [r3, #28]
 8005a28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a2c:	f040 810c 	bne.w	8005c48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a34:	2200      	movs	r2, #0
 8005a36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a3a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005a3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005a42:	4622      	mov	r2, r4
 8005a44:	462b      	mov	r3, r5
 8005a46:	1891      	adds	r1, r2, r2
 8005a48:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005a4a:	415b      	adcs	r3, r3
 8005a4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005a52:	4621      	mov	r1, r4
 8005a54:	eb12 0801 	adds.w	r8, r2, r1
 8005a58:	4629      	mov	r1, r5
 8005a5a:	eb43 0901 	adc.w	r9, r3, r1
 8005a5e:	f04f 0200 	mov.w	r2, #0
 8005a62:	f04f 0300 	mov.w	r3, #0
 8005a66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a72:	4690      	mov	r8, r2
 8005a74:	4699      	mov	r9, r3
 8005a76:	4623      	mov	r3, r4
 8005a78:	eb18 0303 	adds.w	r3, r8, r3
 8005a7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a80:	462b      	mov	r3, r5
 8005a82:	eb49 0303 	adc.w	r3, r9, r3
 8005a86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a96:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005a9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	18db      	adds	r3, r3, r3
 8005aa2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	eb42 0303 	adc.w	r3, r2, r3
 8005aaa:	657b      	str	r3, [r7, #84]	@ 0x54
 8005aac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005ab0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ab4:	f7fb f8c8 	bl	8000c48 <__aeabi_uldivmod>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	460b      	mov	r3, r1
 8005abc:	4b61      	ldr	r3, [pc, #388]	@ (8005c44 <UART_SetConfig+0x2d4>)
 8005abe:	fba3 2302 	umull	r2, r3, r3, r2
 8005ac2:	095b      	lsrs	r3, r3, #5
 8005ac4:	011c      	lsls	r4, r3, #4
 8005ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005aca:	2200      	movs	r2, #0
 8005acc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ad0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005ad4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005ad8:	4642      	mov	r2, r8
 8005ada:	464b      	mov	r3, r9
 8005adc:	1891      	adds	r1, r2, r2
 8005ade:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005ae0:	415b      	adcs	r3, r3
 8005ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ae4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005ae8:	4641      	mov	r1, r8
 8005aea:	eb12 0a01 	adds.w	sl, r2, r1
 8005aee:	4649      	mov	r1, r9
 8005af0:	eb43 0b01 	adc.w	fp, r3, r1
 8005af4:	f04f 0200 	mov.w	r2, #0
 8005af8:	f04f 0300 	mov.w	r3, #0
 8005afc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b08:	4692      	mov	sl, r2
 8005b0a:	469b      	mov	fp, r3
 8005b0c:	4643      	mov	r3, r8
 8005b0e:	eb1a 0303 	adds.w	r3, sl, r3
 8005b12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b16:	464b      	mov	r3, r9
 8005b18:	eb4b 0303 	adc.w	r3, fp, r3
 8005b1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b2c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005b30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005b34:	460b      	mov	r3, r1
 8005b36:	18db      	adds	r3, r3, r3
 8005b38:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	eb42 0303 	adc.w	r3, r2, r3
 8005b40:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005b46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005b4a:	f7fb f87d 	bl	8000c48 <__aeabi_uldivmod>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	460b      	mov	r3, r1
 8005b52:	4611      	mov	r1, r2
 8005b54:	4b3b      	ldr	r3, [pc, #236]	@ (8005c44 <UART_SetConfig+0x2d4>)
 8005b56:	fba3 2301 	umull	r2, r3, r3, r1
 8005b5a:	095b      	lsrs	r3, r3, #5
 8005b5c:	2264      	movs	r2, #100	@ 0x64
 8005b5e:	fb02 f303 	mul.w	r3, r2, r3
 8005b62:	1acb      	subs	r3, r1, r3
 8005b64:	00db      	lsls	r3, r3, #3
 8005b66:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005b6a:	4b36      	ldr	r3, [pc, #216]	@ (8005c44 <UART_SetConfig+0x2d4>)
 8005b6c:	fba3 2302 	umull	r2, r3, r3, r2
 8005b70:	095b      	lsrs	r3, r3, #5
 8005b72:	005b      	lsls	r3, r3, #1
 8005b74:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005b78:	441c      	add	r4, r3
 8005b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b84:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005b88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005b8c:	4642      	mov	r2, r8
 8005b8e:	464b      	mov	r3, r9
 8005b90:	1891      	adds	r1, r2, r2
 8005b92:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005b94:	415b      	adcs	r3, r3
 8005b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005b9c:	4641      	mov	r1, r8
 8005b9e:	1851      	adds	r1, r2, r1
 8005ba0:	6339      	str	r1, [r7, #48]	@ 0x30
 8005ba2:	4649      	mov	r1, r9
 8005ba4:	414b      	adcs	r3, r1
 8005ba6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ba8:	f04f 0200 	mov.w	r2, #0
 8005bac:	f04f 0300 	mov.w	r3, #0
 8005bb0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005bb4:	4659      	mov	r1, fp
 8005bb6:	00cb      	lsls	r3, r1, #3
 8005bb8:	4651      	mov	r1, sl
 8005bba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bbe:	4651      	mov	r1, sl
 8005bc0:	00ca      	lsls	r2, r1, #3
 8005bc2:	4610      	mov	r0, r2
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	4642      	mov	r2, r8
 8005bca:	189b      	adds	r3, r3, r2
 8005bcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005bd0:	464b      	mov	r3, r9
 8005bd2:	460a      	mov	r2, r1
 8005bd4:	eb42 0303 	adc.w	r3, r2, r3
 8005bd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005be8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005bec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	18db      	adds	r3, r3, r3
 8005bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	eb42 0303 	adc.w	r3, r2, r3
 8005bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005c06:	f7fb f81f 	bl	8000c48 <__aeabi_uldivmod>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c44 <UART_SetConfig+0x2d4>)
 8005c10:	fba3 1302 	umull	r1, r3, r3, r2
 8005c14:	095b      	lsrs	r3, r3, #5
 8005c16:	2164      	movs	r1, #100	@ 0x64
 8005c18:	fb01 f303 	mul.w	r3, r1, r3
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	00db      	lsls	r3, r3, #3
 8005c20:	3332      	adds	r3, #50	@ 0x32
 8005c22:	4a08      	ldr	r2, [pc, #32]	@ (8005c44 <UART_SetConfig+0x2d4>)
 8005c24:	fba2 2303 	umull	r2, r3, r2, r3
 8005c28:	095b      	lsrs	r3, r3, #5
 8005c2a:	f003 0207 	and.w	r2, r3, #7
 8005c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4422      	add	r2, r4
 8005c36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c38:	e106      	b.n	8005e48 <UART_SetConfig+0x4d8>
 8005c3a:	bf00      	nop
 8005c3c:	40011000 	.word	0x40011000
 8005c40:	40011400 	.word	0x40011400
 8005c44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005c52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005c56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005c5a:	4642      	mov	r2, r8
 8005c5c:	464b      	mov	r3, r9
 8005c5e:	1891      	adds	r1, r2, r2
 8005c60:	6239      	str	r1, [r7, #32]
 8005c62:	415b      	adcs	r3, r3
 8005c64:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c6a:	4641      	mov	r1, r8
 8005c6c:	1854      	adds	r4, r2, r1
 8005c6e:	4649      	mov	r1, r9
 8005c70:	eb43 0501 	adc.w	r5, r3, r1
 8005c74:	f04f 0200 	mov.w	r2, #0
 8005c78:	f04f 0300 	mov.w	r3, #0
 8005c7c:	00eb      	lsls	r3, r5, #3
 8005c7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c82:	00e2      	lsls	r2, r4, #3
 8005c84:	4614      	mov	r4, r2
 8005c86:	461d      	mov	r5, r3
 8005c88:	4643      	mov	r3, r8
 8005c8a:	18e3      	adds	r3, r4, r3
 8005c8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005c90:	464b      	mov	r3, r9
 8005c92:	eb45 0303 	adc.w	r3, r5, r3
 8005c96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ca6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005caa:	f04f 0200 	mov.w	r2, #0
 8005cae:	f04f 0300 	mov.w	r3, #0
 8005cb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005cb6:	4629      	mov	r1, r5
 8005cb8:	008b      	lsls	r3, r1, #2
 8005cba:	4621      	mov	r1, r4
 8005cbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cc0:	4621      	mov	r1, r4
 8005cc2:	008a      	lsls	r2, r1, #2
 8005cc4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005cc8:	f7fa ffbe 	bl	8000c48 <__aeabi_uldivmod>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	460b      	mov	r3, r1
 8005cd0:	4b60      	ldr	r3, [pc, #384]	@ (8005e54 <UART_SetConfig+0x4e4>)
 8005cd2:	fba3 2302 	umull	r2, r3, r3, r2
 8005cd6:	095b      	lsrs	r3, r3, #5
 8005cd8:	011c      	lsls	r4, r3, #4
 8005cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ce4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005ce8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005cec:	4642      	mov	r2, r8
 8005cee:	464b      	mov	r3, r9
 8005cf0:	1891      	adds	r1, r2, r2
 8005cf2:	61b9      	str	r1, [r7, #24]
 8005cf4:	415b      	adcs	r3, r3
 8005cf6:	61fb      	str	r3, [r7, #28]
 8005cf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cfc:	4641      	mov	r1, r8
 8005cfe:	1851      	adds	r1, r2, r1
 8005d00:	6139      	str	r1, [r7, #16]
 8005d02:	4649      	mov	r1, r9
 8005d04:	414b      	adcs	r3, r1
 8005d06:	617b      	str	r3, [r7, #20]
 8005d08:	f04f 0200 	mov.w	r2, #0
 8005d0c:	f04f 0300 	mov.w	r3, #0
 8005d10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d14:	4659      	mov	r1, fp
 8005d16:	00cb      	lsls	r3, r1, #3
 8005d18:	4651      	mov	r1, sl
 8005d1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d1e:	4651      	mov	r1, sl
 8005d20:	00ca      	lsls	r2, r1, #3
 8005d22:	4610      	mov	r0, r2
 8005d24:	4619      	mov	r1, r3
 8005d26:	4603      	mov	r3, r0
 8005d28:	4642      	mov	r2, r8
 8005d2a:	189b      	adds	r3, r3, r2
 8005d2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d30:	464b      	mov	r3, r9
 8005d32:	460a      	mov	r2, r1
 8005d34:	eb42 0303 	adc.w	r3, r2, r3
 8005d38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d46:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005d48:	f04f 0200 	mov.w	r2, #0
 8005d4c:	f04f 0300 	mov.w	r3, #0
 8005d50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005d54:	4649      	mov	r1, r9
 8005d56:	008b      	lsls	r3, r1, #2
 8005d58:	4641      	mov	r1, r8
 8005d5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d5e:	4641      	mov	r1, r8
 8005d60:	008a      	lsls	r2, r1, #2
 8005d62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005d66:	f7fa ff6f 	bl	8000c48 <__aeabi_uldivmod>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	4611      	mov	r1, r2
 8005d70:	4b38      	ldr	r3, [pc, #224]	@ (8005e54 <UART_SetConfig+0x4e4>)
 8005d72:	fba3 2301 	umull	r2, r3, r3, r1
 8005d76:	095b      	lsrs	r3, r3, #5
 8005d78:	2264      	movs	r2, #100	@ 0x64
 8005d7a:	fb02 f303 	mul.w	r3, r2, r3
 8005d7e:	1acb      	subs	r3, r1, r3
 8005d80:	011b      	lsls	r3, r3, #4
 8005d82:	3332      	adds	r3, #50	@ 0x32
 8005d84:	4a33      	ldr	r2, [pc, #204]	@ (8005e54 <UART_SetConfig+0x4e4>)
 8005d86:	fba2 2303 	umull	r2, r3, r2, r3
 8005d8a:	095b      	lsrs	r3, r3, #5
 8005d8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d90:	441c      	add	r4, r3
 8005d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d96:	2200      	movs	r2, #0
 8005d98:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d9a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005d9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005da0:	4642      	mov	r2, r8
 8005da2:	464b      	mov	r3, r9
 8005da4:	1891      	adds	r1, r2, r2
 8005da6:	60b9      	str	r1, [r7, #8]
 8005da8:	415b      	adcs	r3, r3
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005db0:	4641      	mov	r1, r8
 8005db2:	1851      	adds	r1, r2, r1
 8005db4:	6039      	str	r1, [r7, #0]
 8005db6:	4649      	mov	r1, r9
 8005db8:	414b      	adcs	r3, r1
 8005dba:	607b      	str	r3, [r7, #4]
 8005dbc:	f04f 0200 	mov.w	r2, #0
 8005dc0:	f04f 0300 	mov.w	r3, #0
 8005dc4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005dc8:	4659      	mov	r1, fp
 8005dca:	00cb      	lsls	r3, r1, #3
 8005dcc:	4651      	mov	r1, sl
 8005dce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dd2:	4651      	mov	r1, sl
 8005dd4:	00ca      	lsls	r2, r1, #3
 8005dd6:	4610      	mov	r0, r2
 8005dd8:	4619      	mov	r1, r3
 8005dda:	4603      	mov	r3, r0
 8005ddc:	4642      	mov	r2, r8
 8005dde:	189b      	adds	r3, r3, r2
 8005de0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005de2:	464b      	mov	r3, r9
 8005de4:	460a      	mov	r2, r1
 8005de6:	eb42 0303 	adc.w	r3, r2, r3
 8005dea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	663b      	str	r3, [r7, #96]	@ 0x60
 8005df6:	667a      	str	r2, [r7, #100]	@ 0x64
 8005df8:	f04f 0200 	mov.w	r2, #0
 8005dfc:	f04f 0300 	mov.w	r3, #0
 8005e00:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005e04:	4649      	mov	r1, r9
 8005e06:	008b      	lsls	r3, r1, #2
 8005e08:	4641      	mov	r1, r8
 8005e0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e0e:	4641      	mov	r1, r8
 8005e10:	008a      	lsls	r2, r1, #2
 8005e12:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005e16:	f7fa ff17 	bl	8000c48 <__aeabi_uldivmod>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e54 <UART_SetConfig+0x4e4>)
 8005e20:	fba3 1302 	umull	r1, r3, r3, r2
 8005e24:	095b      	lsrs	r3, r3, #5
 8005e26:	2164      	movs	r1, #100	@ 0x64
 8005e28:	fb01 f303 	mul.w	r3, r1, r3
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	011b      	lsls	r3, r3, #4
 8005e30:	3332      	adds	r3, #50	@ 0x32
 8005e32:	4a08      	ldr	r2, [pc, #32]	@ (8005e54 <UART_SetConfig+0x4e4>)
 8005e34:	fba2 2303 	umull	r2, r3, r2, r3
 8005e38:	095b      	lsrs	r3, r3, #5
 8005e3a:	f003 020f 	and.w	r2, r3, #15
 8005e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4422      	add	r2, r4
 8005e46:	609a      	str	r2, [r3, #8]
}
 8005e48:	bf00      	nop
 8005e4a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e54:	51eb851f 	.word	0x51eb851f

08005e58 <sulp>:
 8005e58:	b570      	push	{r4, r5, r6, lr}
 8005e5a:	4604      	mov	r4, r0
 8005e5c:	460d      	mov	r5, r1
 8005e5e:	ec45 4b10 	vmov	d0, r4, r5
 8005e62:	4616      	mov	r6, r2
 8005e64:	f002 f960 	bl	8008128 <__ulp>
 8005e68:	ec51 0b10 	vmov	r0, r1, d0
 8005e6c:	b17e      	cbz	r6, 8005e8e <sulp+0x36>
 8005e6e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005e72:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	dd09      	ble.n	8005e8e <sulp+0x36>
 8005e7a:	051b      	lsls	r3, r3, #20
 8005e7c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005e80:	2400      	movs	r4, #0
 8005e82:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005e86:	4622      	mov	r2, r4
 8005e88:	462b      	mov	r3, r5
 8005e8a:	f7fa fbbd 	bl	8000608 <__aeabi_dmul>
 8005e8e:	ec41 0b10 	vmov	d0, r0, r1
 8005e92:	bd70      	pop	{r4, r5, r6, pc}
 8005e94:	0000      	movs	r0, r0
	...

08005e98 <_strtod_l>:
 8005e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e9c:	b09f      	sub	sp, #124	@ 0x7c
 8005e9e:	460c      	mov	r4, r1
 8005ea0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	921a      	str	r2, [sp, #104]	@ 0x68
 8005ea6:	9005      	str	r0, [sp, #20]
 8005ea8:	f04f 0a00 	mov.w	sl, #0
 8005eac:	f04f 0b00 	mov.w	fp, #0
 8005eb0:	460a      	mov	r2, r1
 8005eb2:	9219      	str	r2, [sp, #100]	@ 0x64
 8005eb4:	7811      	ldrb	r1, [r2, #0]
 8005eb6:	292b      	cmp	r1, #43	@ 0x2b
 8005eb8:	d04a      	beq.n	8005f50 <_strtod_l+0xb8>
 8005eba:	d838      	bhi.n	8005f2e <_strtod_l+0x96>
 8005ebc:	290d      	cmp	r1, #13
 8005ebe:	d832      	bhi.n	8005f26 <_strtod_l+0x8e>
 8005ec0:	2908      	cmp	r1, #8
 8005ec2:	d832      	bhi.n	8005f2a <_strtod_l+0x92>
 8005ec4:	2900      	cmp	r1, #0
 8005ec6:	d03b      	beq.n	8005f40 <_strtod_l+0xa8>
 8005ec8:	2200      	movs	r2, #0
 8005eca:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005ecc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005ece:	782a      	ldrb	r2, [r5, #0]
 8005ed0:	2a30      	cmp	r2, #48	@ 0x30
 8005ed2:	f040 80b3 	bne.w	800603c <_strtod_l+0x1a4>
 8005ed6:	786a      	ldrb	r2, [r5, #1]
 8005ed8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005edc:	2a58      	cmp	r2, #88	@ 0x58
 8005ede:	d16e      	bne.n	8005fbe <_strtod_l+0x126>
 8005ee0:	9302      	str	r3, [sp, #8]
 8005ee2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ee4:	9301      	str	r3, [sp, #4]
 8005ee6:	ab1a      	add	r3, sp, #104	@ 0x68
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	4a8e      	ldr	r2, [pc, #568]	@ (8006124 <_strtod_l+0x28c>)
 8005eec:	9805      	ldr	r0, [sp, #20]
 8005eee:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005ef0:	a919      	add	r1, sp, #100	@ 0x64
 8005ef2:	f001 fa0b 	bl	800730c <__gethex>
 8005ef6:	f010 060f 	ands.w	r6, r0, #15
 8005efa:	4604      	mov	r4, r0
 8005efc:	d005      	beq.n	8005f0a <_strtod_l+0x72>
 8005efe:	2e06      	cmp	r6, #6
 8005f00:	d128      	bne.n	8005f54 <_strtod_l+0xbc>
 8005f02:	3501      	adds	r5, #1
 8005f04:	2300      	movs	r3, #0
 8005f06:	9519      	str	r5, [sp, #100]	@ 0x64
 8005f08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f040 858e 	bne.w	8006a2e <_strtod_l+0xb96>
 8005f12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f14:	b1cb      	cbz	r3, 8005f4a <_strtod_l+0xb2>
 8005f16:	4652      	mov	r2, sl
 8005f18:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8005f1c:	ec43 2b10 	vmov	d0, r2, r3
 8005f20:	b01f      	add	sp, #124	@ 0x7c
 8005f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f26:	2920      	cmp	r1, #32
 8005f28:	d1ce      	bne.n	8005ec8 <_strtod_l+0x30>
 8005f2a:	3201      	adds	r2, #1
 8005f2c:	e7c1      	b.n	8005eb2 <_strtod_l+0x1a>
 8005f2e:	292d      	cmp	r1, #45	@ 0x2d
 8005f30:	d1ca      	bne.n	8005ec8 <_strtod_l+0x30>
 8005f32:	2101      	movs	r1, #1
 8005f34:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005f36:	1c51      	adds	r1, r2, #1
 8005f38:	9119      	str	r1, [sp, #100]	@ 0x64
 8005f3a:	7852      	ldrb	r2, [r2, #1]
 8005f3c:	2a00      	cmp	r2, #0
 8005f3e:	d1c5      	bne.n	8005ecc <_strtod_l+0x34>
 8005f40:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005f42:	9419      	str	r4, [sp, #100]	@ 0x64
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f040 8570 	bne.w	8006a2a <_strtod_l+0xb92>
 8005f4a:	4652      	mov	r2, sl
 8005f4c:	465b      	mov	r3, fp
 8005f4e:	e7e5      	b.n	8005f1c <_strtod_l+0x84>
 8005f50:	2100      	movs	r1, #0
 8005f52:	e7ef      	b.n	8005f34 <_strtod_l+0x9c>
 8005f54:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005f56:	b13a      	cbz	r2, 8005f68 <_strtod_l+0xd0>
 8005f58:	2135      	movs	r1, #53	@ 0x35
 8005f5a:	a81c      	add	r0, sp, #112	@ 0x70
 8005f5c:	f002 f9de 	bl	800831c <__copybits>
 8005f60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005f62:	9805      	ldr	r0, [sp, #20]
 8005f64:	f001 fdac 	bl	8007ac0 <_Bfree>
 8005f68:	3e01      	subs	r6, #1
 8005f6a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005f6c:	2e04      	cmp	r6, #4
 8005f6e:	d806      	bhi.n	8005f7e <_strtod_l+0xe6>
 8005f70:	e8df f006 	tbb	[pc, r6]
 8005f74:	201d0314 	.word	0x201d0314
 8005f78:	14          	.byte	0x14
 8005f79:	00          	.byte	0x00
 8005f7a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005f7e:	05e1      	lsls	r1, r4, #23
 8005f80:	bf48      	it	mi
 8005f82:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005f86:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005f8a:	0d1b      	lsrs	r3, r3, #20
 8005f8c:	051b      	lsls	r3, r3, #20
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1bb      	bne.n	8005f0a <_strtod_l+0x72>
 8005f92:	f001 f8a1 	bl	80070d8 <__errno>
 8005f96:	2322      	movs	r3, #34	@ 0x22
 8005f98:	6003      	str	r3, [r0, #0]
 8005f9a:	e7b6      	b.n	8005f0a <_strtod_l+0x72>
 8005f9c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005fa0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005fa4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005fa8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005fac:	e7e7      	b.n	8005f7e <_strtod_l+0xe6>
 8005fae:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800612c <_strtod_l+0x294>
 8005fb2:	e7e4      	b.n	8005f7e <_strtod_l+0xe6>
 8005fb4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005fb8:	f04f 3aff 	mov.w	sl, #4294967295
 8005fbc:	e7df      	b.n	8005f7e <_strtod_l+0xe6>
 8005fbe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005fc0:	1c5a      	adds	r2, r3, #1
 8005fc2:	9219      	str	r2, [sp, #100]	@ 0x64
 8005fc4:	785b      	ldrb	r3, [r3, #1]
 8005fc6:	2b30      	cmp	r3, #48	@ 0x30
 8005fc8:	d0f9      	beq.n	8005fbe <_strtod_l+0x126>
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d09d      	beq.n	8005f0a <_strtod_l+0x72>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005fd4:	930c      	str	r3, [sp, #48]	@ 0x30
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	9308      	str	r3, [sp, #32]
 8005fda:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fdc:	461f      	mov	r7, r3
 8005fde:	220a      	movs	r2, #10
 8005fe0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005fe2:	7805      	ldrb	r5, [r0, #0]
 8005fe4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005fe8:	b2d9      	uxtb	r1, r3
 8005fea:	2909      	cmp	r1, #9
 8005fec:	d928      	bls.n	8006040 <_strtod_l+0x1a8>
 8005fee:	494e      	ldr	r1, [pc, #312]	@ (8006128 <_strtod_l+0x290>)
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f000 ffbc 	bl	8006f6e <strncmp>
 8005ff6:	2800      	cmp	r0, #0
 8005ff8:	d032      	beq.n	8006060 <_strtod_l+0x1c8>
 8005ffa:	2000      	movs	r0, #0
 8005ffc:	462a      	mov	r2, r5
 8005ffe:	4681      	mov	r9, r0
 8006000:	463d      	mov	r5, r7
 8006002:	4603      	mov	r3, r0
 8006004:	2a65      	cmp	r2, #101	@ 0x65
 8006006:	d001      	beq.n	800600c <_strtod_l+0x174>
 8006008:	2a45      	cmp	r2, #69	@ 0x45
 800600a:	d114      	bne.n	8006036 <_strtod_l+0x19e>
 800600c:	b91d      	cbnz	r5, 8006016 <_strtod_l+0x17e>
 800600e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006010:	4302      	orrs	r2, r0
 8006012:	d095      	beq.n	8005f40 <_strtod_l+0xa8>
 8006014:	2500      	movs	r5, #0
 8006016:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006018:	1c62      	adds	r2, r4, #1
 800601a:	9219      	str	r2, [sp, #100]	@ 0x64
 800601c:	7862      	ldrb	r2, [r4, #1]
 800601e:	2a2b      	cmp	r2, #43	@ 0x2b
 8006020:	d077      	beq.n	8006112 <_strtod_l+0x27a>
 8006022:	2a2d      	cmp	r2, #45	@ 0x2d
 8006024:	d07b      	beq.n	800611e <_strtod_l+0x286>
 8006026:	f04f 0c00 	mov.w	ip, #0
 800602a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800602e:	2909      	cmp	r1, #9
 8006030:	f240 8082 	bls.w	8006138 <_strtod_l+0x2a0>
 8006034:	9419      	str	r4, [sp, #100]	@ 0x64
 8006036:	f04f 0800 	mov.w	r8, #0
 800603a:	e0a2      	b.n	8006182 <_strtod_l+0x2ea>
 800603c:	2300      	movs	r3, #0
 800603e:	e7c7      	b.n	8005fd0 <_strtod_l+0x138>
 8006040:	2f08      	cmp	r7, #8
 8006042:	bfd5      	itete	le
 8006044:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006046:	9908      	ldrgt	r1, [sp, #32]
 8006048:	fb02 3301 	mlale	r3, r2, r1, r3
 800604c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006050:	f100 0001 	add.w	r0, r0, #1
 8006054:	bfd4      	ite	le
 8006056:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006058:	9308      	strgt	r3, [sp, #32]
 800605a:	3701      	adds	r7, #1
 800605c:	9019      	str	r0, [sp, #100]	@ 0x64
 800605e:	e7bf      	b.n	8005fe0 <_strtod_l+0x148>
 8006060:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006062:	1c5a      	adds	r2, r3, #1
 8006064:	9219      	str	r2, [sp, #100]	@ 0x64
 8006066:	785a      	ldrb	r2, [r3, #1]
 8006068:	b37f      	cbz	r7, 80060ca <_strtod_l+0x232>
 800606a:	4681      	mov	r9, r0
 800606c:	463d      	mov	r5, r7
 800606e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006072:	2b09      	cmp	r3, #9
 8006074:	d912      	bls.n	800609c <_strtod_l+0x204>
 8006076:	2301      	movs	r3, #1
 8006078:	e7c4      	b.n	8006004 <_strtod_l+0x16c>
 800607a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006080:	785a      	ldrb	r2, [r3, #1]
 8006082:	3001      	adds	r0, #1
 8006084:	2a30      	cmp	r2, #48	@ 0x30
 8006086:	d0f8      	beq.n	800607a <_strtod_l+0x1e2>
 8006088:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800608c:	2b08      	cmp	r3, #8
 800608e:	f200 84d3 	bhi.w	8006a38 <_strtod_l+0xba0>
 8006092:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006094:	930c      	str	r3, [sp, #48]	@ 0x30
 8006096:	4681      	mov	r9, r0
 8006098:	2000      	movs	r0, #0
 800609a:	4605      	mov	r5, r0
 800609c:	3a30      	subs	r2, #48	@ 0x30
 800609e:	f100 0301 	add.w	r3, r0, #1
 80060a2:	d02a      	beq.n	80060fa <_strtod_l+0x262>
 80060a4:	4499      	add	r9, r3
 80060a6:	eb00 0c05 	add.w	ip, r0, r5
 80060aa:	462b      	mov	r3, r5
 80060ac:	210a      	movs	r1, #10
 80060ae:	4563      	cmp	r3, ip
 80060b0:	d10d      	bne.n	80060ce <_strtod_l+0x236>
 80060b2:	1c69      	adds	r1, r5, #1
 80060b4:	4401      	add	r1, r0
 80060b6:	4428      	add	r0, r5
 80060b8:	2808      	cmp	r0, #8
 80060ba:	dc16      	bgt.n	80060ea <_strtod_l+0x252>
 80060bc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80060be:	230a      	movs	r3, #10
 80060c0:	fb03 2300 	mla	r3, r3, r0, r2
 80060c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80060c6:	2300      	movs	r3, #0
 80060c8:	e018      	b.n	80060fc <_strtod_l+0x264>
 80060ca:	4638      	mov	r0, r7
 80060cc:	e7da      	b.n	8006084 <_strtod_l+0x1ec>
 80060ce:	2b08      	cmp	r3, #8
 80060d0:	f103 0301 	add.w	r3, r3, #1
 80060d4:	dc03      	bgt.n	80060de <_strtod_l+0x246>
 80060d6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80060d8:	434e      	muls	r6, r1
 80060da:	960a      	str	r6, [sp, #40]	@ 0x28
 80060dc:	e7e7      	b.n	80060ae <_strtod_l+0x216>
 80060de:	2b10      	cmp	r3, #16
 80060e0:	bfde      	ittt	le
 80060e2:	9e08      	ldrle	r6, [sp, #32]
 80060e4:	434e      	mulle	r6, r1
 80060e6:	9608      	strle	r6, [sp, #32]
 80060e8:	e7e1      	b.n	80060ae <_strtod_l+0x216>
 80060ea:	280f      	cmp	r0, #15
 80060ec:	dceb      	bgt.n	80060c6 <_strtod_l+0x22e>
 80060ee:	9808      	ldr	r0, [sp, #32]
 80060f0:	230a      	movs	r3, #10
 80060f2:	fb03 2300 	mla	r3, r3, r0, r2
 80060f6:	9308      	str	r3, [sp, #32]
 80060f8:	e7e5      	b.n	80060c6 <_strtod_l+0x22e>
 80060fa:	4629      	mov	r1, r5
 80060fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80060fe:	1c50      	adds	r0, r2, #1
 8006100:	9019      	str	r0, [sp, #100]	@ 0x64
 8006102:	7852      	ldrb	r2, [r2, #1]
 8006104:	4618      	mov	r0, r3
 8006106:	460d      	mov	r5, r1
 8006108:	e7b1      	b.n	800606e <_strtod_l+0x1d6>
 800610a:	f04f 0900 	mov.w	r9, #0
 800610e:	2301      	movs	r3, #1
 8006110:	e77d      	b.n	800600e <_strtod_l+0x176>
 8006112:	f04f 0c00 	mov.w	ip, #0
 8006116:	1ca2      	adds	r2, r4, #2
 8006118:	9219      	str	r2, [sp, #100]	@ 0x64
 800611a:	78a2      	ldrb	r2, [r4, #2]
 800611c:	e785      	b.n	800602a <_strtod_l+0x192>
 800611e:	f04f 0c01 	mov.w	ip, #1
 8006122:	e7f8      	b.n	8006116 <_strtod_l+0x27e>
 8006124:	08008f04 	.word	0x08008f04
 8006128:	08008ee0 	.word	0x08008ee0
 800612c:	7ff00000 	.word	0x7ff00000
 8006130:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006132:	1c51      	adds	r1, r2, #1
 8006134:	9119      	str	r1, [sp, #100]	@ 0x64
 8006136:	7852      	ldrb	r2, [r2, #1]
 8006138:	2a30      	cmp	r2, #48	@ 0x30
 800613a:	d0f9      	beq.n	8006130 <_strtod_l+0x298>
 800613c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006140:	2908      	cmp	r1, #8
 8006142:	f63f af78 	bhi.w	8006036 <_strtod_l+0x19e>
 8006146:	3a30      	subs	r2, #48	@ 0x30
 8006148:	920e      	str	r2, [sp, #56]	@ 0x38
 800614a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800614c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800614e:	f04f 080a 	mov.w	r8, #10
 8006152:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006154:	1c56      	adds	r6, r2, #1
 8006156:	9619      	str	r6, [sp, #100]	@ 0x64
 8006158:	7852      	ldrb	r2, [r2, #1]
 800615a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800615e:	f1be 0f09 	cmp.w	lr, #9
 8006162:	d939      	bls.n	80061d8 <_strtod_l+0x340>
 8006164:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006166:	1a76      	subs	r6, r6, r1
 8006168:	2e08      	cmp	r6, #8
 800616a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800616e:	dc03      	bgt.n	8006178 <_strtod_l+0x2e0>
 8006170:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006172:	4588      	cmp	r8, r1
 8006174:	bfa8      	it	ge
 8006176:	4688      	movge	r8, r1
 8006178:	f1bc 0f00 	cmp.w	ip, #0
 800617c:	d001      	beq.n	8006182 <_strtod_l+0x2ea>
 800617e:	f1c8 0800 	rsb	r8, r8, #0
 8006182:	2d00      	cmp	r5, #0
 8006184:	d14e      	bne.n	8006224 <_strtod_l+0x38c>
 8006186:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006188:	4308      	orrs	r0, r1
 800618a:	f47f aebe 	bne.w	8005f0a <_strtod_l+0x72>
 800618e:	2b00      	cmp	r3, #0
 8006190:	f47f aed6 	bne.w	8005f40 <_strtod_l+0xa8>
 8006194:	2a69      	cmp	r2, #105	@ 0x69
 8006196:	d028      	beq.n	80061ea <_strtod_l+0x352>
 8006198:	dc25      	bgt.n	80061e6 <_strtod_l+0x34e>
 800619a:	2a49      	cmp	r2, #73	@ 0x49
 800619c:	d025      	beq.n	80061ea <_strtod_l+0x352>
 800619e:	2a4e      	cmp	r2, #78	@ 0x4e
 80061a0:	f47f aece 	bne.w	8005f40 <_strtod_l+0xa8>
 80061a4:	499b      	ldr	r1, [pc, #620]	@ (8006414 <_strtod_l+0x57c>)
 80061a6:	a819      	add	r0, sp, #100	@ 0x64
 80061a8:	f001 fad2 	bl	8007750 <__match>
 80061ac:	2800      	cmp	r0, #0
 80061ae:	f43f aec7 	beq.w	8005f40 <_strtod_l+0xa8>
 80061b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	2b28      	cmp	r3, #40	@ 0x28
 80061b8:	d12e      	bne.n	8006218 <_strtod_l+0x380>
 80061ba:	4997      	ldr	r1, [pc, #604]	@ (8006418 <_strtod_l+0x580>)
 80061bc:	aa1c      	add	r2, sp, #112	@ 0x70
 80061be:	a819      	add	r0, sp, #100	@ 0x64
 80061c0:	f001 fada 	bl	8007778 <__hexnan>
 80061c4:	2805      	cmp	r0, #5
 80061c6:	d127      	bne.n	8006218 <_strtod_l+0x380>
 80061c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80061ca:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80061ce:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80061d2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80061d6:	e698      	b.n	8005f0a <_strtod_l+0x72>
 80061d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80061da:	fb08 2101 	mla	r1, r8, r1, r2
 80061de:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80061e2:	920e      	str	r2, [sp, #56]	@ 0x38
 80061e4:	e7b5      	b.n	8006152 <_strtod_l+0x2ba>
 80061e6:	2a6e      	cmp	r2, #110	@ 0x6e
 80061e8:	e7da      	b.n	80061a0 <_strtod_l+0x308>
 80061ea:	498c      	ldr	r1, [pc, #560]	@ (800641c <_strtod_l+0x584>)
 80061ec:	a819      	add	r0, sp, #100	@ 0x64
 80061ee:	f001 faaf 	bl	8007750 <__match>
 80061f2:	2800      	cmp	r0, #0
 80061f4:	f43f aea4 	beq.w	8005f40 <_strtod_l+0xa8>
 80061f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80061fa:	4989      	ldr	r1, [pc, #548]	@ (8006420 <_strtod_l+0x588>)
 80061fc:	3b01      	subs	r3, #1
 80061fe:	a819      	add	r0, sp, #100	@ 0x64
 8006200:	9319      	str	r3, [sp, #100]	@ 0x64
 8006202:	f001 faa5 	bl	8007750 <__match>
 8006206:	b910      	cbnz	r0, 800620e <_strtod_l+0x376>
 8006208:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800620a:	3301      	adds	r3, #1
 800620c:	9319      	str	r3, [sp, #100]	@ 0x64
 800620e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8006430 <_strtod_l+0x598>
 8006212:	f04f 0a00 	mov.w	sl, #0
 8006216:	e678      	b.n	8005f0a <_strtod_l+0x72>
 8006218:	4882      	ldr	r0, [pc, #520]	@ (8006424 <_strtod_l+0x58c>)
 800621a:	f000 ff99 	bl	8007150 <nan>
 800621e:	ec5b ab10 	vmov	sl, fp, d0
 8006222:	e672      	b.n	8005f0a <_strtod_l+0x72>
 8006224:	eba8 0309 	sub.w	r3, r8, r9
 8006228:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800622a:	9309      	str	r3, [sp, #36]	@ 0x24
 800622c:	2f00      	cmp	r7, #0
 800622e:	bf08      	it	eq
 8006230:	462f      	moveq	r7, r5
 8006232:	2d10      	cmp	r5, #16
 8006234:	462c      	mov	r4, r5
 8006236:	bfa8      	it	ge
 8006238:	2410      	movge	r4, #16
 800623a:	f7fa f96b 	bl	8000514 <__aeabi_ui2d>
 800623e:	2d09      	cmp	r5, #9
 8006240:	4682      	mov	sl, r0
 8006242:	468b      	mov	fp, r1
 8006244:	dc13      	bgt.n	800626e <_strtod_l+0x3d6>
 8006246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006248:	2b00      	cmp	r3, #0
 800624a:	f43f ae5e 	beq.w	8005f0a <_strtod_l+0x72>
 800624e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006250:	dd78      	ble.n	8006344 <_strtod_l+0x4ac>
 8006252:	2b16      	cmp	r3, #22
 8006254:	dc5f      	bgt.n	8006316 <_strtod_l+0x47e>
 8006256:	4974      	ldr	r1, [pc, #464]	@ (8006428 <_strtod_l+0x590>)
 8006258:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800625c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006260:	4652      	mov	r2, sl
 8006262:	465b      	mov	r3, fp
 8006264:	f7fa f9d0 	bl	8000608 <__aeabi_dmul>
 8006268:	4682      	mov	sl, r0
 800626a:	468b      	mov	fp, r1
 800626c:	e64d      	b.n	8005f0a <_strtod_l+0x72>
 800626e:	4b6e      	ldr	r3, [pc, #440]	@ (8006428 <_strtod_l+0x590>)
 8006270:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006274:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006278:	f7fa f9c6 	bl	8000608 <__aeabi_dmul>
 800627c:	4682      	mov	sl, r0
 800627e:	9808      	ldr	r0, [sp, #32]
 8006280:	468b      	mov	fp, r1
 8006282:	f7fa f947 	bl	8000514 <__aeabi_ui2d>
 8006286:	4602      	mov	r2, r0
 8006288:	460b      	mov	r3, r1
 800628a:	4650      	mov	r0, sl
 800628c:	4659      	mov	r1, fp
 800628e:	f7fa f805 	bl	800029c <__adddf3>
 8006292:	2d0f      	cmp	r5, #15
 8006294:	4682      	mov	sl, r0
 8006296:	468b      	mov	fp, r1
 8006298:	ddd5      	ble.n	8006246 <_strtod_l+0x3ae>
 800629a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800629c:	1b2c      	subs	r4, r5, r4
 800629e:	441c      	add	r4, r3
 80062a0:	2c00      	cmp	r4, #0
 80062a2:	f340 8096 	ble.w	80063d2 <_strtod_l+0x53a>
 80062a6:	f014 030f 	ands.w	r3, r4, #15
 80062aa:	d00a      	beq.n	80062c2 <_strtod_l+0x42a>
 80062ac:	495e      	ldr	r1, [pc, #376]	@ (8006428 <_strtod_l+0x590>)
 80062ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80062b2:	4652      	mov	r2, sl
 80062b4:	465b      	mov	r3, fp
 80062b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062ba:	f7fa f9a5 	bl	8000608 <__aeabi_dmul>
 80062be:	4682      	mov	sl, r0
 80062c0:	468b      	mov	fp, r1
 80062c2:	f034 040f 	bics.w	r4, r4, #15
 80062c6:	d073      	beq.n	80063b0 <_strtod_l+0x518>
 80062c8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80062cc:	dd48      	ble.n	8006360 <_strtod_l+0x4c8>
 80062ce:	2400      	movs	r4, #0
 80062d0:	46a0      	mov	r8, r4
 80062d2:	940a      	str	r4, [sp, #40]	@ 0x28
 80062d4:	46a1      	mov	r9, r4
 80062d6:	9a05      	ldr	r2, [sp, #20]
 80062d8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8006430 <_strtod_l+0x598>
 80062dc:	2322      	movs	r3, #34	@ 0x22
 80062de:	6013      	str	r3, [r2, #0]
 80062e0:	f04f 0a00 	mov.w	sl, #0
 80062e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f43f ae0f 	beq.w	8005f0a <_strtod_l+0x72>
 80062ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80062ee:	9805      	ldr	r0, [sp, #20]
 80062f0:	f001 fbe6 	bl	8007ac0 <_Bfree>
 80062f4:	9805      	ldr	r0, [sp, #20]
 80062f6:	4649      	mov	r1, r9
 80062f8:	f001 fbe2 	bl	8007ac0 <_Bfree>
 80062fc:	9805      	ldr	r0, [sp, #20]
 80062fe:	4641      	mov	r1, r8
 8006300:	f001 fbde 	bl	8007ac0 <_Bfree>
 8006304:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006306:	9805      	ldr	r0, [sp, #20]
 8006308:	f001 fbda 	bl	8007ac0 <_Bfree>
 800630c:	9805      	ldr	r0, [sp, #20]
 800630e:	4621      	mov	r1, r4
 8006310:	f001 fbd6 	bl	8007ac0 <_Bfree>
 8006314:	e5f9      	b.n	8005f0a <_strtod_l+0x72>
 8006316:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006318:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800631c:	4293      	cmp	r3, r2
 800631e:	dbbc      	blt.n	800629a <_strtod_l+0x402>
 8006320:	4c41      	ldr	r4, [pc, #260]	@ (8006428 <_strtod_l+0x590>)
 8006322:	f1c5 050f 	rsb	r5, r5, #15
 8006326:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800632a:	4652      	mov	r2, sl
 800632c:	465b      	mov	r3, fp
 800632e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006332:	f7fa f969 	bl	8000608 <__aeabi_dmul>
 8006336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006338:	1b5d      	subs	r5, r3, r5
 800633a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800633e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006342:	e78f      	b.n	8006264 <_strtod_l+0x3cc>
 8006344:	3316      	adds	r3, #22
 8006346:	dba8      	blt.n	800629a <_strtod_l+0x402>
 8006348:	4b37      	ldr	r3, [pc, #220]	@ (8006428 <_strtod_l+0x590>)
 800634a:	eba9 0808 	sub.w	r8, r9, r8
 800634e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006352:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006356:	4650      	mov	r0, sl
 8006358:	4659      	mov	r1, fp
 800635a:	f7fa fa7f 	bl	800085c <__aeabi_ddiv>
 800635e:	e783      	b.n	8006268 <_strtod_l+0x3d0>
 8006360:	4b32      	ldr	r3, [pc, #200]	@ (800642c <_strtod_l+0x594>)
 8006362:	9308      	str	r3, [sp, #32]
 8006364:	2300      	movs	r3, #0
 8006366:	1124      	asrs	r4, r4, #4
 8006368:	4650      	mov	r0, sl
 800636a:	4659      	mov	r1, fp
 800636c:	461e      	mov	r6, r3
 800636e:	2c01      	cmp	r4, #1
 8006370:	dc21      	bgt.n	80063b6 <_strtod_l+0x51e>
 8006372:	b10b      	cbz	r3, 8006378 <_strtod_l+0x4e0>
 8006374:	4682      	mov	sl, r0
 8006376:	468b      	mov	fp, r1
 8006378:	492c      	ldr	r1, [pc, #176]	@ (800642c <_strtod_l+0x594>)
 800637a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800637e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006382:	4652      	mov	r2, sl
 8006384:	465b      	mov	r3, fp
 8006386:	e9d1 0100 	ldrd	r0, r1, [r1]
 800638a:	f7fa f93d 	bl	8000608 <__aeabi_dmul>
 800638e:	4b28      	ldr	r3, [pc, #160]	@ (8006430 <_strtod_l+0x598>)
 8006390:	460a      	mov	r2, r1
 8006392:	400b      	ands	r3, r1
 8006394:	4927      	ldr	r1, [pc, #156]	@ (8006434 <_strtod_l+0x59c>)
 8006396:	428b      	cmp	r3, r1
 8006398:	4682      	mov	sl, r0
 800639a:	d898      	bhi.n	80062ce <_strtod_l+0x436>
 800639c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80063a0:	428b      	cmp	r3, r1
 80063a2:	bf86      	itte	hi
 80063a4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8006438 <_strtod_l+0x5a0>
 80063a8:	f04f 3aff 	movhi.w	sl, #4294967295
 80063ac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80063b0:	2300      	movs	r3, #0
 80063b2:	9308      	str	r3, [sp, #32]
 80063b4:	e07a      	b.n	80064ac <_strtod_l+0x614>
 80063b6:	07e2      	lsls	r2, r4, #31
 80063b8:	d505      	bpl.n	80063c6 <_strtod_l+0x52e>
 80063ba:	9b08      	ldr	r3, [sp, #32]
 80063bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c0:	f7fa f922 	bl	8000608 <__aeabi_dmul>
 80063c4:	2301      	movs	r3, #1
 80063c6:	9a08      	ldr	r2, [sp, #32]
 80063c8:	3208      	adds	r2, #8
 80063ca:	3601      	adds	r6, #1
 80063cc:	1064      	asrs	r4, r4, #1
 80063ce:	9208      	str	r2, [sp, #32]
 80063d0:	e7cd      	b.n	800636e <_strtod_l+0x4d6>
 80063d2:	d0ed      	beq.n	80063b0 <_strtod_l+0x518>
 80063d4:	4264      	negs	r4, r4
 80063d6:	f014 020f 	ands.w	r2, r4, #15
 80063da:	d00a      	beq.n	80063f2 <_strtod_l+0x55a>
 80063dc:	4b12      	ldr	r3, [pc, #72]	@ (8006428 <_strtod_l+0x590>)
 80063de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063e2:	4650      	mov	r0, sl
 80063e4:	4659      	mov	r1, fp
 80063e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ea:	f7fa fa37 	bl	800085c <__aeabi_ddiv>
 80063ee:	4682      	mov	sl, r0
 80063f0:	468b      	mov	fp, r1
 80063f2:	1124      	asrs	r4, r4, #4
 80063f4:	d0dc      	beq.n	80063b0 <_strtod_l+0x518>
 80063f6:	2c1f      	cmp	r4, #31
 80063f8:	dd20      	ble.n	800643c <_strtod_l+0x5a4>
 80063fa:	2400      	movs	r4, #0
 80063fc:	46a0      	mov	r8, r4
 80063fe:	940a      	str	r4, [sp, #40]	@ 0x28
 8006400:	46a1      	mov	r9, r4
 8006402:	9a05      	ldr	r2, [sp, #20]
 8006404:	2322      	movs	r3, #34	@ 0x22
 8006406:	f04f 0a00 	mov.w	sl, #0
 800640a:	f04f 0b00 	mov.w	fp, #0
 800640e:	6013      	str	r3, [r2, #0]
 8006410:	e768      	b.n	80062e4 <_strtod_l+0x44c>
 8006412:	bf00      	nop
 8006414:	08008eeb 	.word	0x08008eeb
 8006418:	08008ef0 	.word	0x08008ef0
 800641c:	08008ee2 	.word	0x08008ee2
 8006420:	08008ee5 	.word	0x08008ee5
 8006424:	080090f5 	.word	0x080090f5
 8006428:	080091f8 	.word	0x080091f8
 800642c:	080091d0 	.word	0x080091d0
 8006430:	7ff00000 	.word	0x7ff00000
 8006434:	7ca00000 	.word	0x7ca00000
 8006438:	7fefffff 	.word	0x7fefffff
 800643c:	f014 0310 	ands.w	r3, r4, #16
 8006440:	bf18      	it	ne
 8006442:	236a      	movne	r3, #106	@ 0x6a
 8006444:	4ea9      	ldr	r6, [pc, #676]	@ (80066ec <_strtod_l+0x854>)
 8006446:	9308      	str	r3, [sp, #32]
 8006448:	4650      	mov	r0, sl
 800644a:	4659      	mov	r1, fp
 800644c:	2300      	movs	r3, #0
 800644e:	07e2      	lsls	r2, r4, #31
 8006450:	d504      	bpl.n	800645c <_strtod_l+0x5c4>
 8006452:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006456:	f7fa f8d7 	bl	8000608 <__aeabi_dmul>
 800645a:	2301      	movs	r3, #1
 800645c:	1064      	asrs	r4, r4, #1
 800645e:	f106 0608 	add.w	r6, r6, #8
 8006462:	d1f4      	bne.n	800644e <_strtod_l+0x5b6>
 8006464:	b10b      	cbz	r3, 800646a <_strtod_l+0x5d2>
 8006466:	4682      	mov	sl, r0
 8006468:	468b      	mov	fp, r1
 800646a:	9b08      	ldr	r3, [sp, #32]
 800646c:	b1b3      	cbz	r3, 800649c <_strtod_l+0x604>
 800646e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006472:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006476:	2b00      	cmp	r3, #0
 8006478:	4659      	mov	r1, fp
 800647a:	dd0f      	ble.n	800649c <_strtod_l+0x604>
 800647c:	2b1f      	cmp	r3, #31
 800647e:	dd55      	ble.n	800652c <_strtod_l+0x694>
 8006480:	2b34      	cmp	r3, #52	@ 0x34
 8006482:	bfde      	ittt	le
 8006484:	f04f 33ff 	movle.w	r3, #4294967295
 8006488:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800648c:	4093      	lslle	r3, r2
 800648e:	f04f 0a00 	mov.w	sl, #0
 8006492:	bfcc      	ite	gt
 8006494:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006498:	ea03 0b01 	andle.w	fp, r3, r1
 800649c:	2200      	movs	r2, #0
 800649e:	2300      	movs	r3, #0
 80064a0:	4650      	mov	r0, sl
 80064a2:	4659      	mov	r1, fp
 80064a4:	f7fa fb18 	bl	8000ad8 <__aeabi_dcmpeq>
 80064a8:	2800      	cmp	r0, #0
 80064aa:	d1a6      	bne.n	80063fa <_strtod_l+0x562>
 80064ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80064b2:	9805      	ldr	r0, [sp, #20]
 80064b4:	462b      	mov	r3, r5
 80064b6:	463a      	mov	r2, r7
 80064b8:	f001 fb6a 	bl	8007b90 <__s2b>
 80064bc:	900a      	str	r0, [sp, #40]	@ 0x28
 80064be:	2800      	cmp	r0, #0
 80064c0:	f43f af05 	beq.w	80062ce <_strtod_l+0x436>
 80064c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064c6:	2a00      	cmp	r2, #0
 80064c8:	eba9 0308 	sub.w	r3, r9, r8
 80064cc:	bfa8      	it	ge
 80064ce:	2300      	movge	r3, #0
 80064d0:	9312      	str	r3, [sp, #72]	@ 0x48
 80064d2:	2400      	movs	r4, #0
 80064d4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80064d8:	9316      	str	r3, [sp, #88]	@ 0x58
 80064da:	46a0      	mov	r8, r4
 80064dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064de:	9805      	ldr	r0, [sp, #20]
 80064e0:	6859      	ldr	r1, [r3, #4]
 80064e2:	f001 faad 	bl	8007a40 <_Balloc>
 80064e6:	4681      	mov	r9, r0
 80064e8:	2800      	cmp	r0, #0
 80064ea:	f43f aef4 	beq.w	80062d6 <_strtod_l+0x43e>
 80064ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064f0:	691a      	ldr	r2, [r3, #16]
 80064f2:	3202      	adds	r2, #2
 80064f4:	f103 010c 	add.w	r1, r3, #12
 80064f8:	0092      	lsls	r2, r2, #2
 80064fa:	300c      	adds	r0, #12
 80064fc:	f000 fe19 	bl	8007132 <memcpy>
 8006500:	ec4b ab10 	vmov	d0, sl, fp
 8006504:	9805      	ldr	r0, [sp, #20]
 8006506:	aa1c      	add	r2, sp, #112	@ 0x70
 8006508:	a91b      	add	r1, sp, #108	@ 0x6c
 800650a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800650e:	f001 fe7b 	bl	8008208 <__d2b>
 8006512:	901a      	str	r0, [sp, #104]	@ 0x68
 8006514:	2800      	cmp	r0, #0
 8006516:	f43f aede 	beq.w	80062d6 <_strtod_l+0x43e>
 800651a:	9805      	ldr	r0, [sp, #20]
 800651c:	2101      	movs	r1, #1
 800651e:	f001 fbcd 	bl	8007cbc <__i2b>
 8006522:	4680      	mov	r8, r0
 8006524:	b948      	cbnz	r0, 800653a <_strtod_l+0x6a2>
 8006526:	f04f 0800 	mov.w	r8, #0
 800652a:	e6d4      	b.n	80062d6 <_strtod_l+0x43e>
 800652c:	f04f 32ff 	mov.w	r2, #4294967295
 8006530:	fa02 f303 	lsl.w	r3, r2, r3
 8006534:	ea03 0a0a 	and.w	sl, r3, sl
 8006538:	e7b0      	b.n	800649c <_strtod_l+0x604>
 800653a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800653c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800653e:	2d00      	cmp	r5, #0
 8006540:	bfab      	itete	ge
 8006542:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006544:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006546:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006548:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800654a:	bfac      	ite	ge
 800654c:	18ef      	addge	r7, r5, r3
 800654e:	1b5e      	sublt	r6, r3, r5
 8006550:	9b08      	ldr	r3, [sp, #32]
 8006552:	1aed      	subs	r5, r5, r3
 8006554:	4415      	add	r5, r2
 8006556:	4b66      	ldr	r3, [pc, #408]	@ (80066f0 <_strtod_l+0x858>)
 8006558:	3d01      	subs	r5, #1
 800655a:	429d      	cmp	r5, r3
 800655c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006560:	da50      	bge.n	8006604 <_strtod_l+0x76c>
 8006562:	1b5b      	subs	r3, r3, r5
 8006564:	2b1f      	cmp	r3, #31
 8006566:	eba2 0203 	sub.w	r2, r2, r3
 800656a:	f04f 0101 	mov.w	r1, #1
 800656e:	dc3d      	bgt.n	80065ec <_strtod_l+0x754>
 8006570:	fa01 f303 	lsl.w	r3, r1, r3
 8006574:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006576:	2300      	movs	r3, #0
 8006578:	9310      	str	r3, [sp, #64]	@ 0x40
 800657a:	18bd      	adds	r5, r7, r2
 800657c:	9b08      	ldr	r3, [sp, #32]
 800657e:	42af      	cmp	r7, r5
 8006580:	4416      	add	r6, r2
 8006582:	441e      	add	r6, r3
 8006584:	463b      	mov	r3, r7
 8006586:	bfa8      	it	ge
 8006588:	462b      	movge	r3, r5
 800658a:	42b3      	cmp	r3, r6
 800658c:	bfa8      	it	ge
 800658e:	4633      	movge	r3, r6
 8006590:	2b00      	cmp	r3, #0
 8006592:	bfc2      	ittt	gt
 8006594:	1aed      	subgt	r5, r5, r3
 8006596:	1af6      	subgt	r6, r6, r3
 8006598:	1aff      	subgt	r7, r7, r3
 800659a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800659c:	2b00      	cmp	r3, #0
 800659e:	dd16      	ble.n	80065ce <_strtod_l+0x736>
 80065a0:	4641      	mov	r1, r8
 80065a2:	9805      	ldr	r0, [sp, #20]
 80065a4:	461a      	mov	r2, r3
 80065a6:	f001 fc49 	bl	8007e3c <__pow5mult>
 80065aa:	4680      	mov	r8, r0
 80065ac:	2800      	cmp	r0, #0
 80065ae:	d0ba      	beq.n	8006526 <_strtod_l+0x68e>
 80065b0:	4601      	mov	r1, r0
 80065b2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80065b4:	9805      	ldr	r0, [sp, #20]
 80065b6:	f001 fb97 	bl	8007ce8 <__multiply>
 80065ba:	900e      	str	r0, [sp, #56]	@ 0x38
 80065bc:	2800      	cmp	r0, #0
 80065be:	f43f ae8a 	beq.w	80062d6 <_strtod_l+0x43e>
 80065c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80065c4:	9805      	ldr	r0, [sp, #20]
 80065c6:	f001 fa7b 	bl	8007ac0 <_Bfree>
 80065ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80065ce:	2d00      	cmp	r5, #0
 80065d0:	dc1d      	bgt.n	800660e <_strtod_l+0x776>
 80065d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	dd23      	ble.n	8006620 <_strtod_l+0x788>
 80065d8:	4649      	mov	r1, r9
 80065da:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80065dc:	9805      	ldr	r0, [sp, #20]
 80065de:	f001 fc2d 	bl	8007e3c <__pow5mult>
 80065e2:	4681      	mov	r9, r0
 80065e4:	b9e0      	cbnz	r0, 8006620 <_strtod_l+0x788>
 80065e6:	f04f 0900 	mov.w	r9, #0
 80065ea:	e674      	b.n	80062d6 <_strtod_l+0x43e>
 80065ec:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80065f0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80065f4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80065f8:	35e2      	adds	r5, #226	@ 0xe2
 80065fa:	fa01 f305 	lsl.w	r3, r1, r5
 80065fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8006600:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006602:	e7ba      	b.n	800657a <_strtod_l+0x6e2>
 8006604:	2300      	movs	r3, #0
 8006606:	9310      	str	r3, [sp, #64]	@ 0x40
 8006608:	2301      	movs	r3, #1
 800660a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800660c:	e7b5      	b.n	800657a <_strtod_l+0x6e2>
 800660e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006610:	9805      	ldr	r0, [sp, #20]
 8006612:	462a      	mov	r2, r5
 8006614:	f001 fc6c 	bl	8007ef0 <__lshift>
 8006618:	901a      	str	r0, [sp, #104]	@ 0x68
 800661a:	2800      	cmp	r0, #0
 800661c:	d1d9      	bne.n	80065d2 <_strtod_l+0x73a>
 800661e:	e65a      	b.n	80062d6 <_strtod_l+0x43e>
 8006620:	2e00      	cmp	r6, #0
 8006622:	dd07      	ble.n	8006634 <_strtod_l+0x79c>
 8006624:	4649      	mov	r1, r9
 8006626:	9805      	ldr	r0, [sp, #20]
 8006628:	4632      	mov	r2, r6
 800662a:	f001 fc61 	bl	8007ef0 <__lshift>
 800662e:	4681      	mov	r9, r0
 8006630:	2800      	cmp	r0, #0
 8006632:	d0d8      	beq.n	80065e6 <_strtod_l+0x74e>
 8006634:	2f00      	cmp	r7, #0
 8006636:	dd08      	ble.n	800664a <_strtod_l+0x7b2>
 8006638:	4641      	mov	r1, r8
 800663a:	9805      	ldr	r0, [sp, #20]
 800663c:	463a      	mov	r2, r7
 800663e:	f001 fc57 	bl	8007ef0 <__lshift>
 8006642:	4680      	mov	r8, r0
 8006644:	2800      	cmp	r0, #0
 8006646:	f43f ae46 	beq.w	80062d6 <_strtod_l+0x43e>
 800664a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800664c:	9805      	ldr	r0, [sp, #20]
 800664e:	464a      	mov	r2, r9
 8006650:	f001 fcd6 	bl	8008000 <__mdiff>
 8006654:	4604      	mov	r4, r0
 8006656:	2800      	cmp	r0, #0
 8006658:	f43f ae3d 	beq.w	80062d6 <_strtod_l+0x43e>
 800665c:	68c3      	ldr	r3, [r0, #12]
 800665e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006660:	2300      	movs	r3, #0
 8006662:	60c3      	str	r3, [r0, #12]
 8006664:	4641      	mov	r1, r8
 8006666:	f001 fcaf 	bl	8007fc8 <__mcmp>
 800666a:	2800      	cmp	r0, #0
 800666c:	da46      	bge.n	80066fc <_strtod_l+0x864>
 800666e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006670:	ea53 030a 	orrs.w	r3, r3, sl
 8006674:	d16c      	bne.n	8006750 <_strtod_l+0x8b8>
 8006676:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800667a:	2b00      	cmp	r3, #0
 800667c:	d168      	bne.n	8006750 <_strtod_l+0x8b8>
 800667e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006682:	0d1b      	lsrs	r3, r3, #20
 8006684:	051b      	lsls	r3, r3, #20
 8006686:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800668a:	d961      	bls.n	8006750 <_strtod_l+0x8b8>
 800668c:	6963      	ldr	r3, [r4, #20]
 800668e:	b913      	cbnz	r3, 8006696 <_strtod_l+0x7fe>
 8006690:	6923      	ldr	r3, [r4, #16]
 8006692:	2b01      	cmp	r3, #1
 8006694:	dd5c      	ble.n	8006750 <_strtod_l+0x8b8>
 8006696:	4621      	mov	r1, r4
 8006698:	2201      	movs	r2, #1
 800669a:	9805      	ldr	r0, [sp, #20]
 800669c:	f001 fc28 	bl	8007ef0 <__lshift>
 80066a0:	4641      	mov	r1, r8
 80066a2:	4604      	mov	r4, r0
 80066a4:	f001 fc90 	bl	8007fc8 <__mcmp>
 80066a8:	2800      	cmp	r0, #0
 80066aa:	dd51      	ble.n	8006750 <_strtod_l+0x8b8>
 80066ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80066b0:	9a08      	ldr	r2, [sp, #32]
 80066b2:	0d1b      	lsrs	r3, r3, #20
 80066b4:	051b      	lsls	r3, r3, #20
 80066b6:	2a00      	cmp	r2, #0
 80066b8:	d06b      	beq.n	8006792 <_strtod_l+0x8fa>
 80066ba:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80066be:	d868      	bhi.n	8006792 <_strtod_l+0x8fa>
 80066c0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80066c4:	f67f ae9d 	bls.w	8006402 <_strtod_l+0x56a>
 80066c8:	4b0a      	ldr	r3, [pc, #40]	@ (80066f4 <_strtod_l+0x85c>)
 80066ca:	4650      	mov	r0, sl
 80066cc:	4659      	mov	r1, fp
 80066ce:	2200      	movs	r2, #0
 80066d0:	f7f9 ff9a 	bl	8000608 <__aeabi_dmul>
 80066d4:	4b08      	ldr	r3, [pc, #32]	@ (80066f8 <_strtod_l+0x860>)
 80066d6:	400b      	ands	r3, r1
 80066d8:	4682      	mov	sl, r0
 80066da:	468b      	mov	fp, r1
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f47f ae05 	bne.w	80062ec <_strtod_l+0x454>
 80066e2:	9a05      	ldr	r2, [sp, #20]
 80066e4:	2322      	movs	r3, #34	@ 0x22
 80066e6:	6013      	str	r3, [r2, #0]
 80066e8:	e600      	b.n	80062ec <_strtod_l+0x454>
 80066ea:	bf00      	nop
 80066ec:	08008f18 	.word	0x08008f18
 80066f0:	fffffc02 	.word	0xfffffc02
 80066f4:	39500000 	.word	0x39500000
 80066f8:	7ff00000 	.word	0x7ff00000
 80066fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006700:	d165      	bne.n	80067ce <_strtod_l+0x936>
 8006702:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006704:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006708:	b35a      	cbz	r2, 8006762 <_strtod_l+0x8ca>
 800670a:	4a9f      	ldr	r2, [pc, #636]	@ (8006988 <_strtod_l+0xaf0>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d12b      	bne.n	8006768 <_strtod_l+0x8d0>
 8006710:	9b08      	ldr	r3, [sp, #32]
 8006712:	4651      	mov	r1, sl
 8006714:	b303      	cbz	r3, 8006758 <_strtod_l+0x8c0>
 8006716:	4b9d      	ldr	r3, [pc, #628]	@ (800698c <_strtod_l+0xaf4>)
 8006718:	465a      	mov	r2, fp
 800671a:	4013      	ands	r3, r2
 800671c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006720:	f04f 32ff 	mov.w	r2, #4294967295
 8006724:	d81b      	bhi.n	800675e <_strtod_l+0x8c6>
 8006726:	0d1b      	lsrs	r3, r3, #20
 8006728:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800672c:	fa02 f303 	lsl.w	r3, r2, r3
 8006730:	4299      	cmp	r1, r3
 8006732:	d119      	bne.n	8006768 <_strtod_l+0x8d0>
 8006734:	4b96      	ldr	r3, [pc, #600]	@ (8006990 <_strtod_l+0xaf8>)
 8006736:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006738:	429a      	cmp	r2, r3
 800673a:	d102      	bne.n	8006742 <_strtod_l+0x8aa>
 800673c:	3101      	adds	r1, #1
 800673e:	f43f adca 	beq.w	80062d6 <_strtod_l+0x43e>
 8006742:	4b92      	ldr	r3, [pc, #584]	@ (800698c <_strtod_l+0xaf4>)
 8006744:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006746:	401a      	ands	r2, r3
 8006748:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800674c:	f04f 0a00 	mov.w	sl, #0
 8006750:	9b08      	ldr	r3, [sp, #32]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1b8      	bne.n	80066c8 <_strtod_l+0x830>
 8006756:	e5c9      	b.n	80062ec <_strtod_l+0x454>
 8006758:	f04f 33ff 	mov.w	r3, #4294967295
 800675c:	e7e8      	b.n	8006730 <_strtod_l+0x898>
 800675e:	4613      	mov	r3, r2
 8006760:	e7e6      	b.n	8006730 <_strtod_l+0x898>
 8006762:	ea53 030a 	orrs.w	r3, r3, sl
 8006766:	d0a1      	beq.n	80066ac <_strtod_l+0x814>
 8006768:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800676a:	b1db      	cbz	r3, 80067a4 <_strtod_l+0x90c>
 800676c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800676e:	4213      	tst	r3, r2
 8006770:	d0ee      	beq.n	8006750 <_strtod_l+0x8b8>
 8006772:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006774:	9a08      	ldr	r2, [sp, #32]
 8006776:	4650      	mov	r0, sl
 8006778:	4659      	mov	r1, fp
 800677a:	b1bb      	cbz	r3, 80067ac <_strtod_l+0x914>
 800677c:	f7ff fb6c 	bl	8005e58 <sulp>
 8006780:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006784:	ec53 2b10 	vmov	r2, r3, d0
 8006788:	f7f9 fd88 	bl	800029c <__adddf3>
 800678c:	4682      	mov	sl, r0
 800678e:	468b      	mov	fp, r1
 8006790:	e7de      	b.n	8006750 <_strtod_l+0x8b8>
 8006792:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006796:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800679a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800679e:	f04f 3aff 	mov.w	sl, #4294967295
 80067a2:	e7d5      	b.n	8006750 <_strtod_l+0x8b8>
 80067a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80067a6:	ea13 0f0a 	tst.w	r3, sl
 80067aa:	e7e1      	b.n	8006770 <_strtod_l+0x8d8>
 80067ac:	f7ff fb54 	bl	8005e58 <sulp>
 80067b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067b4:	ec53 2b10 	vmov	r2, r3, d0
 80067b8:	f7f9 fd6e 	bl	8000298 <__aeabi_dsub>
 80067bc:	2200      	movs	r2, #0
 80067be:	2300      	movs	r3, #0
 80067c0:	4682      	mov	sl, r0
 80067c2:	468b      	mov	fp, r1
 80067c4:	f7fa f988 	bl	8000ad8 <__aeabi_dcmpeq>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	d0c1      	beq.n	8006750 <_strtod_l+0x8b8>
 80067cc:	e619      	b.n	8006402 <_strtod_l+0x56a>
 80067ce:	4641      	mov	r1, r8
 80067d0:	4620      	mov	r0, r4
 80067d2:	f001 fd71 	bl	80082b8 <__ratio>
 80067d6:	ec57 6b10 	vmov	r6, r7, d0
 80067da:	2200      	movs	r2, #0
 80067dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80067e0:	4630      	mov	r0, r6
 80067e2:	4639      	mov	r1, r7
 80067e4:	f7fa f98c 	bl	8000b00 <__aeabi_dcmple>
 80067e8:	2800      	cmp	r0, #0
 80067ea:	d06f      	beq.n	80068cc <_strtod_l+0xa34>
 80067ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d17a      	bne.n	80068e8 <_strtod_l+0xa50>
 80067f2:	f1ba 0f00 	cmp.w	sl, #0
 80067f6:	d158      	bne.n	80068aa <_strtod_l+0xa12>
 80067f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d15a      	bne.n	80068b8 <_strtod_l+0xa20>
 8006802:	4b64      	ldr	r3, [pc, #400]	@ (8006994 <_strtod_l+0xafc>)
 8006804:	2200      	movs	r2, #0
 8006806:	4630      	mov	r0, r6
 8006808:	4639      	mov	r1, r7
 800680a:	f7fa f96f 	bl	8000aec <__aeabi_dcmplt>
 800680e:	2800      	cmp	r0, #0
 8006810:	d159      	bne.n	80068c6 <_strtod_l+0xa2e>
 8006812:	4630      	mov	r0, r6
 8006814:	4639      	mov	r1, r7
 8006816:	4b60      	ldr	r3, [pc, #384]	@ (8006998 <_strtod_l+0xb00>)
 8006818:	2200      	movs	r2, #0
 800681a:	f7f9 fef5 	bl	8000608 <__aeabi_dmul>
 800681e:	4606      	mov	r6, r0
 8006820:	460f      	mov	r7, r1
 8006822:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006826:	9606      	str	r6, [sp, #24]
 8006828:	9307      	str	r3, [sp, #28]
 800682a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800682e:	4d57      	ldr	r5, [pc, #348]	@ (800698c <_strtod_l+0xaf4>)
 8006830:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006834:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006836:	401d      	ands	r5, r3
 8006838:	4b58      	ldr	r3, [pc, #352]	@ (800699c <_strtod_l+0xb04>)
 800683a:	429d      	cmp	r5, r3
 800683c:	f040 80b2 	bne.w	80069a4 <_strtod_l+0xb0c>
 8006840:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006842:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006846:	ec4b ab10 	vmov	d0, sl, fp
 800684a:	f001 fc6d 	bl	8008128 <__ulp>
 800684e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006852:	ec51 0b10 	vmov	r0, r1, d0
 8006856:	f7f9 fed7 	bl	8000608 <__aeabi_dmul>
 800685a:	4652      	mov	r2, sl
 800685c:	465b      	mov	r3, fp
 800685e:	f7f9 fd1d 	bl	800029c <__adddf3>
 8006862:	460b      	mov	r3, r1
 8006864:	4949      	ldr	r1, [pc, #292]	@ (800698c <_strtod_l+0xaf4>)
 8006866:	4a4e      	ldr	r2, [pc, #312]	@ (80069a0 <_strtod_l+0xb08>)
 8006868:	4019      	ands	r1, r3
 800686a:	4291      	cmp	r1, r2
 800686c:	4682      	mov	sl, r0
 800686e:	d942      	bls.n	80068f6 <_strtod_l+0xa5e>
 8006870:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006872:	4b47      	ldr	r3, [pc, #284]	@ (8006990 <_strtod_l+0xaf8>)
 8006874:	429a      	cmp	r2, r3
 8006876:	d103      	bne.n	8006880 <_strtod_l+0x9e8>
 8006878:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800687a:	3301      	adds	r3, #1
 800687c:	f43f ad2b 	beq.w	80062d6 <_strtod_l+0x43e>
 8006880:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8006990 <_strtod_l+0xaf8>
 8006884:	f04f 3aff 	mov.w	sl, #4294967295
 8006888:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800688a:	9805      	ldr	r0, [sp, #20]
 800688c:	f001 f918 	bl	8007ac0 <_Bfree>
 8006890:	9805      	ldr	r0, [sp, #20]
 8006892:	4649      	mov	r1, r9
 8006894:	f001 f914 	bl	8007ac0 <_Bfree>
 8006898:	9805      	ldr	r0, [sp, #20]
 800689a:	4641      	mov	r1, r8
 800689c:	f001 f910 	bl	8007ac0 <_Bfree>
 80068a0:	9805      	ldr	r0, [sp, #20]
 80068a2:	4621      	mov	r1, r4
 80068a4:	f001 f90c 	bl	8007ac0 <_Bfree>
 80068a8:	e618      	b.n	80064dc <_strtod_l+0x644>
 80068aa:	f1ba 0f01 	cmp.w	sl, #1
 80068ae:	d103      	bne.n	80068b8 <_strtod_l+0xa20>
 80068b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f43f ada5 	beq.w	8006402 <_strtod_l+0x56a>
 80068b8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8006968 <_strtod_l+0xad0>
 80068bc:	4f35      	ldr	r7, [pc, #212]	@ (8006994 <_strtod_l+0xafc>)
 80068be:	ed8d 7b06 	vstr	d7, [sp, #24]
 80068c2:	2600      	movs	r6, #0
 80068c4:	e7b1      	b.n	800682a <_strtod_l+0x992>
 80068c6:	4f34      	ldr	r7, [pc, #208]	@ (8006998 <_strtod_l+0xb00>)
 80068c8:	2600      	movs	r6, #0
 80068ca:	e7aa      	b.n	8006822 <_strtod_l+0x98a>
 80068cc:	4b32      	ldr	r3, [pc, #200]	@ (8006998 <_strtod_l+0xb00>)
 80068ce:	4630      	mov	r0, r6
 80068d0:	4639      	mov	r1, r7
 80068d2:	2200      	movs	r2, #0
 80068d4:	f7f9 fe98 	bl	8000608 <__aeabi_dmul>
 80068d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068da:	4606      	mov	r6, r0
 80068dc:	460f      	mov	r7, r1
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d09f      	beq.n	8006822 <_strtod_l+0x98a>
 80068e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80068e6:	e7a0      	b.n	800682a <_strtod_l+0x992>
 80068e8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8006970 <_strtod_l+0xad8>
 80068ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80068f0:	ec57 6b17 	vmov	r6, r7, d7
 80068f4:	e799      	b.n	800682a <_strtod_l+0x992>
 80068f6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80068fa:	9b08      	ldr	r3, [sp, #32]
 80068fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1c1      	bne.n	8006888 <_strtod_l+0x9f0>
 8006904:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006908:	0d1b      	lsrs	r3, r3, #20
 800690a:	051b      	lsls	r3, r3, #20
 800690c:	429d      	cmp	r5, r3
 800690e:	d1bb      	bne.n	8006888 <_strtod_l+0x9f0>
 8006910:	4630      	mov	r0, r6
 8006912:	4639      	mov	r1, r7
 8006914:	f7fa f9b0 	bl	8000c78 <__aeabi_d2lz>
 8006918:	f7f9 fe48 	bl	80005ac <__aeabi_l2d>
 800691c:	4602      	mov	r2, r0
 800691e:	460b      	mov	r3, r1
 8006920:	4630      	mov	r0, r6
 8006922:	4639      	mov	r1, r7
 8006924:	f7f9 fcb8 	bl	8000298 <__aeabi_dsub>
 8006928:	460b      	mov	r3, r1
 800692a:	4602      	mov	r2, r0
 800692c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006930:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006934:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006936:	ea46 060a 	orr.w	r6, r6, sl
 800693a:	431e      	orrs	r6, r3
 800693c:	d06f      	beq.n	8006a1e <_strtod_l+0xb86>
 800693e:	a30e      	add	r3, pc, #56	@ (adr r3, 8006978 <_strtod_l+0xae0>)
 8006940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006944:	f7fa f8d2 	bl	8000aec <__aeabi_dcmplt>
 8006948:	2800      	cmp	r0, #0
 800694a:	f47f accf 	bne.w	80062ec <_strtod_l+0x454>
 800694e:	a30c      	add	r3, pc, #48	@ (adr r3, 8006980 <_strtod_l+0xae8>)
 8006950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006954:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006958:	f7fa f8e6 	bl	8000b28 <__aeabi_dcmpgt>
 800695c:	2800      	cmp	r0, #0
 800695e:	d093      	beq.n	8006888 <_strtod_l+0x9f0>
 8006960:	e4c4      	b.n	80062ec <_strtod_l+0x454>
 8006962:	bf00      	nop
 8006964:	f3af 8000 	nop.w
 8006968:	00000000 	.word	0x00000000
 800696c:	bff00000 	.word	0xbff00000
 8006970:	00000000 	.word	0x00000000
 8006974:	3ff00000 	.word	0x3ff00000
 8006978:	94a03595 	.word	0x94a03595
 800697c:	3fdfffff 	.word	0x3fdfffff
 8006980:	35afe535 	.word	0x35afe535
 8006984:	3fe00000 	.word	0x3fe00000
 8006988:	000fffff 	.word	0x000fffff
 800698c:	7ff00000 	.word	0x7ff00000
 8006990:	7fefffff 	.word	0x7fefffff
 8006994:	3ff00000 	.word	0x3ff00000
 8006998:	3fe00000 	.word	0x3fe00000
 800699c:	7fe00000 	.word	0x7fe00000
 80069a0:	7c9fffff 	.word	0x7c9fffff
 80069a4:	9b08      	ldr	r3, [sp, #32]
 80069a6:	b323      	cbz	r3, 80069f2 <_strtod_l+0xb5a>
 80069a8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80069ac:	d821      	bhi.n	80069f2 <_strtod_l+0xb5a>
 80069ae:	a328      	add	r3, pc, #160	@ (adr r3, 8006a50 <_strtod_l+0xbb8>)
 80069b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b4:	4630      	mov	r0, r6
 80069b6:	4639      	mov	r1, r7
 80069b8:	f7fa f8a2 	bl	8000b00 <__aeabi_dcmple>
 80069bc:	b1a0      	cbz	r0, 80069e8 <_strtod_l+0xb50>
 80069be:	4639      	mov	r1, r7
 80069c0:	4630      	mov	r0, r6
 80069c2:	f7fa f8d1 	bl	8000b68 <__aeabi_d2uiz>
 80069c6:	2801      	cmp	r0, #1
 80069c8:	bf38      	it	cc
 80069ca:	2001      	movcc	r0, #1
 80069cc:	f7f9 fda2 	bl	8000514 <__aeabi_ui2d>
 80069d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069d2:	4606      	mov	r6, r0
 80069d4:	460f      	mov	r7, r1
 80069d6:	b9fb      	cbnz	r3, 8006a18 <_strtod_l+0xb80>
 80069d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80069dc:	9014      	str	r0, [sp, #80]	@ 0x50
 80069de:	9315      	str	r3, [sp, #84]	@ 0x54
 80069e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80069e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80069e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80069ea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80069ee:	1b5b      	subs	r3, r3, r5
 80069f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80069f2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80069f6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80069fa:	f001 fb95 	bl	8008128 <__ulp>
 80069fe:	4650      	mov	r0, sl
 8006a00:	ec53 2b10 	vmov	r2, r3, d0
 8006a04:	4659      	mov	r1, fp
 8006a06:	f7f9 fdff 	bl	8000608 <__aeabi_dmul>
 8006a0a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006a0e:	f7f9 fc45 	bl	800029c <__adddf3>
 8006a12:	4682      	mov	sl, r0
 8006a14:	468b      	mov	fp, r1
 8006a16:	e770      	b.n	80068fa <_strtod_l+0xa62>
 8006a18:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006a1c:	e7e0      	b.n	80069e0 <_strtod_l+0xb48>
 8006a1e:	a30e      	add	r3, pc, #56	@ (adr r3, 8006a58 <_strtod_l+0xbc0>)
 8006a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a24:	f7fa f862 	bl	8000aec <__aeabi_dcmplt>
 8006a28:	e798      	b.n	800695c <_strtod_l+0xac4>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a2e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006a30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a32:	6013      	str	r3, [r2, #0]
 8006a34:	f7ff ba6d 	b.w	8005f12 <_strtod_l+0x7a>
 8006a38:	2a65      	cmp	r2, #101	@ 0x65
 8006a3a:	f43f ab66 	beq.w	800610a <_strtod_l+0x272>
 8006a3e:	2a45      	cmp	r2, #69	@ 0x45
 8006a40:	f43f ab63 	beq.w	800610a <_strtod_l+0x272>
 8006a44:	2301      	movs	r3, #1
 8006a46:	f7ff bb9e 	b.w	8006186 <_strtod_l+0x2ee>
 8006a4a:	bf00      	nop
 8006a4c:	f3af 8000 	nop.w
 8006a50:	ffc00000 	.word	0xffc00000
 8006a54:	41dfffff 	.word	0x41dfffff
 8006a58:	94a03595 	.word	0x94a03595
 8006a5c:	3fcfffff 	.word	0x3fcfffff

08006a60 <strtof>:
 8006a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a64:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 8006b24 <strtof+0xc4>
 8006a68:	4b29      	ldr	r3, [pc, #164]	@ (8006b10 <strtof+0xb0>)
 8006a6a:	460a      	mov	r2, r1
 8006a6c:	ed2d 8b02 	vpush	{d8}
 8006a70:	4601      	mov	r1, r0
 8006a72:	f8d8 0000 	ldr.w	r0, [r8]
 8006a76:	f7ff fa0f 	bl	8005e98 <_strtod_l>
 8006a7a:	ec55 4b10 	vmov	r4, r5, d0
 8006a7e:	4622      	mov	r2, r4
 8006a80:	462b      	mov	r3, r5
 8006a82:	4620      	mov	r0, r4
 8006a84:	4629      	mov	r1, r5
 8006a86:	f7fa f859 	bl	8000b3c <__aeabi_dcmpun>
 8006a8a:	b190      	cbz	r0, 8006ab2 <strtof+0x52>
 8006a8c:	2d00      	cmp	r5, #0
 8006a8e:	4821      	ldr	r0, [pc, #132]	@ (8006b14 <strtof+0xb4>)
 8006a90:	da09      	bge.n	8006aa6 <strtof+0x46>
 8006a92:	f000 fb65 	bl	8007160 <nanf>
 8006a96:	eeb1 8a40 	vneg.f32	s16, s0
 8006a9a:	eeb0 0a48 	vmov.f32	s0, s16
 8006a9e:	ecbd 8b02 	vpop	{d8}
 8006aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006aa6:	ecbd 8b02 	vpop	{d8}
 8006aaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006aae:	f000 bb57 	b.w	8007160 <nanf>
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	4629      	mov	r1, r5
 8006ab6:	f7fa f877 	bl	8000ba8 <__aeabi_d2f>
 8006aba:	ee08 0a10 	vmov	s16, r0
 8006abe:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8006b18 <strtof+0xb8>
 8006ac2:	eeb0 7ac8 	vabs.f32	s14, s16
 8006ac6:	eeb4 7a67 	vcmp.f32	s14, s15
 8006aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ace:	dd11      	ble.n	8006af4 <strtof+0x94>
 8006ad0:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8006ad4:	4b11      	ldr	r3, [pc, #68]	@ (8006b1c <strtof+0xbc>)
 8006ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8006ada:	4620      	mov	r0, r4
 8006adc:	4639      	mov	r1, r7
 8006ade:	f7fa f82d 	bl	8000b3c <__aeabi_dcmpun>
 8006ae2:	b980      	cbnz	r0, 8006b06 <strtof+0xa6>
 8006ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8006b1c <strtof+0xbc>)
 8006ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8006aea:	4620      	mov	r0, r4
 8006aec:	4639      	mov	r1, r7
 8006aee:	f7fa f807 	bl	8000b00 <__aeabi_dcmple>
 8006af2:	b940      	cbnz	r0, 8006b06 <strtof+0xa6>
 8006af4:	ee18 3a10 	vmov	r3, s16
 8006af8:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8006afc:	d1cd      	bne.n	8006a9a <strtof+0x3a>
 8006afe:	4b08      	ldr	r3, [pc, #32]	@ (8006b20 <strtof+0xc0>)
 8006b00:	402b      	ands	r3, r5
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d0c9      	beq.n	8006a9a <strtof+0x3a>
 8006b06:	f8d8 3000 	ldr.w	r3, [r8]
 8006b0a:	2222      	movs	r2, #34	@ 0x22
 8006b0c:	601a      	str	r2, [r3, #0]
 8006b0e:	e7c4      	b.n	8006a9a <strtof+0x3a>
 8006b10:	20000040 	.word	0x20000040
 8006b14:	080090f5 	.word	0x080090f5
 8006b18:	7f7fffff 	.word	0x7f7fffff
 8006b1c:	7fefffff 	.word	0x7fefffff
 8006b20:	7ff00000 	.word	0x7ff00000
 8006b24:	200001ac 	.word	0x200001ac

08006b28 <_strtol_l.constprop.0>:
 8006b28:	2b24      	cmp	r3, #36	@ 0x24
 8006b2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b2e:	4686      	mov	lr, r0
 8006b30:	4690      	mov	r8, r2
 8006b32:	d801      	bhi.n	8006b38 <_strtol_l.constprop.0+0x10>
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d106      	bne.n	8006b46 <_strtol_l.constprop.0+0x1e>
 8006b38:	f000 face 	bl	80070d8 <__errno>
 8006b3c:	2316      	movs	r3, #22
 8006b3e:	6003      	str	r3, [r0, #0]
 8006b40:	2000      	movs	r0, #0
 8006b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b46:	4834      	ldr	r0, [pc, #208]	@ (8006c18 <_strtol_l.constprop.0+0xf0>)
 8006b48:	460d      	mov	r5, r1
 8006b4a:	462a      	mov	r2, r5
 8006b4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b50:	5d06      	ldrb	r6, [r0, r4]
 8006b52:	f016 0608 	ands.w	r6, r6, #8
 8006b56:	d1f8      	bne.n	8006b4a <_strtol_l.constprop.0+0x22>
 8006b58:	2c2d      	cmp	r4, #45	@ 0x2d
 8006b5a:	d12d      	bne.n	8006bb8 <_strtol_l.constprop.0+0x90>
 8006b5c:	782c      	ldrb	r4, [r5, #0]
 8006b5e:	2601      	movs	r6, #1
 8006b60:	1c95      	adds	r5, r2, #2
 8006b62:	f033 0210 	bics.w	r2, r3, #16
 8006b66:	d109      	bne.n	8006b7c <_strtol_l.constprop.0+0x54>
 8006b68:	2c30      	cmp	r4, #48	@ 0x30
 8006b6a:	d12a      	bne.n	8006bc2 <_strtol_l.constprop.0+0x9a>
 8006b6c:	782a      	ldrb	r2, [r5, #0]
 8006b6e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006b72:	2a58      	cmp	r2, #88	@ 0x58
 8006b74:	d125      	bne.n	8006bc2 <_strtol_l.constprop.0+0x9a>
 8006b76:	786c      	ldrb	r4, [r5, #1]
 8006b78:	2310      	movs	r3, #16
 8006b7a:	3502      	adds	r5, #2
 8006b7c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006b80:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006b84:	2200      	movs	r2, #0
 8006b86:	fbbc f9f3 	udiv	r9, ip, r3
 8006b8a:	4610      	mov	r0, r2
 8006b8c:	fb03 ca19 	mls	sl, r3, r9, ip
 8006b90:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006b94:	2f09      	cmp	r7, #9
 8006b96:	d81b      	bhi.n	8006bd0 <_strtol_l.constprop.0+0xa8>
 8006b98:	463c      	mov	r4, r7
 8006b9a:	42a3      	cmp	r3, r4
 8006b9c:	dd27      	ble.n	8006bee <_strtol_l.constprop.0+0xc6>
 8006b9e:	1c57      	adds	r7, r2, #1
 8006ba0:	d007      	beq.n	8006bb2 <_strtol_l.constprop.0+0x8a>
 8006ba2:	4581      	cmp	r9, r0
 8006ba4:	d320      	bcc.n	8006be8 <_strtol_l.constprop.0+0xc0>
 8006ba6:	d101      	bne.n	8006bac <_strtol_l.constprop.0+0x84>
 8006ba8:	45a2      	cmp	sl, r4
 8006baa:	db1d      	blt.n	8006be8 <_strtol_l.constprop.0+0xc0>
 8006bac:	fb00 4003 	mla	r0, r0, r3, r4
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006bb6:	e7eb      	b.n	8006b90 <_strtol_l.constprop.0+0x68>
 8006bb8:	2c2b      	cmp	r4, #43	@ 0x2b
 8006bba:	bf04      	itt	eq
 8006bbc:	782c      	ldrbeq	r4, [r5, #0]
 8006bbe:	1c95      	addeq	r5, r2, #2
 8006bc0:	e7cf      	b.n	8006b62 <_strtol_l.constprop.0+0x3a>
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1da      	bne.n	8006b7c <_strtol_l.constprop.0+0x54>
 8006bc6:	2c30      	cmp	r4, #48	@ 0x30
 8006bc8:	bf0c      	ite	eq
 8006bca:	2308      	moveq	r3, #8
 8006bcc:	230a      	movne	r3, #10
 8006bce:	e7d5      	b.n	8006b7c <_strtol_l.constprop.0+0x54>
 8006bd0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006bd4:	2f19      	cmp	r7, #25
 8006bd6:	d801      	bhi.n	8006bdc <_strtol_l.constprop.0+0xb4>
 8006bd8:	3c37      	subs	r4, #55	@ 0x37
 8006bda:	e7de      	b.n	8006b9a <_strtol_l.constprop.0+0x72>
 8006bdc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006be0:	2f19      	cmp	r7, #25
 8006be2:	d804      	bhi.n	8006bee <_strtol_l.constprop.0+0xc6>
 8006be4:	3c57      	subs	r4, #87	@ 0x57
 8006be6:	e7d8      	b.n	8006b9a <_strtol_l.constprop.0+0x72>
 8006be8:	f04f 32ff 	mov.w	r2, #4294967295
 8006bec:	e7e1      	b.n	8006bb2 <_strtol_l.constprop.0+0x8a>
 8006bee:	1c53      	adds	r3, r2, #1
 8006bf0:	d108      	bne.n	8006c04 <_strtol_l.constprop.0+0xdc>
 8006bf2:	2322      	movs	r3, #34	@ 0x22
 8006bf4:	f8ce 3000 	str.w	r3, [lr]
 8006bf8:	4660      	mov	r0, ip
 8006bfa:	f1b8 0f00 	cmp.w	r8, #0
 8006bfe:	d0a0      	beq.n	8006b42 <_strtol_l.constprop.0+0x1a>
 8006c00:	1e69      	subs	r1, r5, #1
 8006c02:	e006      	b.n	8006c12 <_strtol_l.constprop.0+0xea>
 8006c04:	b106      	cbz	r6, 8006c08 <_strtol_l.constprop.0+0xe0>
 8006c06:	4240      	negs	r0, r0
 8006c08:	f1b8 0f00 	cmp.w	r8, #0
 8006c0c:	d099      	beq.n	8006b42 <_strtol_l.constprop.0+0x1a>
 8006c0e:	2a00      	cmp	r2, #0
 8006c10:	d1f6      	bne.n	8006c00 <_strtol_l.constprop.0+0xd8>
 8006c12:	f8c8 1000 	str.w	r1, [r8]
 8006c16:	e794      	b.n	8006b42 <_strtol_l.constprop.0+0x1a>
 8006c18:	08008f41 	.word	0x08008f41

08006c1c <strtol>:
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	460a      	mov	r2, r1
 8006c20:	4601      	mov	r1, r0
 8006c22:	4802      	ldr	r0, [pc, #8]	@ (8006c2c <strtol+0x10>)
 8006c24:	6800      	ldr	r0, [r0, #0]
 8006c26:	f7ff bf7f 	b.w	8006b28 <_strtol_l.constprop.0>
 8006c2a:	bf00      	nop
 8006c2c:	200001ac 	.word	0x200001ac

08006c30 <_strtoul_l.constprop.0>:
 8006c30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c34:	4e34      	ldr	r6, [pc, #208]	@ (8006d08 <_strtoul_l.constprop.0+0xd8>)
 8006c36:	4686      	mov	lr, r0
 8006c38:	460d      	mov	r5, r1
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c40:	5d37      	ldrb	r7, [r6, r4]
 8006c42:	f017 0708 	ands.w	r7, r7, #8
 8006c46:	d1f8      	bne.n	8006c3a <_strtoul_l.constprop.0+0xa>
 8006c48:	2c2d      	cmp	r4, #45	@ 0x2d
 8006c4a:	d12f      	bne.n	8006cac <_strtoul_l.constprop.0+0x7c>
 8006c4c:	782c      	ldrb	r4, [r5, #0]
 8006c4e:	2701      	movs	r7, #1
 8006c50:	1c85      	adds	r5, r0, #2
 8006c52:	f033 0010 	bics.w	r0, r3, #16
 8006c56:	d109      	bne.n	8006c6c <_strtoul_l.constprop.0+0x3c>
 8006c58:	2c30      	cmp	r4, #48	@ 0x30
 8006c5a:	d12c      	bne.n	8006cb6 <_strtoul_l.constprop.0+0x86>
 8006c5c:	7828      	ldrb	r0, [r5, #0]
 8006c5e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8006c62:	2858      	cmp	r0, #88	@ 0x58
 8006c64:	d127      	bne.n	8006cb6 <_strtoul_l.constprop.0+0x86>
 8006c66:	786c      	ldrb	r4, [r5, #1]
 8006c68:	2310      	movs	r3, #16
 8006c6a:	3502      	adds	r5, #2
 8006c6c:	f04f 38ff 	mov.w	r8, #4294967295
 8006c70:	2600      	movs	r6, #0
 8006c72:	fbb8 f8f3 	udiv	r8, r8, r3
 8006c76:	fb03 f908 	mul.w	r9, r3, r8
 8006c7a:	ea6f 0909 	mvn.w	r9, r9
 8006c7e:	4630      	mov	r0, r6
 8006c80:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8006c84:	f1bc 0f09 	cmp.w	ip, #9
 8006c88:	d81c      	bhi.n	8006cc4 <_strtoul_l.constprop.0+0x94>
 8006c8a:	4664      	mov	r4, ip
 8006c8c:	42a3      	cmp	r3, r4
 8006c8e:	dd2a      	ble.n	8006ce6 <_strtoul_l.constprop.0+0xb6>
 8006c90:	f1b6 3fff 	cmp.w	r6, #4294967295
 8006c94:	d007      	beq.n	8006ca6 <_strtoul_l.constprop.0+0x76>
 8006c96:	4580      	cmp	r8, r0
 8006c98:	d322      	bcc.n	8006ce0 <_strtoul_l.constprop.0+0xb0>
 8006c9a:	d101      	bne.n	8006ca0 <_strtoul_l.constprop.0+0x70>
 8006c9c:	45a1      	cmp	r9, r4
 8006c9e:	db1f      	blt.n	8006ce0 <_strtoul_l.constprop.0+0xb0>
 8006ca0:	fb00 4003 	mla	r0, r0, r3, r4
 8006ca4:	2601      	movs	r6, #1
 8006ca6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006caa:	e7e9      	b.n	8006c80 <_strtoul_l.constprop.0+0x50>
 8006cac:	2c2b      	cmp	r4, #43	@ 0x2b
 8006cae:	bf04      	itt	eq
 8006cb0:	782c      	ldrbeq	r4, [r5, #0]
 8006cb2:	1c85      	addeq	r5, r0, #2
 8006cb4:	e7cd      	b.n	8006c52 <_strtoul_l.constprop.0+0x22>
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1d8      	bne.n	8006c6c <_strtoul_l.constprop.0+0x3c>
 8006cba:	2c30      	cmp	r4, #48	@ 0x30
 8006cbc:	bf0c      	ite	eq
 8006cbe:	2308      	moveq	r3, #8
 8006cc0:	230a      	movne	r3, #10
 8006cc2:	e7d3      	b.n	8006c6c <_strtoul_l.constprop.0+0x3c>
 8006cc4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8006cc8:	f1bc 0f19 	cmp.w	ip, #25
 8006ccc:	d801      	bhi.n	8006cd2 <_strtoul_l.constprop.0+0xa2>
 8006cce:	3c37      	subs	r4, #55	@ 0x37
 8006cd0:	e7dc      	b.n	8006c8c <_strtoul_l.constprop.0+0x5c>
 8006cd2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8006cd6:	f1bc 0f19 	cmp.w	ip, #25
 8006cda:	d804      	bhi.n	8006ce6 <_strtoul_l.constprop.0+0xb6>
 8006cdc:	3c57      	subs	r4, #87	@ 0x57
 8006cde:	e7d5      	b.n	8006c8c <_strtoul_l.constprop.0+0x5c>
 8006ce0:	f04f 36ff 	mov.w	r6, #4294967295
 8006ce4:	e7df      	b.n	8006ca6 <_strtoul_l.constprop.0+0x76>
 8006ce6:	1c73      	adds	r3, r6, #1
 8006ce8:	d106      	bne.n	8006cf8 <_strtoul_l.constprop.0+0xc8>
 8006cea:	2322      	movs	r3, #34	@ 0x22
 8006cec:	f8ce 3000 	str.w	r3, [lr]
 8006cf0:	4630      	mov	r0, r6
 8006cf2:	b932      	cbnz	r2, 8006d02 <_strtoul_l.constprop.0+0xd2>
 8006cf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006cf8:	b107      	cbz	r7, 8006cfc <_strtoul_l.constprop.0+0xcc>
 8006cfa:	4240      	negs	r0, r0
 8006cfc:	2a00      	cmp	r2, #0
 8006cfe:	d0f9      	beq.n	8006cf4 <_strtoul_l.constprop.0+0xc4>
 8006d00:	b106      	cbz	r6, 8006d04 <_strtoul_l.constprop.0+0xd4>
 8006d02:	1e69      	subs	r1, r5, #1
 8006d04:	6011      	str	r1, [r2, #0]
 8006d06:	e7f5      	b.n	8006cf4 <_strtoul_l.constprop.0+0xc4>
 8006d08:	08008f41 	.word	0x08008f41

08006d0c <strtoul>:
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	460a      	mov	r2, r1
 8006d10:	4601      	mov	r1, r0
 8006d12:	4802      	ldr	r0, [pc, #8]	@ (8006d1c <strtoul+0x10>)
 8006d14:	6800      	ldr	r0, [r0, #0]
 8006d16:	f7ff bf8b 	b.w	8006c30 <_strtoul_l.constprop.0>
 8006d1a:	bf00      	nop
 8006d1c:	200001ac 	.word	0x200001ac

08006d20 <std>:
 8006d20:	2300      	movs	r3, #0
 8006d22:	b510      	push	{r4, lr}
 8006d24:	4604      	mov	r4, r0
 8006d26:	e9c0 3300 	strd	r3, r3, [r0]
 8006d2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d2e:	6083      	str	r3, [r0, #8]
 8006d30:	8181      	strh	r1, [r0, #12]
 8006d32:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d34:	81c2      	strh	r2, [r0, #14]
 8006d36:	6183      	str	r3, [r0, #24]
 8006d38:	4619      	mov	r1, r3
 8006d3a:	2208      	movs	r2, #8
 8006d3c:	305c      	adds	r0, #92	@ 0x5c
 8006d3e:	f000 f90e 	bl	8006f5e <memset>
 8006d42:	4b0d      	ldr	r3, [pc, #52]	@ (8006d78 <std+0x58>)
 8006d44:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d46:	4b0d      	ldr	r3, [pc, #52]	@ (8006d7c <std+0x5c>)
 8006d48:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d80 <std+0x60>)
 8006d4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d84 <std+0x64>)
 8006d50:	6323      	str	r3, [r4, #48]	@ 0x30
 8006d52:	4b0d      	ldr	r3, [pc, #52]	@ (8006d88 <std+0x68>)
 8006d54:	6224      	str	r4, [r4, #32]
 8006d56:	429c      	cmp	r4, r3
 8006d58:	d006      	beq.n	8006d68 <std+0x48>
 8006d5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006d5e:	4294      	cmp	r4, r2
 8006d60:	d002      	beq.n	8006d68 <std+0x48>
 8006d62:	33d0      	adds	r3, #208	@ 0xd0
 8006d64:	429c      	cmp	r4, r3
 8006d66:	d105      	bne.n	8006d74 <std+0x54>
 8006d68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d70:	f000 b9dc 	b.w	800712c <__retarget_lock_init_recursive>
 8006d74:	bd10      	pop	{r4, pc}
 8006d76:	bf00      	nop
 8006d78:	08006ed9 	.word	0x08006ed9
 8006d7c:	08006efb 	.word	0x08006efb
 8006d80:	08006f33 	.word	0x08006f33
 8006d84:	08006f57 	.word	0x08006f57
 8006d88:	20000404 	.word	0x20000404

08006d8c <stdio_exit_handler>:
 8006d8c:	4a02      	ldr	r2, [pc, #8]	@ (8006d98 <stdio_exit_handler+0xc>)
 8006d8e:	4903      	ldr	r1, [pc, #12]	@ (8006d9c <stdio_exit_handler+0x10>)
 8006d90:	4803      	ldr	r0, [pc, #12]	@ (8006da0 <stdio_exit_handler+0x14>)
 8006d92:	f000 b869 	b.w	8006e68 <_fwalk_sglue>
 8006d96:	bf00      	nop
 8006d98:	20000034 	.word	0x20000034
 8006d9c:	08008a65 	.word	0x08008a65
 8006da0:	200001b0 	.word	0x200001b0

08006da4 <cleanup_stdio>:
 8006da4:	6841      	ldr	r1, [r0, #4]
 8006da6:	4b0c      	ldr	r3, [pc, #48]	@ (8006dd8 <cleanup_stdio+0x34>)
 8006da8:	4299      	cmp	r1, r3
 8006daa:	b510      	push	{r4, lr}
 8006dac:	4604      	mov	r4, r0
 8006dae:	d001      	beq.n	8006db4 <cleanup_stdio+0x10>
 8006db0:	f001 fe58 	bl	8008a64 <_fflush_r>
 8006db4:	68a1      	ldr	r1, [r4, #8]
 8006db6:	4b09      	ldr	r3, [pc, #36]	@ (8006ddc <cleanup_stdio+0x38>)
 8006db8:	4299      	cmp	r1, r3
 8006dba:	d002      	beq.n	8006dc2 <cleanup_stdio+0x1e>
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	f001 fe51 	bl	8008a64 <_fflush_r>
 8006dc2:	68e1      	ldr	r1, [r4, #12]
 8006dc4:	4b06      	ldr	r3, [pc, #24]	@ (8006de0 <cleanup_stdio+0x3c>)
 8006dc6:	4299      	cmp	r1, r3
 8006dc8:	d004      	beq.n	8006dd4 <cleanup_stdio+0x30>
 8006dca:	4620      	mov	r0, r4
 8006dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dd0:	f001 be48 	b.w	8008a64 <_fflush_r>
 8006dd4:	bd10      	pop	{r4, pc}
 8006dd6:	bf00      	nop
 8006dd8:	20000404 	.word	0x20000404
 8006ddc:	2000046c 	.word	0x2000046c
 8006de0:	200004d4 	.word	0x200004d4

08006de4 <global_stdio_init.part.0>:
 8006de4:	b510      	push	{r4, lr}
 8006de6:	4b0b      	ldr	r3, [pc, #44]	@ (8006e14 <global_stdio_init.part.0+0x30>)
 8006de8:	4c0b      	ldr	r4, [pc, #44]	@ (8006e18 <global_stdio_init.part.0+0x34>)
 8006dea:	4a0c      	ldr	r2, [pc, #48]	@ (8006e1c <global_stdio_init.part.0+0x38>)
 8006dec:	601a      	str	r2, [r3, #0]
 8006dee:	4620      	mov	r0, r4
 8006df0:	2200      	movs	r2, #0
 8006df2:	2104      	movs	r1, #4
 8006df4:	f7ff ff94 	bl	8006d20 <std>
 8006df8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	2109      	movs	r1, #9
 8006e00:	f7ff ff8e 	bl	8006d20 <std>
 8006e04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e08:	2202      	movs	r2, #2
 8006e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e0e:	2112      	movs	r1, #18
 8006e10:	f7ff bf86 	b.w	8006d20 <std>
 8006e14:	2000053c 	.word	0x2000053c
 8006e18:	20000404 	.word	0x20000404
 8006e1c:	08006d8d 	.word	0x08006d8d

08006e20 <__sfp_lock_acquire>:
 8006e20:	4801      	ldr	r0, [pc, #4]	@ (8006e28 <__sfp_lock_acquire+0x8>)
 8006e22:	f000 b984 	b.w	800712e <__retarget_lock_acquire_recursive>
 8006e26:	bf00      	nop
 8006e28:	20000545 	.word	0x20000545

08006e2c <__sfp_lock_release>:
 8006e2c:	4801      	ldr	r0, [pc, #4]	@ (8006e34 <__sfp_lock_release+0x8>)
 8006e2e:	f000 b97f 	b.w	8007130 <__retarget_lock_release_recursive>
 8006e32:	bf00      	nop
 8006e34:	20000545 	.word	0x20000545

08006e38 <__sinit>:
 8006e38:	b510      	push	{r4, lr}
 8006e3a:	4604      	mov	r4, r0
 8006e3c:	f7ff fff0 	bl	8006e20 <__sfp_lock_acquire>
 8006e40:	6a23      	ldr	r3, [r4, #32]
 8006e42:	b11b      	cbz	r3, 8006e4c <__sinit+0x14>
 8006e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e48:	f7ff bff0 	b.w	8006e2c <__sfp_lock_release>
 8006e4c:	4b04      	ldr	r3, [pc, #16]	@ (8006e60 <__sinit+0x28>)
 8006e4e:	6223      	str	r3, [r4, #32]
 8006e50:	4b04      	ldr	r3, [pc, #16]	@ (8006e64 <__sinit+0x2c>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1f5      	bne.n	8006e44 <__sinit+0xc>
 8006e58:	f7ff ffc4 	bl	8006de4 <global_stdio_init.part.0>
 8006e5c:	e7f2      	b.n	8006e44 <__sinit+0xc>
 8006e5e:	bf00      	nop
 8006e60:	08006da5 	.word	0x08006da5
 8006e64:	2000053c 	.word	0x2000053c

08006e68 <_fwalk_sglue>:
 8006e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e6c:	4607      	mov	r7, r0
 8006e6e:	4688      	mov	r8, r1
 8006e70:	4614      	mov	r4, r2
 8006e72:	2600      	movs	r6, #0
 8006e74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e78:	f1b9 0901 	subs.w	r9, r9, #1
 8006e7c:	d505      	bpl.n	8006e8a <_fwalk_sglue+0x22>
 8006e7e:	6824      	ldr	r4, [r4, #0]
 8006e80:	2c00      	cmp	r4, #0
 8006e82:	d1f7      	bne.n	8006e74 <_fwalk_sglue+0xc>
 8006e84:	4630      	mov	r0, r6
 8006e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e8a:	89ab      	ldrh	r3, [r5, #12]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d907      	bls.n	8006ea0 <_fwalk_sglue+0x38>
 8006e90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e94:	3301      	adds	r3, #1
 8006e96:	d003      	beq.n	8006ea0 <_fwalk_sglue+0x38>
 8006e98:	4629      	mov	r1, r5
 8006e9a:	4638      	mov	r0, r7
 8006e9c:	47c0      	blx	r8
 8006e9e:	4306      	orrs	r6, r0
 8006ea0:	3568      	adds	r5, #104	@ 0x68
 8006ea2:	e7e9      	b.n	8006e78 <_fwalk_sglue+0x10>

08006ea4 <iprintf>:
 8006ea4:	b40f      	push	{r0, r1, r2, r3}
 8006ea6:	b507      	push	{r0, r1, r2, lr}
 8006ea8:	4906      	ldr	r1, [pc, #24]	@ (8006ec4 <iprintf+0x20>)
 8006eaa:	ab04      	add	r3, sp, #16
 8006eac:	6808      	ldr	r0, [r1, #0]
 8006eae:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eb2:	6881      	ldr	r1, [r0, #8]
 8006eb4:	9301      	str	r3, [sp, #4]
 8006eb6:	f001 faab 	bl	8008410 <_vfiprintf_r>
 8006eba:	b003      	add	sp, #12
 8006ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ec0:	b004      	add	sp, #16
 8006ec2:	4770      	bx	lr
 8006ec4:	200001ac 	.word	0x200001ac

08006ec8 <putchar>:
 8006ec8:	4b02      	ldr	r3, [pc, #8]	@ (8006ed4 <putchar+0xc>)
 8006eca:	4601      	mov	r1, r0
 8006ecc:	6818      	ldr	r0, [r3, #0]
 8006ece:	6882      	ldr	r2, [r0, #8]
 8006ed0:	f001 be02 	b.w	8008ad8 <_putc_r>
 8006ed4:	200001ac 	.word	0x200001ac

08006ed8 <__sread>:
 8006ed8:	b510      	push	{r4, lr}
 8006eda:	460c      	mov	r4, r1
 8006edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ee0:	f000 f8d6 	bl	8007090 <_read_r>
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	bfab      	itete	ge
 8006ee8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006eea:	89a3      	ldrhlt	r3, [r4, #12]
 8006eec:	181b      	addge	r3, r3, r0
 8006eee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006ef2:	bfac      	ite	ge
 8006ef4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006ef6:	81a3      	strhlt	r3, [r4, #12]
 8006ef8:	bd10      	pop	{r4, pc}

08006efa <__swrite>:
 8006efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006efe:	461f      	mov	r7, r3
 8006f00:	898b      	ldrh	r3, [r1, #12]
 8006f02:	05db      	lsls	r3, r3, #23
 8006f04:	4605      	mov	r5, r0
 8006f06:	460c      	mov	r4, r1
 8006f08:	4616      	mov	r6, r2
 8006f0a:	d505      	bpl.n	8006f18 <__swrite+0x1e>
 8006f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f10:	2302      	movs	r3, #2
 8006f12:	2200      	movs	r2, #0
 8006f14:	f000 f8aa 	bl	800706c <_lseek_r>
 8006f18:	89a3      	ldrh	r3, [r4, #12]
 8006f1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f22:	81a3      	strh	r3, [r4, #12]
 8006f24:	4632      	mov	r2, r6
 8006f26:	463b      	mov	r3, r7
 8006f28:	4628      	mov	r0, r5
 8006f2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f2e:	f000 b8c1 	b.w	80070b4 <_write_r>

08006f32 <__sseek>:
 8006f32:	b510      	push	{r4, lr}
 8006f34:	460c      	mov	r4, r1
 8006f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f3a:	f000 f897 	bl	800706c <_lseek_r>
 8006f3e:	1c43      	adds	r3, r0, #1
 8006f40:	89a3      	ldrh	r3, [r4, #12]
 8006f42:	bf15      	itete	ne
 8006f44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006f46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006f4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006f4e:	81a3      	strheq	r3, [r4, #12]
 8006f50:	bf18      	it	ne
 8006f52:	81a3      	strhne	r3, [r4, #12]
 8006f54:	bd10      	pop	{r4, pc}

08006f56 <__sclose>:
 8006f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f5a:	f000 b877 	b.w	800704c <_close_r>

08006f5e <memset>:
 8006f5e:	4402      	add	r2, r0
 8006f60:	4603      	mov	r3, r0
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d100      	bne.n	8006f68 <memset+0xa>
 8006f66:	4770      	bx	lr
 8006f68:	f803 1b01 	strb.w	r1, [r3], #1
 8006f6c:	e7f9      	b.n	8006f62 <memset+0x4>

08006f6e <strncmp>:
 8006f6e:	b510      	push	{r4, lr}
 8006f70:	b16a      	cbz	r2, 8006f8e <strncmp+0x20>
 8006f72:	3901      	subs	r1, #1
 8006f74:	1884      	adds	r4, r0, r2
 8006f76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f7a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d103      	bne.n	8006f8a <strncmp+0x1c>
 8006f82:	42a0      	cmp	r0, r4
 8006f84:	d001      	beq.n	8006f8a <strncmp+0x1c>
 8006f86:	2a00      	cmp	r2, #0
 8006f88:	d1f5      	bne.n	8006f76 <strncmp+0x8>
 8006f8a:	1ad0      	subs	r0, r2, r3
 8006f8c:	bd10      	pop	{r4, pc}
 8006f8e:	4610      	mov	r0, r2
 8006f90:	e7fc      	b.n	8006f8c <strncmp+0x1e>
	...

08006f94 <strtok>:
 8006f94:	4b16      	ldr	r3, [pc, #88]	@ (8006ff0 <strtok+0x5c>)
 8006f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f9a:	681f      	ldr	r7, [r3, #0]
 8006f9c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8006f9e:	4605      	mov	r5, r0
 8006fa0:	460e      	mov	r6, r1
 8006fa2:	b9ec      	cbnz	r4, 8006fe0 <strtok+0x4c>
 8006fa4:	2050      	movs	r0, #80	@ 0x50
 8006fa6:	f000 fc83 	bl	80078b0 <malloc>
 8006faa:	4602      	mov	r2, r0
 8006fac:	6478      	str	r0, [r7, #68]	@ 0x44
 8006fae:	b920      	cbnz	r0, 8006fba <strtok+0x26>
 8006fb0:	4b10      	ldr	r3, [pc, #64]	@ (8006ff4 <strtok+0x60>)
 8006fb2:	4811      	ldr	r0, [pc, #68]	@ (8006ff8 <strtok+0x64>)
 8006fb4:	215b      	movs	r1, #91	@ 0x5b
 8006fb6:	f000 f8d9 	bl	800716c <__assert_func>
 8006fba:	e9c0 4400 	strd	r4, r4, [r0]
 8006fbe:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006fc2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006fc6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8006fca:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8006fce:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8006fd2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8006fd6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8006fda:	6184      	str	r4, [r0, #24]
 8006fdc:	7704      	strb	r4, [r0, #28]
 8006fde:	6244      	str	r4, [r0, #36]	@ 0x24
 8006fe0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fe2:	4631      	mov	r1, r6
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fec:	f000 b806 	b.w	8006ffc <__strtok_r>
 8006ff0:	200001ac 	.word	0x200001ac
 8006ff4:	08009041 	.word	0x08009041
 8006ff8:	08009058 	.word	0x08009058

08006ffc <__strtok_r>:
 8006ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ffe:	4604      	mov	r4, r0
 8007000:	b908      	cbnz	r0, 8007006 <__strtok_r+0xa>
 8007002:	6814      	ldr	r4, [r2, #0]
 8007004:	b144      	cbz	r4, 8007018 <__strtok_r+0x1c>
 8007006:	4620      	mov	r0, r4
 8007008:	f814 5b01 	ldrb.w	r5, [r4], #1
 800700c:	460f      	mov	r7, r1
 800700e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007012:	b91e      	cbnz	r6, 800701c <__strtok_r+0x20>
 8007014:	b965      	cbnz	r5, 8007030 <__strtok_r+0x34>
 8007016:	6015      	str	r5, [r2, #0]
 8007018:	2000      	movs	r0, #0
 800701a:	e005      	b.n	8007028 <__strtok_r+0x2c>
 800701c:	42b5      	cmp	r5, r6
 800701e:	d1f6      	bne.n	800700e <__strtok_r+0x12>
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1f0      	bne.n	8007006 <__strtok_r+0xa>
 8007024:	6014      	str	r4, [r2, #0]
 8007026:	7003      	strb	r3, [r0, #0]
 8007028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800702a:	461c      	mov	r4, r3
 800702c:	e00c      	b.n	8007048 <__strtok_r+0x4c>
 800702e:	b915      	cbnz	r5, 8007036 <__strtok_r+0x3a>
 8007030:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007034:	460e      	mov	r6, r1
 8007036:	f816 5b01 	ldrb.w	r5, [r6], #1
 800703a:	42ab      	cmp	r3, r5
 800703c:	d1f7      	bne.n	800702e <__strtok_r+0x32>
 800703e:	2b00      	cmp	r3, #0
 8007040:	d0f3      	beq.n	800702a <__strtok_r+0x2e>
 8007042:	2300      	movs	r3, #0
 8007044:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007048:	6014      	str	r4, [r2, #0]
 800704a:	e7ed      	b.n	8007028 <__strtok_r+0x2c>

0800704c <_close_r>:
 800704c:	b538      	push	{r3, r4, r5, lr}
 800704e:	4d06      	ldr	r5, [pc, #24]	@ (8007068 <_close_r+0x1c>)
 8007050:	2300      	movs	r3, #0
 8007052:	4604      	mov	r4, r0
 8007054:	4608      	mov	r0, r1
 8007056:	602b      	str	r3, [r5, #0]
 8007058:	f7fa fe72 	bl	8001d40 <_close>
 800705c:	1c43      	adds	r3, r0, #1
 800705e:	d102      	bne.n	8007066 <_close_r+0x1a>
 8007060:	682b      	ldr	r3, [r5, #0]
 8007062:	b103      	cbz	r3, 8007066 <_close_r+0x1a>
 8007064:	6023      	str	r3, [r4, #0]
 8007066:	bd38      	pop	{r3, r4, r5, pc}
 8007068:	20000540 	.word	0x20000540

0800706c <_lseek_r>:
 800706c:	b538      	push	{r3, r4, r5, lr}
 800706e:	4d07      	ldr	r5, [pc, #28]	@ (800708c <_lseek_r+0x20>)
 8007070:	4604      	mov	r4, r0
 8007072:	4608      	mov	r0, r1
 8007074:	4611      	mov	r1, r2
 8007076:	2200      	movs	r2, #0
 8007078:	602a      	str	r2, [r5, #0]
 800707a:	461a      	mov	r2, r3
 800707c:	f7fa fe87 	bl	8001d8e <_lseek>
 8007080:	1c43      	adds	r3, r0, #1
 8007082:	d102      	bne.n	800708a <_lseek_r+0x1e>
 8007084:	682b      	ldr	r3, [r5, #0]
 8007086:	b103      	cbz	r3, 800708a <_lseek_r+0x1e>
 8007088:	6023      	str	r3, [r4, #0]
 800708a:	bd38      	pop	{r3, r4, r5, pc}
 800708c:	20000540 	.word	0x20000540

08007090 <_read_r>:
 8007090:	b538      	push	{r3, r4, r5, lr}
 8007092:	4d07      	ldr	r5, [pc, #28]	@ (80070b0 <_read_r+0x20>)
 8007094:	4604      	mov	r4, r0
 8007096:	4608      	mov	r0, r1
 8007098:	4611      	mov	r1, r2
 800709a:	2200      	movs	r2, #0
 800709c:	602a      	str	r2, [r5, #0]
 800709e:	461a      	mov	r2, r3
 80070a0:	f7fa fe15 	bl	8001cce <_read>
 80070a4:	1c43      	adds	r3, r0, #1
 80070a6:	d102      	bne.n	80070ae <_read_r+0x1e>
 80070a8:	682b      	ldr	r3, [r5, #0]
 80070aa:	b103      	cbz	r3, 80070ae <_read_r+0x1e>
 80070ac:	6023      	str	r3, [r4, #0]
 80070ae:	bd38      	pop	{r3, r4, r5, pc}
 80070b0:	20000540 	.word	0x20000540

080070b4 <_write_r>:
 80070b4:	b538      	push	{r3, r4, r5, lr}
 80070b6:	4d07      	ldr	r5, [pc, #28]	@ (80070d4 <_write_r+0x20>)
 80070b8:	4604      	mov	r4, r0
 80070ba:	4608      	mov	r0, r1
 80070bc:	4611      	mov	r1, r2
 80070be:	2200      	movs	r2, #0
 80070c0:	602a      	str	r2, [r5, #0]
 80070c2:	461a      	mov	r2, r3
 80070c4:	f7fa fe20 	bl	8001d08 <_write>
 80070c8:	1c43      	adds	r3, r0, #1
 80070ca:	d102      	bne.n	80070d2 <_write_r+0x1e>
 80070cc:	682b      	ldr	r3, [r5, #0]
 80070ce:	b103      	cbz	r3, 80070d2 <_write_r+0x1e>
 80070d0:	6023      	str	r3, [r4, #0]
 80070d2:	bd38      	pop	{r3, r4, r5, pc}
 80070d4:	20000540 	.word	0x20000540

080070d8 <__errno>:
 80070d8:	4b01      	ldr	r3, [pc, #4]	@ (80070e0 <__errno+0x8>)
 80070da:	6818      	ldr	r0, [r3, #0]
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	200001ac 	.word	0x200001ac

080070e4 <__libc_init_array>:
 80070e4:	b570      	push	{r4, r5, r6, lr}
 80070e6:	4d0d      	ldr	r5, [pc, #52]	@ (800711c <__libc_init_array+0x38>)
 80070e8:	4c0d      	ldr	r4, [pc, #52]	@ (8007120 <__libc_init_array+0x3c>)
 80070ea:	1b64      	subs	r4, r4, r5
 80070ec:	10a4      	asrs	r4, r4, #2
 80070ee:	2600      	movs	r6, #0
 80070f0:	42a6      	cmp	r6, r4
 80070f2:	d109      	bne.n	8007108 <__libc_init_array+0x24>
 80070f4:	4d0b      	ldr	r5, [pc, #44]	@ (8007124 <__libc_init_array+0x40>)
 80070f6:	4c0c      	ldr	r4, [pc, #48]	@ (8007128 <__libc_init_array+0x44>)
 80070f8:	f001 feaa 	bl	8008e50 <_init>
 80070fc:	1b64      	subs	r4, r4, r5
 80070fe:	10a4      	asrs	r4, r4, #2
 8007100:	2600      	movs	r6, #0
 8007102:	42a6      	cmp	r6, r4
 8007104:	d105      	bne.n	8007112 <__libc_init_array+0x2e>
 8007106:	bd70      	pop	{r4, r5, r6, pc}
 8007108:	f855 3b04 	ldr.w	r3, [r5], #4
 800710c:	4798      	blx	r3
 800710e:	3601      	adds	r6, #1
 8007110:	e7ee      	b.n	80070f0 <__libc_init_array+0xc>
 8007112:	f855 3b04 	ldr.w	r3, [r5], #4
 8007116:	4798      	blx	r3
 8007118:	3601      	adds	r6, #1
 800711a:	e7f2      	b.n	8007102 <__libc_init_array+0x1e>
 800711c:	080092fc 	.word	0x080092fc
 8007120:	080092fc 	.word	0x080092fc
 8007124:	080092fc 	.word	0x080092fc
 8007128:	08009300 	.word	0x08009300

0800712c <__retarget_lock_init_recursive>:
 800712c:	4770      	bx	lr

0800712e <__retarget_lock_acquire_recursive>:
 800712e:	4770      	bx	lr

08007130 <__retarget_lock_release_recursive>:
 8007130:	4770      	bx	lr

08007132 <memcpy>:
 8007132:	440a      	add	r2, r1
 8007134:	4291      	cmp	r1, r2
 8007136:	f100 33ff 	add.w	r3, r0, #4294967295
 800713a:	d100      	bne.n	800713e <memcpy+0xc>
 800713c:	4770      	bx	lr
 800713e:	b510      	push	{r4, lr}
 8007140:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007144:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007148:	4291      	cmp	r1, r2
 800714a:	d1f9      	bne.n	8007140 <memcpy+0xe>
 800714c:	bd10      	pop	{r4, pc}
	...

08007150 <nan>:
 8007150:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007158 <nan+0x8>
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	00000000 	.word	0x00000000
 800715c:	7ff80000 	.word	0x7ff80000

08007160 <nanf>:
 8007160:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007168 <nanf+0x8>
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	7fc00000 	.word	0x7fc00000

0800716c <__assert_func>:
 800716c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800716e:	4614      	mov	r4, r2
 8007170:	461a      	mov	r2, r3
 8007172:	4b09      	ldr	r3, [pc, #36]	@ (8007198 <__assert_func+0x2c>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4605      	mov	r5, r0
 8007178:	68d8      	ldr	r0, [r3, #12]
 800717a:	b954      	cbnz	r4, 8007192 <__assert_func+0x26>
 800717c:	4b07      	ldr	r3, [pc, #28]	@ (800719c <__assert_func+0x30>)
 800717e:	461c      	mov	r4, r3
 8007180:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007184:	9100      	str	r1, [sp, #0]
 8007186:	462b      	mov	r3, r5
 8007188:	4905      	ldr	r1, [pc, #20]	@ (80071a0 <__assert_func+0x34>)
 800718a:	f001 fc93 	bl	8008ab4 <fiprintf>
 800718e:	f001 fd7b 	bl	8008c88 <abort>
 8007192:	4b04      	ldr	r3, [pc, #16]	@ (80071a4 <__assert_func+0x38>)
 8007194:	e7f4      	b.n	8007180 <__assert_func+0x14>
 8007196:	bf00      	nop
 8007198:	200001ac 	.word	0x200001ac
 800719c:	080090f5 	.word	0x080090f5
 80071a0:	080090c7 	.word	0x080090c7
 80071a4:	080090ba 	.word	0x080090ba

080071a8 <_free_r>:
 80071a8:	b538      	push	{r3, r4, r5, lr}
 80071aa:	4605      	mov	r5, r0
 80071ac:	2900      	cmp	r1, #0
 80071ae:	d041      	beq.n	8007234 <_free_r+0x8c>
 80071b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071b4:	1f0c      	subs	r4, r1, #4
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	bfb8      	it	lt
 80071ba:	18e4      	addlt	r4, r4, r3
 80071bc:	f000 fc34 	bl	8007a28 <__malloc_lock>
 80071c0:	4a1d      	ldr	r2, [pc, #116]	@ (8007238 <_free_r+0x90>)
 80071c2:	6813      	ldr	r3, [r2, #0]
 80071c4:	b933      	cbnz	r3, 80071d4 <_free_r+0x2c>
 80071c6:	6063      	str	r3, [r4, #4]
 80071c8:	6014      	str	r4, [r2, #0]
 80071ca:	4628      	mov	r0, r5
 80071cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071d0:	f000 bc30 	b.w	8007a34 <__malloc_unlock>
 80071d4:	42a3      	cmp	r3, r4
 80071d6:	d908      	bls.n	80071ea <_free_r+0x42>
 80071d8:	6820      	ldr	r0, [r4, #0]
 80071da:	1821      	adds	r1, r4, r0
 80071dc:	428b      	cmp	r3, r1
 80071de:	bf01      	itttt	eq
 80071e0:	6819      	ldreq	r1, [r3, #0]
 80071e2:	685b      	ldreq	r3, [r3, #4]
 80071e4:	1809      	addeq	r1, r1, r0
 80071e6:	6021      	streq	r1, [r4, #0]
 80071e8:	e7ed      	b.n	80071c6 <_free_r+0x1e>
 80071ea:	461a      	mov	r2, r3
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	b10b      	cbz	r3, 80071f4 <_free_r+0x4c>
 80071f0:	42a3      	cmp	r3, r4
 80071f2:	d9fa      	bls.n	80071ea <_free_r+0x42>
 80071f4:	6811      	ldr	r1, [r2, #0]
 80071f6:	1850      	adds	r0, r2, r1
 80071f8:	42a0      	cmp	r0, r4
 80071fa:	d10b      	bne.n	8007214 <_free_r+0x6c>
 80071fc:	6820      	ldr	r0, [r4, #0]
 80071fe:	4401      	add	r1, r0
 8007200:	1850      	adds	r0, r2, r1
 8007202:	4283      	cmp	r3, r0
 8007204:	6011      	str	r1, [r2, #0]
 8007206:	d1e0      	bne.n	80071ca <_free_r+0x22>
 8007208:	6818      	ldr	r0, [r3, #0]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	6053      	str	r3, [r2, #4]
 800720e:	4408      	add	r0, r1
 8007210:	6010      	str	r0, [r2, #0]
 8007212:	e7da      	b.n	80071ca <_free_r+0x22>
 8007214:	d902      	bls.n	800721c <_free_r+0x74>
 8007216:	230c      	movs	r3, #12
 8007218:	602b      	str	r3, [r5, #0]
 800721a:	e7d6      	b.n	80071ca <_free_r+0x22>
 800721c:	6820      	ldr	r0, [r4, #0]
 800721e:	1821      	adds	r1, r4, r0
 8007220:	428b      	cmp	r3, r1
 8007222:	bf04      	itt	eq
 8007224:	6819      	ldreq	r1, [r3, #0]
 8007226:	685b      	ldreq	r3, [r3, #4]
 8007228:	6063      	str	r3, [r4, #4]
 800722a:	bf04      	itt	eq
 800722c:	1809      	addeq	r1, r1, r0
 800722e:	6021      	streq	r1, [r4, #0]
 8007230:	6054      	str	r4, [r2, #4]
 8007232:	e7ca      	b.n	80071ca <_free_r+0x22>
 8007234:	bd38      	pop	{r3, r4, r5, pc}
 8007236:	bf00      	nop
 8007238:	2000054c 	.word	0x2000054c

0800723c <rshift>:
 800723c:	6903      	ldr	r3, [r0, #16]
 800723e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007242:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007246:	ea4f 1261 	mov.w	r2, r1, asr #5
 800724a:	f100 0414 	add.w	r4, r0, #20
 800724e:	dd45      	ble.n	80072dc <rshift+0xa0>
 8007250:	f011 011f 	ands.w	r1, r1, #31
 8007254:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007258:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800725c:	d10c      	bne.n	8007278 <rshift+0x3c>
 800725e:	f100 0710 	add.w	r7, r0, #16
 8007262:	4629      	mov	r1, r5
 8007264:	42b1      	cmp	r1, r6
 8007266:	d334      	bcc.n	80072d2 <rshift+0x96>
 8007268:	1a9b      	subs	r3, r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	1eea      	subs	r2, r5, #3
 800726e:	4296      	cmp	r6, r2
 8007270:	bf38      	it	cc
 8007272:	2300      	movcc	r3, #0
 8007274:	4423      	add	r3, r4
 8007276:	e015      	b.n	80072a4 <rshift+0x68>
 8007278:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800727c:	f1c1 0820 	rsb	r8, r1, #32
 8007280:	40cf      	lsrs	r7, r1
 8007282:	f105 0e04 	add.w	lr, r5, #4
 8007286:	46a1      	mov	r9, r4
 8007288:	4576      	cmp	r6, lr
 800728a:	46f4      	mov	ip, lr
 800728c:	d815      	bhi.n	80072ba <rshift+0x7e>
 800728e:	1a9a      	subs	r2, r3, r2
 8007290:	0092      	lsls	r2, r2, #2
 8007292:	3a04      	subs	r2, #4
 8007294:	3501      	adds	r5, #1
 8007296:	42ae      	cmp	r6, r5
 8007298:	bf38      	it	cc
 800729a:	2200      	movcc	r2, #0
 800729c:	18a3      	adds	r3, r4, r2
 800729e:	50a7      	str	r7, [r4, r2]
 80072a0:	b107      	cbz	r7, 80072a4 <rshift+0x68>
 80072a2:	3304      	adds	r3, #4
 80072a4:	1b1a      	subs	r2, r3, r4
 80072a6:	42a3      	cmp	r3, r4
 80072a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80072ac:	bf08      	it	eq
 80072ae:	2300      	moveq	r3, #0
 80072b0:	6102      	str	r2, [r0, #16]
 80072b2:	bf08      	it	eq
 80072b4:	6143      	streq	r3, [r0, #20]
 80072b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072ba:	f8dc c000 	ldr.w	ip, [ip]
 80072be:	fa0c fc08 	lsl.w	ip, ip, r8
 80072c2:	ea4c 0707 	orr.w	r7, ip, r7
 80072c6:	f849 7b04 	str.w	r7, [r9], #4
 80072ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80072ce:	40cf      	lsrs	r7, r1
 80072d0:	e7da      	b.n	8007288 <rshift+0x4c>
 80072d2:	f851 cb04 	ldr.w	ip, [r1], #4
 80072d6:	f847 cf04 	str.w	ip, [r7, #4]!
 80072da:	e7c3      	b.n	8007264 <rshift+0x28>
 80072dc:	4623      	mov	r3, r4
 80072de:	e7e1      	b.n	80072a4 <rshift+0x68>

080072e0 <__hexdig_fun>:
 80072e0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80072e4:	2b09      	cmp	r3, #9
 80072e6:	d802      	bhi.n	80072ee <__hexdig_fun+0xe>
 80072e8:	3820      	subs	r0, #32
 80072ea:	b2c0      	uxtb	r0, r0
 80072ec:	4770      	bx	lr
 80072ee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80072f2:	2b05      	cmp	r3, #5
 80072f4:	d801      	bhi.n	80072fa <__hexdig_fun+0x1a>
 80072f6:	3847      	subs	r0, #71	@ 0x47
 80072f8:	e7f7      	b.n	80072ea <__hexdig_fun+0xa>
 80072fa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80072fe:	2b05      	cmp	r3, #5
 8007300:	d801      	bhi.n	8007306 <__hexdig_fun+0x26>
 8007302:	3827      	subs	r0, #39	@ 0x27
 8007304:	e7f1      	b.n	80072ea <__hexdig_fun+0xa>
 8007306:	2000      	movs	r0, #0
 8007308:	4770      	bx	lr
	...

0800730c <__gethex>:
 800730c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007310:	b085      	sub	sp, #20
 8007312:	468a      	mov	sl, r1
 8007314:	9302      	str	r3, [sp, #8]
 8007316:	680b      	ldr	r3, [r1, #0]
 8007318:	9001      	str	r0, [sp, #4]
 800731a:	4690      	mov	r8, r2
 800731c:	1c9c      	adds	r4, r3, #2
 800731e:	46a1      	mov	r9, r4
 8007320:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007324:	2830      	cmp	r0, #48	@ 0x30
 8007326:	d0fa      	beq.n	800731e <__gethex+0x12>
 8007328:	eba9 0303 	sub.w	r3, r9, r3
 800732c:	f1a3 0b02 	sub.w	fp, r3, #2
 8007330:	f7ff ffd6 	bl	80072e0 <__hexdig_fun>
 8007334:	4605      	mov	r5, r0
 8007336:	2800      	cmp	r0, #0
 8007338:	d168      	bne.n	800740c <__gethex+0x100>
 800733a:	49a0      	ldr	r1, [pc, #640]	@ (80075bc <__gethex+0x2b0>)
 800733c:	2201      	movs	r2, #1
 800733e:	4648      	mov	r0, r9
 8007340:	f7ff fe15 	bl	8006f6e <strncmp>
 8007344:	4607      	mov	r7, r0
 8007346:	2800      	cmp	r0, #0
 8007348:	d167      	bne.n	800741a <__gethex+0x10e>
 800734a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800734e:	4626      	mov	r6, r4
 8007350:	f7ff ffc6 	bl	80072e0 <__hexdig_fun>
 8007354:	2800      	cmp	r0, #0
 8007356:	d062      	beq.n	800741e <__gethex+0x112>
 8007358:	4623      	mov	r3, r4
 800735a:	7818      	ldrb	r0, [r3, #0]
 800735c:	2830      	cmp	r0, #48	@ 0x30
 800735e:	4699      	mov	r9, r3
 8007360:	f103 0301 	add.w	r3, r3, #1
 8007364:	d0f9      	beq.n	800735a <__gethex+0x4e>
 8007366:	f7ff ffbb 	bl	80072e0 <__hexdig_fun>
 800736a:	fab0 f580 	clz	r5, r0
 800736e:	096d      	lsrs	r5, r5, #5
 8007370:	f04f 0b01 	mov.w	fp, #1
 8007374:	464a      	mov	r2, r9
 8007376:	4616      	mov	r6, r2
 8007378:	3201      	adds	r2, #1
 800737a:	7830      	ldrb	r0, [r6, #0]
 800737c:	f7ff ffb0 	bl	80072e0 <__hexdig_fun>
 8007380:	2800      	cmp	r0, #0
 8007382:	d1f8      	bne.n	8007376 <__gethex+0x6a>
 8007384:	498d      	ldr	r1, [pc, #564]	@ (80075bc <__gethex+0x2b0>)
 8007386:	2201      	movs	r2, #1
 8007388:	4630      	mov	r0, r6
 800738a:	f7ff fdf0 	bl	8006f6e <strncmp>
 800738e:	2800      	cmp	r0, #0
 8007390:	d13f      	bne.n	8007412 <__gethex+0x106>
 8007392:	b944      	cbnz	r4, 80073a6 <__gethex+0x9a>
 8007394:	1c74      	adds	r4, r6, #1
 8007396:	4622      	mov	r2, r4
 8007398:	4616      	mov	r6, r2
 800739a:	3201      	adds	r2, #1
 800739c:	7830      	ldrb	r0, [r6, #0]
 800739e:	f7ff ff9f 	bl	80072e0 <__hexdig_fun>
 80073a2:	2800      	cmp	r0, #0
 80073a4:	d1f8      	bne.n	8007398 <__gethex+0x8c>
 80073a6:	1ba4      	subs	r4, r4, r6
 80073a8:	00a7      	lsls	r7, r4, #2
 80073aa:	7833      	ldrb	r3, [r6, #0]
 80073ac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80073b0:	2b50      	cmp	r3, #80	@ 0x50
 80073b2:	d13e      	bne.n	8007432 <__gethex+0x126>
 80073b4:	7873      	ldrb	r3, [r6, #1]
 80073b6:	2b2b      	cmp	r3, #43	@ 0x2b
 80073b8:	d033      	beq.n	8007422 <__gethex+0x116>
 80073ba:	2b2d      	cmp	r3, #45	@ 0x2d
 80073bc:	d034      	beq.n	8007428 <__gethex+0x11c>
 80073be:	1c71      	adds	r1, r6, #1
 80073c0:	2400      	movs	r4, #0
 80073c2:	7808      	ldrb	r0, [r1, #0]
 80073c4:	f7ff ff8c 	bl	80072e0 <__hexdig_fun>
 80073c8:	1e43      	subs	r3, r0, #1
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	2b18      	cmp	r3, #24
 80073ce:	d830      	bhi.n	8007432 <__gethex+0x126>
 80073d0:	f1a0 0210 	sub.w	r2, r0, #16
 80073d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80073d8:	f7ff ff82 	bl	80072e0 <__hexdig_fun>
 80073dc:	f100 3cff 	add.w	ip, r0, #4294967295
 80073e0:	fa5f fc8c 	uxtb.w	ip, ip
 80073e4:	f1bc 0f18 	cmp.w	ip, #24
 80073e8:	f04f 030a 	mov.w	r3, #10
 80073ec:	d91e      	bls.n	800742c <__gethex+0x120>
 80073ee:	b104      	cbz	r4, 80073f2 <__gethex+0xe6>
 80073f0:	4252      	negs	r2, r2
 80073f2:	4417      	add	r7, r2
 80073f4:	f8ca 1000 	str.w	r1, [sl]
 80073f8:	b1ed      	cbz	r5, 8007436 <__gethex+0x12a>
 80073fa:	f1bb 0f00 	cmp.w	fp, #0
 80073fe:	bf0c      	ite	eq
 8007400:	2506      	moveq	r5, #6
 8007402:	2500      	movne	r5, #0
 8007404:	4628      	mov	r0, r5
 8007406:	b005      	add	sp, #20
 8007408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800740c:	2500      	movs	r5, #0
 800740e:	462c      	mov	r4, r5
 8007410:	e7b0      	b.n	8007374 <__gethex+0x68>
 8007412:	2c00      	cmp	r4, #0
 8007414:	d1c7      	bne.n	80073a6 <__gethex+0x9a>
 8007416:	4627      	mov	r7, r4
 8007418:	e7c7      	b.n	80073aa <__gethex+0x9e>
 800741a:	464e      	mov	r6, r9
 800741c:	462f      	mov	r7, r5
 800741e:	2501      	movs	r5, #1
 8007420:	e7c3      	b.n	80073aa <__gethex+0x9e>
 8007422:	2400      	movs	r4, #0
 8007424:	1cb1      	adds	r1, r6, #2
 8007426:	e7cc      	b.n	80073c2 <__gethex+0xb6>
 8007428:	2401      	movs	r4, #1
 800742a:	e7fb      	b.n	8007424 <__gethex+0x118>
 800742c:	fb03 0002 	mla	r0, r3, r2, r0
 8007430:	e7ce      	b.n	80073d0 <__gethex+0xc4>
 8007432:	4631      	mov	r1, r6
 8007434:	e7de      	b.n	80073f4 <__gethex+0xe8>
 8007436:	eba6 0309 	sub.w	r3, r6, r9
 800743a:	3b01      	subs	r3, #1
 800743c:	4629      	mov	r1, r5
 800743e:	2b07      	cmp	r3, #7
 8007440:	dc0a      	bgt.n	8007458 <__gethex+0x14c>
 8007442:	9801      	ldr	r0, [sp, #4]
 8007444:	f000 fafc 	bl	8007a40 <_Balloc>
 8007448:	4604      	mov	r4, r0
 800744a:	b940      	cbnz	r0, 800745e <__gethex+0x152>
 800744c:	4b5c      	ldr	r3, [pc, #368]	@ (80075c0 <__gethex+0x2b4>)
 800744e:	4602      	mov	r2, r0
 8007450:	21e4      	movs	r1, #228	@ 0xe4
 8007452:	485c      	ldr	r0, [pc, #368]	@ (80075c4 <__gethex+0x2b8>)
 8007454:	f7ff fe8a 	bl	800716c <__assert_func>
 8007458:	3101      	adds	r1, #1
 800745a:	105b      	asrs	r3, r3, #1
 800745c:	e7ef      	b.n	800743e <__gethex+0x132>
 800745e:	f100 0a14 	add.w	sl, r0, #20
 8007462:	2300      	movs	r3, #0
 8007464:	4655      	mov	r5, sl
 8007466:	469b      	mov	fp, r3
 8007468:	45b1      	cmp	r9, r6
 800746a:	d337      	bcc.n	80074dc <__gethex+0x1d0>
 800746c:	f845 bb04 	str.w	fp, [r5], #4
 8007470:	eba5 050a 	sub.w	r5, r5, sl
 8007474:	10ad      	asrs	r5, r5, #2
 8007476:	6125      	str	r5, [r4, #16]
 8007478:	4658      	mov	r0, fp
 800747a:	f000 fbd3 	bl	8007c24 <__hi0bits>
 800747e:	016d      	lsls	r5, r5, #5
 8007480:	f8d8 6000 	ldr.w	r6, [r8]
 8007484:	1a2d      	subs	r5, r5, r0
 8007486:	42b5      	cmp	r5, r6
 8007488:	dd54      	ble.n	8007534 <__gethex+0x228>
 800748a:	1bad      	subs	r5, r5, r6
 800748c:	4629      	mov	r1, r5
 800748e:	4620      	mov	r0, r4
 8007490:	f000 ff67 	bl	8008362 <__any_on>
 8007494:	4681      	mov	r9, r0
 8007496:	b178      	cbz	r0, 80074b8 <__gethex+0x1ac>
 8007498:	1e6b      	subs	r3, r5, #1
 800749a:	1159      	asrs	r1, r3, #5
 800749c:	f003 021f 	and.w	r2, r3, #31
 80074a0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80074a4:	f04f 0901 	mov.w	r9, #1
 80074a8:	fa09 f202 	lsl.w	r2, r9, r2
 80074ac:	420a      	tst	r2, r1
 80074ae:	d003      	beq.n	80074b8 <__gethex+0x1ac>
 80074b0:	454b      	cmp	r3, r9
 80074b2:	dc36      	bgt.n	8007522 <__gethex+0x216>
 80074b4:	f04f 0902 	mov.w	r9, #2
 80074b8:	4629      	mov	r1, r5
 80074ba:	4620      	mov	r0, r4
 80074bc:	f7ff febe 	bl	800723c <rshift>
 80074c0:	442f      	add	r7, r5
 80074c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80074c6:	42bb      	cmp	r3, r7
 80074c8:	da42      	bge.n	8007550 <__gethex+0x244>
 80074ca:	9801      	ldr	r0, [sp, #4]
 80074cc:	4621      	mov	r1, r4
 80074ce:	f000 faf7 	bl	8007ac0 <_Bfree>
 80074d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80074d4:	2300      	movs	r3, #0
 80074d6:	6013      	str	r3, [r2, #0]
 80074d8:	25a3      	movs	r5, #163	@ 0xa3
 80074da:	e793      	b.n	8007404 <__gethex+0xf8>
 80074dc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80074e0:	2a2e      	cmp	r2, #46	@ 0x2e
 80074e2:	d012      	beq.n	800750a <__gethex+0x1fe>
 80074e4:	2b20      	cmp	r3, #32
 80074e6:	d104      	bne.n	80074f2 <__gethex+0x1e6>
 80074e8:	f845 bb04 	str.w	fp, [r5], #4
 80074ec:	f04f 0b00 	mov.w	fp, #0
 80074f0:	465b      	mov	r3, fp
 80074f2:	7830      	ldrb	r0, [r6, #0]
 80074f4:	9303      	str	r3, [sp, #12]
 80074f6:	f7ff fef3 	bl	80072e0 <__hexdig_fun>
 80074fa:	9b03      	ldr	r3, [sp, #12]
 80074fc:	f000 000f 	and.w	r0, r0, #15
 8007500:	4098      	lsls	r0, r3
 8007502:	ea4b 0b00 	orr.w	fp, fp, r0
 8007506:	3304      	adds	r3, #4
 8007508:	e7ae      	b.n	8007468 <__gethex+0x15c>
 800750a:	45b1      	cmp	r9, r6
 800750c:	d8ea      	bhi.n	80074e4 <__gethex+0x1d8>
 800750e:	492b      	ldr	r1, [pc, #172]	@ (80075bc <__gethex+0x2b0>)
 8007510:	9303      	str	r3, [sp, #12]
 8007512:	2201      	movs	r2, #1
 8007514:	4630      	mov	r0, r6
 8007516:	f7ff fd2a 	bl	8006f6e <strncmp>
 800751a:	9b03      	ldr	r3, [sp, #12]
 800751c:	2800      	cmp	r0, #0
 800751e:	d1e1      	bne.n	80074e4 <__gethex+0x1d8>
 8007520:	e7a2      	b.n	8007468 <__gethex+0x15c>
 8007522:	1ea9      	subs	r1, r5, #2
 8007524:	4620      	mov	r0, r4
 8007526:	f000 ff1c 	bl	8008362 <__any_on>
 800752a:	2800      	cmp	r0, #0
 800752c:	d0c2      	beq.n	80074b4 <__gethex+0x1a8>
 800752e:	f04f 0903 	mov.w	r9, #3
 8007532:	e7c1      	b.n	80074b8 <__gethex+0x1ac>
 8007534:	da09      	bge.n	800754a <__gethex+0x23e>
 8007536:	1b75      	subs	r5, r6, r5
 8007538:	4621      	mov	r1, r4
 800753a:	9801      	ldr	r0, [sp, #4]
 800753c:	462a      	mov	r2, r5
 800753e:	f000 fcd7 	bl	8007ef0 <__lshift>
 8007542:	1b7f      	subs	r7, r7, r5
 8007544:	4604      	mov	r4, r0
 8007546:	f100 0a14 	add.w	sl, r0, #20
 800754a:	f04f 0900 	mov.w	r9, #0
 800754e:	e7b8      	b.n	80074c2 <__gethex+0x1b6>
 8007550:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007554:	42bd      	cmp	r5, r7
 8007556:	dd6f      	ble.n	8007638 <__gethex+0x32c>
 8007558:	1bed      	subs	r5, r5, r7
 800755a:	42ae      	cmp	r6, r5
 800755c:	dc34      	bgt.n	80075c8 <__gethex+0x2bc>
 800755e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007562:	2b02      	cmp	r3, #2
 8007564:	d022      	beq.n	80075ac <__gethex+0x2a0>
 8007566:	2b03      	cmp	r3, #3
 8007568:	d024      	beq.n	80075b4 <__gethex+0x2a8>
 800756a:	2b01      	cmp	r3, #1
 800756c:	d115      	bne.n	800759a <__gethex+0x28e>
 800756e:	42ae      	cmp	r6, r5
 8007570:	d113      	bne.n	800759a <__gethex+0x28e>
 8007572:	2e01      	cmp	r6, #1
 8007574:	d10b      	bne.n	800758e <__gethex+0x282>
 8007576:	9a02      	ldr	r2, [sp, #8]
 8007578:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800757c:	6013      	str	r3, [r2, #0]
 800757e:	2301      	movs	r3, #1
 8007580:	6123      	str	r3, [r4, #16]
 8007582:	f8ca 3000 	str.w	r3, [sl]
 8007586:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007588:	2562      	movs	r5, #98	@ 0x62
 800758a:	601c      	str	r4, [r3, #0]
 800758c:	e73a      	b.n	8007404 <__gethex+0xf8>
 800758e:	1e71      	subs	r1, r6, #1
 8007590:	4620      	mov	r0, r4
 8007592:	f000 fee6 	bl	8008362 <__any_on>
 8007596:	2800      	cmp	r0, #0
 8007598:	d1ed      	bne.n	8007576 <__gethex+0x26a>
 800759a:	9801      	ldr	r0, [sp, #4]
 800759c:	4621      	mov	r1, r4
 800759e:	f000 fa8f 	bl	8007ac0 <_Bfree>
 80075a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80075a4:	2300      	movs	r3, #0
 80075a6:	6013      	str	r3, [r2, #0]
 80075a8:	2550      	movs	r5, #80	@ 0x50
 80075aa:	e72b      	b.n	8007404 <__gethex+0xf8>
 80075ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d1f3      	bne.n	800759a <__gethex+0x28e>
 80075b2:	e7e0      	b.n	8007576 <__gethex+0x26a>
 80075b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1dd      	bne.n	8007576 <__gethex+0x26a>
 80075ba:	e7ee      	b.n	800759a <__gethex+0x28e>
 80075bc:	08008ee0 	.word	0x08008ee0
 80075c0:	080090f6 	.word	0x080090f6
 80075c4:	08009107 	.word	0x08009107
 80075c8:	1e6f      	subs	r7, r5, #1
 80075ca:	f1b9 0f00 	cmp.w	r9, #0
 80075ce:	d130      	bne.n	8007632 <__gethex+0x326>
 80075d0:	b127      	cbz	r7, 80075dc <__gethex+0x2d0>
 80075d2:	4639      	mov	r1, r7
 80075d4:	4620      	mov	r0, r4
 80075d6:	f000 fec4 	bl	8008362 <__any_on>
 80075da:	4681      	mov	r9, r0
 80075dc:	117a      	asrs	r2, r7, #5
 80075de:	2301      	movs	r3, #1
 80075e0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80075e4:	f007 071f 	and.w	r7, r7, #31
 80075e8:	40bb      	lsls	r3, r7
 80075ea:	4213      	tst	r3, r2
 80075ec:	4629      	mov	r1, r5
 80075ee:	4620      	mov	r0, r4
 80075f0:	bf18      	it	ne
 80075f2:	f049 0902 	orrne.w	r9, r9, #2
 80075f6:	f7ff fe21 	bl	800723c <rshift>
 80075fa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80075fe:	1b76      	subs	r6, r6, r5
 8007600:	2502      	movs	r5, #2
 8007602:	f1b9 0f00 	cmp.w	r9, #0
 8007606:	d047      	beq.n	8007698 <__gethex+0x38c>
 8007608:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800760c:	2b02      	cmp	r3, #2
 800760e:	d015      	beq.n	800763c <__gethex+0x330>
 8007610:	2b03      	cmp	r3, #3
 8007612:	d017      	beq.n	8007644 <__gethex+0x338>
 8007614:	2b01      	cmp	r3, #1
 8007616:	d109      	bne.n	800762c <__gethex+0x320>
 8007618:	f019 0f02 	tst.w	r9, #2
 800761c:	d006      	beq.n	800762c <__gethex+0x320>
 800761e:	f8da 3000 	ldr.w	r3, [sl]
 8007622:	ea49 0903 	orr.w	r9, r9, r3
 8007626:	f019 0f01 	tst.w	r9, #1
 800762a:	d10e      	bne.n	800764a <__gethex+0x33e>
 800762c:	f045 0510 	orr.w	r5, r5, #16
 8007630:	e032      	b.n	8007698 <__gethex+0x38c>
 8007632:	f04f 0901 	mov.w	r9, #1
 8007636:	e7d1      	b.n	80075dc <__gethex+0x2d0>
 8007638:	2501      	movs	r5, #1
 800763a:	e7e2      	b.n	8007602 <__gethex+0x2f6>
 800763c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800763e:	f1c3 0301 	rsb	r3, r3, #1
 8007642:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007644:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007646:	2b00      	cmp	r3, #0
 8007648:	d0f0      	beq.n	800762c <__gethex+0x320>
 800764a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800764e:	f104 0314 	add.w	r3, r4, #20
 8007652:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007656:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800765a:	f04f 0c00 	mov.w	ip, #0
 800765e:	4618      	mov	r0, r3
 8007660:	f853 2b04 	ldr.w	r2, [r3], #4
 8007664:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007668:	d01b      	beq.n	80076a2 <__gethex+0x396>
 800766a:	3201      	adds	r2, #1
 800766c:	6002      	str	r2, [r0, #0]
 800766e:	2d02      	cmp	r5, #2
 8007670:	f104 0314 	add.w	r3, r4, #20
 8007674:	d13c      	bne.n	80076f0 <__gethex+0x3e4>
 8007676:	f8d8 2000 	ldr.w	r2, [r8]
 800767a:	3a01      	subs	r2, #1
 800767c:	42b2      	cmp	r2, r6
 800767e:	d109      	bne.n	8007694 <__gethex+0x388>
 8007680:	1171      	asrs	r1, r6, #5
 8007682:	2201      	movs	r2, #1
 8007684:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007688:	f006 061f 	and.w	r6, r6, #31
 800768c:	fa02 f606 	lsl.w	r6, r2, r6
 8007690:	421e      	tst	r6, r3
 8007692:	d13a      	bne.n	800770a <__gethex+0x3fe>
 8007694:	f045 0520 	orr.w	r5, r5, #32
 8007698:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800769a:	601c      	str	r4, [r3, #0]
 800769c:	9b02      	ldr	r3, [sp, #8]
 800769e:	601f      	str	r7, [r3, #0]
 80076a0:	e6b0      	b.n	8007404 <__gethex+0xf8>
 80076a2:	4299      	cmp	r1, r3
 80076a4:	f843 cc04 	str.w	ip, [r3, #-4]
 80076a8:	d8d9      	bhi.n	800765e <__gethex+0x352>
 80076aa:	68a3      	ldr	r3, [r4, #8]
 80076ac:	459b      	cmp	fp, r3
 80076ae:	db17      	blt.n	80076e0 <__gethex+0x3d4>
 80076b0:	6861      	ldr	r1, [r4, #4]
 80076b2:	9801      	ldr	r0, [sp, #4]
 80076b4:	3101      	adds	r1, #1
 80076b6:	f000 f9c3 	bl	8007a40 <_Balloc>
 80076ba:	4681      	mov	r9, r0
 80076bc:	b918      	cbnz	r0, 80076c6 <__gethex+0x3ba>
 80076be:	4b1a      	ldr	r3, [pc, #104]	@ (8007728 <__gethex+0x41c>)
 80076c0:	4602      	mov	r2, r0
 80076c2:	2184      	movs	r1, #132	@ 0x84
 80076c4:	e6c5      	b.n	8007452 <__gethex+0x146>
 80076c6:	6922      	ldr	r2, [r4, #16]
 80076c8:	3202      	adds	r2, #2
 80076ca:	f104 010c 	add.w	r1, r4, #12
 80076ce:	0092      	lsls	r2, r2, #2
 80076d0:	300c      	adds	r0, #12
 80076d2:	f7ff fd2e 	bl	8007132 <memcpy>
 80076d6:	4621      	mov	r1, r4
 80076d8:	9801      	ldr	r0, [sp, #4]
 80076da:	f000 f9f1 	bl	8007ac0 <_Bfree>
 80076de:	464c      	mov	r4, r9
 80076e0:	6923      	ldr	r3, [r4, #16]
 80076e2:	1c5a      	adds	r2, r3, #1
 80076e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80076e8:	6122      	str	r2, [r4, #16]
 80076ea:	2201      	movs	r2, #1
 80076ec:	615a      	str	r2, [r3, #20]
 80076ee:	e7be      	b.n	800766e <__gethex+0x362>
 80076f0:	6922      	ldr	r2, [r4, #16]
 80076f2:	455a      	cmp	r2, fp
 80076f4:	dd0b      	ble.n	800770e <__gethex+0x402>
 80076f6:	2101      	movs	r1, #1
 80076f8:	4620      	mov	r0, r4
 80076fa:	f7ff fd9f 	bl	800723c <rshift>
 80076fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007702:	3701      	adds	r7, #1
 8007704:	42bb      	cmp	r3, r7
 8007706:	f6ff aee0 	blt.w	80074ca <__gethex+0x1be>
 800770a:	2501      	movs	r5, #1
 800770c:	e7c2      	b.n	8007694 <__gethex+0x388>
 800770e:	f016 061f 	ands.w	r6, r6, #31
 8007712:	d0fa      	beq.n	800770a <__gethex+0x3fe>
 8007714:	4453      	add	r3, sl
 8007716:	f1c6 0620 	rsb	r6, r6, #32
 800771a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800771e:	f000 fa81 	bl	8007c24 <__hi0bits>
 8007722:	42b0      	cmp	r0, r6
 8007724:	dbe7      	blt.n	80076f6 <__gethex+0x3ea>
 8007726:	e7f0      	b.n	800770a <__gethex+0x3fe>
 8007728:	080090f6 	.word	0x080090f6

0800772c <L_shift>:
 800772c:	f1c2 0208 	rsb	r2, r2, #8
 8007730:	0092      	lsls	r2, r2, #2
 8007732:	b570      	push	{r4, r5, r6, lr}
 8007734:	f1c2 0620 	rsb	r6, r2, #32
 8007738:	6843      	ldr	r3, [r0, #4]
 800773a:	6804      	ldr	r4, [r0, #0]
 800773c:	fa03 f506 	lsl.w	r5, r3, r6
 8007740:	432c      	orrs	r4, r5
 8007742:	40d3      	lsrs	r3, r2
 8007744:	6004      	str	r4, [r0, #0]
 8007746:	f840 3f04 	str.w	r3, [r0, #4]!
 800774a:	4288      	cmp	r0, r1
 800774c:	d3f4      	bcc.n	8007738 <L_shift+0xc>
 800774e:	bd70      	pop	{r4, r5, r6, pc}

08007750 <__match>:
 8007750:	b530      	push	{r4, r5, lr}
 8007752:	6803      	ldr	r3, [r0, #0]
 8007754:	3301      	adds	r3, #1
 8007756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800775a:	b914      	cbnz	r4, 8007762 <__match+0x12>
 800775c:	6003      	str	r3, [r0, #0]
 800775e:	2001      	movs	r0, #1
 8007760:	bd30      	pop	{r4, r5, pc}
 8007762:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007766:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800776a:	2d19      	cmp	r5, #25
 800776c:	bf98      	it	ls
 800776e:	3220      	addls	r2, #32
 8007770:	42a2      	cmp	r2, r4
 8007772:	d0f0      	beq.n	8007756 <__match+0x6>
 8007774:	2000      	movs	r0, #0
 8007776:	e7f3      	b.n	8007760 <__match+0x10>

08007778 <__hexnan>:
 8007778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800777c:	680b      	ldr	r3, [r1, #0]
 800777e:	6801      	ldr	r1, [r0, #0]
 8007780:	115e      	asrs	r6, r3, #5
 8007782:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007786:	f013 031f 	ands.w	r3, r3, #31
 800778a:	b087      	sub	sp, #28
 800778c:	bf18      	it	ne
 800778e:	3604      	addne	r6, #4
 8007790:	2500      	movs	r5, #0
 8007792:	1f37      	subs	r7, r6, #4
 8007794:	4682      	mov	sl, r0
 8007796:	4690      	mov	r8, r2
 8007798:	9301      	str	r3, [sp, #4]
 800779a:	f846 5c04 	str.w	r5, [r6, #-4]
 800779e:	46b9      	mov	r9, r7
 80077a0:	463c      	mov	r4, r7
 80077a2:	9502      	str	r5, [sp, #8]
 80077a4:	46ab      	mov	fp, r5
 80077a6:	784a      	ldrb	r2, [r1, #1]
 80077a8:	1c4b      	adds	r3, r1, #1
 80077aa:	9303      	str	r3, [sp, #12]
 80077ac:	b342      	cbz	r2, 8007800 <__hexnan+0x88>
 80077ae:	4610      	mov	r0, r2
 80077b0:	9105      	str	r1, [sp, #20]
 80077b2:	9204      	str	r2, [sp, #16]
 80077b4:	f7ff fd94 	bl	80072e0 <__hexdig_fun>
 80077b8:	2800      	cmp	r0, #0
 80077ba:	d151      	bne.n	8007860 <__hexnan+0xe8>
 80077bc:	9a04      	ldr	r2, [sp, #16]
 80077be:	9905      	ldr	r1, [sp, #20]
 80077c0:	2a20      	cmp	r2, #32
 80077c2:	d818      	bhi.n	80077f6 <__hexnan+0x7e>
 80077c4:	9b02      	ldr	r3, [sp, #8]
 80077c6:	459b      	cmp	fp, r3
 80077c8:	dd13      	ble.n	80077f2 <__hexnan+0x7a>
 80077ca:	454c      	cmp	r4, r9
 80077cc:	d206      	bcs.n	80077dc <__hexnan+0x64>
 80077ce:	2d07      	cmp	r5, #7
 80077d0:	dc04      	bgt.n	80077dc <__hexnan+0x64>
 80077d2:	462a      	mov	r2, r5
 80077d4:	4649      	mov	r1, r9
 80077d6:	4620      	mov	r0, r4
 80077d8:	f7ff ffa8 	bl	800772c <L_shift>
 80077dc:	4544      	cmp	r4, r8
 80077de:	d952      	bls.n	8007886 <__hexnan+0x10e>
 80077e0:	2300      	movs	r3, #0
 80077e2:	f1a4 0904 	sub.w	r9, r4, #4
 80077e6:	f844 3c04 	str.w	r3, [r4, #-4]
 80077ea:	f8cd b008 	str.w	fp, [sp, #8]
 80077ee:	464c      	mov	r4, r9
 80077f0:	461d      	mov	r5, r3
 80077f2:	9903      	ldr	r1, [sp, #12]
 80077f4:	e7d7      	b.n	80077a6 <__hexnan+0x2e>
 80077f6:	2a29      	cmp	r2, #41	@ 0x29
 80077f8:	d157      	bne.n	80078aa <__hexnan+0x132>
 80077fa:	3102      	adds	r1, #2
 80077fc:	f8ca 1000 	str.w	r1, [sl]
 8007800:	f1bb 0f00 	cmp.w	fp, #0
 8007804:	d051      	beq.n	80078aa <__hexnan+0x132>
 8007806:	454c      	cmp	r4, r9
 8007808:	d206      	bcs.n	8007818 <__hexnan+0xa0>
 800780a:	2d07      	cmp	r5, #7
 800780c:	dc04      	bgt.n	8007818 <__hexnan+0xa0>
 800780e:	462a      	mov	r2, r5
 8007810:	4649      	mov	r1, r9
 8007812:	4620      	mov	r0, r4
 8007814:	f7ff ff8a 	bl	800772c <L_shift>
 8007818:	4544      	cmp	r4, r8
 800781a:	d936      	bls.n	800788a <__hexnan+0x112>
 800781c:	f1a8 0204 	sub.w	r2, r8, #4
 8007820:	4623      	mov	r3, r4
 8007822:	f853 1b04 	ldr.w	r1, [r3], #4
 8007826:	f842 1f04 	str.w	r1, [r2, #4]!
 800782a:	429f      	cmp	r7, r3
 800782c:	d2f9      	bcs.n	8007822 <__hexnan+0xaa>
 800782e:	1b3b      	subs	r3, r7, r4
 8007830:	f023 0303 	bic.w	r3, r3, #3
 8007834:	3304      	adds	r3, #4
 8007836:	3401      	adds	r4, #1
 8007838:	3e03      	subs	r6, #3
 800783a:	42b4      	cmp	r4, r6
 800783c:	bf88      	it	hi
 800783e:	2304      	movhi	r3, #4
 8007840:	4443      	add	r3, r8
 8007842:	2200      	movs	r2, #0
 8007844:	f843 2b04 	str.w	r2, [r3], #4
 8007848:	429f      	cmp	r7, r3
 800784a:	d2fb      	bcs.n	8007844 <__hexnan+0xcc>
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	b91b      	cbnz	r3, 8007858 <__hexnan+0xe0>
 8007850:	4547      	cmp	r7, r8
 8007852:	d128      	bne.n	80078a6 <__hexnan+0x12e>
 8007854:	2301      	movs	r3, #1
 8007856:	603b      	str	r3, [r7, #0]
 8007858:	2005      	movs	r0, #5
 800785a:	b007      	add	sp, #28
 800785c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007860:	3501      	adds	r5, #1
 8007862:	2d08      	cmp	r5, #8
 8007864:	f10b 0b01 	add.w	fp, fp, #1
 8007868:	dd06      	ble.n	8007878 <__hexnan+0x100>
 800786a:	4544      	cmp	r4, r8
 800786c:	d9c1      	bls.n	80077f2 <__hexnan+0x7a>
 800786e:	2300      	movs	r3, #0
 8007870:	f844 3c04 	str.w	r3, [r4, #-4]
 8007874:	2501      	movs	r5, #1
 8007876:	3c04      	subs	r4, #4
 8007878:	6822      	ldr	r2, [r4, #0]
 800787a:	f000 000f 	and.w	r0, r0, #15
 800787e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007882:	6020      	str	r0, [r4, #0]
 8007884:	e7b5      	b.n	80077f2 <__hexnan+0x7a>
 8007886:	2508      	movs	r5, #8
 8007888:	e7b3      	b.n	80077f2 <__hexnan+0x7a>
 800788a:	9b01      	ldr	r3, [sp, #4]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d0dd      	beq.n	800784c <__hexnan+0xd4>
 8007890:	f1c3 0320 	rsb	r3, r3, #32
 8007894:	f04f 32ff 	mov.w	r2, #4294967295
 8007898:	40da      	lsrs	r2, r3
 800789a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800789e:	4013      	ands	r3, r2
 80078a0:	f846 3c04 	str.w	r3, [r6, #-4]
 80078a4:	e7d2      	b.n	800784c <__hexnan+0xd4>
 80078a6:	3f04      	subs	r7, #4
 80078a8:	e7d0      	b.n	800784c <__hexnan+0xd4>
 80078aa:	2004      	movs	r0, #4
 80078ac:	e7d5      	b.n	800785a <__hexnan+0xe2>
	...

080078b0 <malloc>:
 80078b0:	4b02      	ldr	r3, [pc, #8]	@ (80078bc <malloc+0xc>)
 80078b2:	4601      	mov	r1, r0
 80078b4:	6818      	ldr	r0, [r3, #0]
 80078b6:	f000 b825 	b.w	8007904 <_malloc_r>
 80078ba:	bf00      	nop
 80078bc:	200001ac 	.word	0x200001ac

080078c0 <sbrk_aligned>:
 80078c0:	b570      	push	{r4, r5, r6, lr}
 80078c2:	4e0f      	ldr	r6, [pc, #60]	@ (8007900 <sbrk_aligned+0x40>)
 80078c4:	460c      	mov	r4, r1
 80078c6:	6831      	ldr	r1, [r6, #0]
 80078c8:	4605      	mov	r5, r0
 80078ca:	b911      	cbnz	r1, 80078d2 <sbrk_aligned+0x12>
 80078cc:	f001 f9cc 	bl	8008c68 <_sbrk_r>
 80078d0:	6030      	str	r0, [r6, #0]
 80078d2:	4621      	mov	r1, r4
 80078d4:	4628      	mov	r0, r5
 80078d6:	f001 f9c7 	bl	8008c68 <_sbrk_r>
 80078da:	1c43      	adds	r3, r0, #1
 80078dc:	d103      	bne.n	80078e6 <sbrk_aligned+0x26>
 80078de:	f04f 34ff 	mov.w	r4, #4294967295
 80078e2:	4620      	mov	r0, r4
 80078e4:	bd70      	pop	{r4, r5, r6, pc}
 80078e6:	1cc4      	adds	r4, r0, #3
 80078e8:	f024 0403 	bic.w	r4, r4, #3
 80078ec:	42a0      	cmp	r0, r4
 80078ee:	d0f8      	beq.n	80078e2 <sbrk_aligned+0x22>
 80078f0:	1a21      	subs	r1, r4, r0
 80078f2:	4628      	mov	r0, r5
 80078f4:	f001 f9b8 	bl	8008c68 <_sbrk_r>
 80078f8:	3001      	adds	r0, #1
 80078fa:	d1f2      	bne.n	80078e2 <sbrk_aligned+0x22>
 80078fc:	e7ef      	b.n	80078de <sbrk_aligned+0x1e>
 80078fe:	bf00      	nop
 8007900:	20000548 	.word	0x20000548

08007904 <_malloc_r>:
 8007904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007908:	1ccd      	adds	r5, r1, #3
 800790a:	f025 0503 	bic.w	r5, r5, #3
 800790e:	3508      	adds	r5, #8
 8007910:	2d0c      	cmp	r5, #12
 8007912:	bf38      	it	cc
 8007914:	250c      	movcc	r5, #12
 8007916:	2d00      	cmp	r5, #0
 8007918:	4606      	mov	r6, r0
 800791a:	db01      	blt.n	8007920 <_malloc_r+0x1c>
 800791c:	42a9      	cmp	r1, r5
 800791e:	d904      	bls.n	800792a <_malloc_r+0x26>
 8007920:	230c      	movs	r3, #12
 8007922:	6033      	str	r3, [r6, #0]
 8007924:	2000      	movs	r0, #0
 8007926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800792a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a00 <_malloc_r+0xfc>
 800792e:	f000 f87b 	bl	8007a28 <__malloc_lock>
 8007932:	f8d8 3000 	ldr.w	r3, [r8]
 8007936:	461c      	mov	r4, r3
 8007938:	bb44      	cbnz	r4, 800798c <_malloc_r+0x88>
 800793a:	4629      	mov	r1, r5
 800793c:	4630      	mov	r0, r6
 800793e:	f7ff ffbf 	bl	80078c0 <sbrk_aligned>
 8007942:	1c43      	adds	r3, r0, #1
 8007944:	4604      	mov	r4, r0
 8007946:	d158      	bne.n	80079fa <_malloc_r+0xf6>
 8007948:	f8d8 4000 	ldr.w	r4, [r8]
 800794c:	4627      	mov	r7, r4
 800794e:	2f00      	cmp	r7, #0
 8007950:	d143      	bne.n	80079da <_malloc_r+0xd6>
 8007952:	2c00      	cmp	r4, #0
 8007954:	d04b      	beq.n	80079ee <_malloc_r+0xea>
 8007956:	6823      	ldr	r3, [r4, #0]
 8007958:	4639      	mov	r1, r7
 800795a:	4630      	mov	r0, r6
 800795c:	eb04 0903 	add.w	r9, r4, r3
 8007960:	f001 f982 	bl	8008c68 <_sbrk_r>
 8007964:	4581      	cmp	r9, r0
 8007966:	d142      	bne.n	80079ee <_malloc_r+0xea>
 8007968:	6821      	ldr	r1, [r4, #0]
 800796a:	1a6d      	subs	r5, r5, r1
 800796c:	4629      	mov	r1, r5
 800796e:	4630      	mov	r0, r6
 8007970:	f7ff ffa6 	bl	80078c0 <sbrk_aligned>
 8007974:	3001      	adds	r0, #1
 8007976:	d03a      	beq.n	80079ee <_malloc_r+0xea>
 8007978:	6823      	ldr	r3, [r4, #0]
 800797a:	442b      	add	r3, r5
 800797c:	6023      	str	r3, [r4, #0]
 800797e:	f8d8 3000 	ldr.w	r3, [r8]
 8007982:	685a      	ldr	r2, [r3, #4]
 8007984:	bb62      	cbnz	r2, 80079e0 <_malloc_r+0xdc>
 8007986:	f8c8 7000 	str.w	r7, [r8]
 800798a:	e00f      	b.n	80079ac <_malloc_r+0xa8>
 800798c:	6822      	ldr	r2, [r4, #0]
 800798e:	1b52      	subs	r2, r2, r5
 8007990:	d420      	bmi.n	80079d4 <_malloc_r+0xd0>
 8007992:	2a0b      	cmp	r2, #11
 8007994:	d917      	bls.n	80079c6 <_malloc_r+0xc2>
 8007996:	1961      	adds	r1, r4, r5
 8007998:	42a3      	cmp	r3, r4
 800799a:	6025      	str	r5, [r4, #0]
 800799c:	bf18      	it	ne
 800799e:	6059      	strne	r1, [r3, #4]
 80079a0:	6863      	ldr	r3, [r4, #4]
 80079a2:	bf08      	it	eq
 80079a4:	f8c8 1000 	streq.w	r1, [r8]
 80079a8:	5162      	str	r2, [r4, r5]
 80079aa:	604b      	str	r3, [r1, #4]
 80079ac:	4630      	mov	r0, r6
 80079ae:	f000 f841 	bl	8007a34 <__malloc_unlock>
 80079b2:	f104 000b 	add.w	r0, r4, #11
 80079b6:	1d23      	adds	r3, r4, #4
 80079b8:	f020 0007 	bic.w	r0, r0, #7
 80079bc:	1ac2      	subs	r2, r0, r3
 80079be:	bf1c      	itt	ne
 80079c0:	1a1b      	subne	r3, r3, r0
 80079c2:	50a3      	strne	r3, [r4, r2]
 80079c4:	e7af      	b.n	8007926 <_malloc_r+0x22>
 80079c6:	6862      	ldr	r2, [r4, #4]
 80079c8:	42a3      	cmp	r3, r4
 80079ca:	bf0c      	ite	eq
 80079cc:	f8c8 2000 	streq.w	r2, [r8]
 80079d0:	605a      	strne	r2, [r3, #4]
 80079d2:	e7eb      	b.n	80079ac <_malloc_r+0xa8>
 80079d4:	4623      	mov	r3, r4
 80079d6:	6864      	ldr	r4, [r4, #4]
 80079d8:	e7ae      	b.n	8007938 <_malloc_r+0x34>
 80079da:	463c      	mov	r4, r7
 80079dc:	687f      	ldr	r7, [r7, #4]
 80079de:	e7b6      	b.n	800794e <_malloc_r+0x4a>
 80079e0:	461a      	mov	r2, r3
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	42a3      	cmp	r3, r4
 80079e6:	d1fb      	bne.n	80079e0 <_malloc_r+0xdc>
 80079e8:	2300      	movs	r3, #0
 80079ea:	6053      	str	r3, [r2, #4]
 80079ec:	e7de      	b.n	80079ac <_malloc_r+0xa8>
 80079ee:	230c      	movs	r3, #12
 80079f0:	6033      	str	r3, [r6, #0]
 80079f2:	4630      	mov	r0, r6
 80079f4:	f000 f81e 	bl	8007a34 <__malloc_unlock>
 80079f8:	e794      	b.n	8007924 <_malloc_r+0x20>
 80079fa:	6005      	str	r5, [r0, #0]
 80079fc:	e7d6      	b.n	80079ac <_malloc_r+0xa8>
 80079fe:	bf00      	nop
 8007a00:	2000054c 	.word	0x2000054c

08007a04 <__ascii_mbtowc>:
 8007a04:	b082      	sub	sp, #8
 8007a06:	b901      	cbnz	r1, 8007a0a <__ascii_mbtowc+0x6>
 8007a08:	a901      	add	r1, sp, #4
 8007a0a:	b142      	cbz	r2, 8007a1e <__ascii_mbtowc+0x1a>
 8007a0c:	b14b      	cbz	r3, 8007a22 <__ascii_mbtowc+0x1e>
 8007a0e:	7813      	ldrb	r3, [r2, #0]
 8007a10:	600b      	str	r3, [r1, #0]
 8007a12:	7812      	ldrb	r2, [r2, #0]
 8007a14:	1e10      	subs	r0, r2, #0
 8007a16:	bf18      	it	ne
 8007a18:	2001      	movne	r0, #1
 8007a1a:	b002      	add	sp, #8
 8007a1c:	4770      	bx	lr
 8007a1e:	4610      	mov	r0, r2
 8007a20:	e7fb      	b.n	8007a1a <__ascii_mbtowc+0x16>
 8007a22:	f06f 0001 	mvn.w	r0, #1
 8007a26:	e7f8      	b.n	8007a1a <__ascii_mbtowc+0x16>

08007a28 <__malloc_lock>:
 8007a28:	4801      	ldr	r0, [pc, #4]	@ (8007a30 <__malloc_lock+0x8>)
 8007a2a:	f7ff bb80 	b.w	800712e <__retarget_lock_acquire_recursive>
 8007a2e:	bf00      	nop
 8007a30:	20000544 	.word	0x20000544

08007a34 <__malloc_unlock>:
 8007a34:	4801      	ldr	r0, [pc, #4]	@ (8007a3c <__malloc_unlock+0x8>)
 8007a36:	f7ff bb7b 	b.w	8007130 <__retarget_lock_release_recursive>
 8007a3a:	bf00      	nop
 8007a3c:	20000544 	.word	0x20000544

08007a40 <_Balloc>:
 8007a40:	b570      	push	{r4, r5, r6, lr}
 8007a42:	69c6      	ldr	r6, [r0, #28]
 8007a44:	4604      	mov	r4, r0
 8007a46:	460d      	mov	r5, r1
 8007a48:	b976      	cbnz	r6, 8007a68 <_Balloc+0x28>
 8007a4a:	2010      	movs	r0, #16
 8007a4c:	f7ff ff30 	bl	80078b0 <malloc>
 8007a50:	4602      	mov	r2, r0
 8007a52:	61e0      	str	r0, [r4, #28]
 8007a54:	b920      	cbnz	r0, 8007a60 <_Balloc+0x20>
 8007a56:	4b18      	ldr	r3, [pc, #96]	@ (8007ab8 <_Balloc+0x78>)
 8007a58:	4818      	ldr	r0, [pc, #96]	@ (8007abc <_Balloc+0x7c>)
 8007a5a:	216b      	movs	r1, #107	@ 0x6b
 8007a5c:	f7ff fb86 	bl	800716c <__assert_func>
 8007a60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a64:	6006      	str	r6, [r0, #0]
 8007a66:	60c6      	str	r6, [r0, #12]
 8007a68:	69e6      	ldr	r6, [r4, #28]
 8007a6a:	68f3      	ldr	r3, [r6, #12]
 8007a6c:	b183      	cbz	r3, 8007a90 <_Balloc+0x50>
 8007a6e:	69e3      	ldr	r3, [r4, #28]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a76:	b9b8      	cbnz	r0, 8007aa8 <_Balloc+0x68>
 8007a78:	2101      	movs	r1, #1
 8007a7a:	fa01 f605 	lsl.w	r6, r1, r5
 8007a7e:	1d72      	adds	r2, r6, #5
 8007a80:	0092      	lsls	r2, r2, #2
 8007a82:	4620      	mov	r0, r4
 8007a84:	f001 f907 	bl	8008c96 <_calloc_r>
 8007a88:	b160      	cbz	r0, 8007aa4 <_Balloc+0x64>
 8007a8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a8e:	e00e      	b.n	8007aae <_Balloc+0x6e>
 8007a90:	2221      	movs	r2, #33	@ 0x21
 8007a92:	2104      	movs	r1, #4
 8007a94:	4620      	mov	r0, r4
 8007a96:	f001 f8fe 	bl	8008c96 <_calloc_r>
 8007a9a:	69e3      	ldr	r3, [r4, #28]
 8007a9c:	60f0      	str	r0, [r6, #12]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d1e4      	bne.n	8007a6e <_Balloc+0x2e>
 8007aa4:	2000      	movs	r0, #0
 8007aa6:	bd70      	pop	{r4, r5, r6, pc}
 8007aa8:	6802      	ldr	r2, [r0, #0]
 8007aaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007aae:	2300      	movs	r3, #0
 8007ab0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ab4:	e7f7      	b.n	8007aa6 <_Balloc+0x66>
 8007ab6:	bf00      	nop
 8007ab8:	08009041 	.word	0x08009041
 8007abc:	08009167 	.word	0x08009167

08007ac0 <_Bfree>:
 8007ac0:	b570      	push	{r4, r5, r6, lr}
 8007ac2:	69c6      	ldr	r6, [r0, #28]
 8007ac4:	4605      	mov	r5, r0
 8007ac6:	460c      	mov	r4, r1
 8007ac8:	b976      	cbnz	r6, 8007ae8 <_Bfree+0x28>
 8007aca:	2010      	movs	r0, #16
 8007acc:	f7ff fef0 	bl	80078b0 <malloc>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	61e8      	str	r0, [r5, #28]
 8007ad4:	b920      	cbnz	r0, 8007ae0 <_Bfree+0x20>
 8007ad6:	4b09      	ldr	r3, [pc, #36]	@ (8007afc <_Bfree+0x3c>)
 8007ad8:	4809      	ldr	r0, [pc, #36]	@ (8007b00 <_Bfree+0x40>)
 8007ada:	218f      	movs	r1, #143	@ 0x8f
 8007adc:	f7ff fb46 	bl	800716c <__assert_func>
 8007ae0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ae4:	6006      	str	r6, [r0, #0]
 8007ae6:	60c6      	str	r6, [r0, #12]
 8007ae8:	b13c      	cbz	r4, 8007afa <_Bfree+0x3a>
 8007aea:	69eb      	ldr	r3, [r5, #28]
 8007aec:	6862      	ldr	r2, [r4, #4]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007af4:	6021      	str	r1, [r4, #0]
 8007af6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007afa:	bd70      	pop	{r4, r5, r6, pc}
 8007afc:	08009041 	.word	0x08009041
 8007b00:	08009167 	.word	0x08009167

08007b04 <__multadd>:
 8007b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b08:	690d      	ldr	r5, [r1, #16]
 8007b0a:	4607      	mov	r7, r0
 8007b0c:	460c      	mov	r4, r1
 8007b0e:	461e      	mov	r6, r3
 8007b10:	f101 0c14 	add.w	ip, r1, #20
 8007b14:	2000      	movs	r0, #0
 8007b16:	f8dc 3000 	ldr.w	r3, [ip]
 8007b1a:	b299      	uxth	r1, r3
 8007b1c:	fb02 6101 	mla	r1, r2, r1, r6
 8007b20:	0c1e      	lsrs	r6, r3, #16
 8007b22:	0c0b      	lsrs	r3, r1, #16
 8007b24:	fb02 3306 	mla	r3, r2, r6, r3
 8007b28:	b289      	uxth	r1, r1
 8007b2a:	3001      	adds	r0, #1
 8007b2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b30:	4285      	cmp	r5, r0
 8007b32:	f84c 1b04 	str.w	r1, [ip], #4
 8007b36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b3a:	dcec      	bgt.n	8007b16 <__multadd+0x12>
 8007b3c:	b30e      	cbz	r6, 8007b82 <__multadd+0x7e>
 8007b3e:	68a3      	ldr	r3, [r4, #8]
 8007b40:	42ab      	cmp	r3, r5
 8007b42:	dc19      	bgt.n	8007b78 <__multadd+0x74>
 8007b44:	6861      	ldr	r1, [r4, #4]
 8007b46:	4638      	mov	r0, r7
 8007b48:	3101      	adds	r1, #1
 8007b4a:	f7ff ff79 	bl	8007a40 <_Balloc>
 8007b4e:	4680      	mov	r8, r0
 8007b50:	b928      	cbnz	r0, 8007b5e <__multadd+0x5a>
 8007b52:	4602      	mov	r2, r0
 8007b54:	4b0c      	ldr	r3, [pc, #48]	@ (8007b88 <__multadd+0x84>)
 8007b56:	480d      	ldr	r0, [pc, #52]	@ (8007b8c <__multadd+0x88>)
 8007b58:	21ba      	movs	r1, #186	@ 0xba
 8007b5a:	f7ff fb07 	bl	800716c <__assert_func>
 8007b5e:	6922      	ldr	r2, [r4, #16]
 8007b60:	3202      	adds	r2, #2
 8007b62:	f104 010c 	add.w	r1, r4, #12
 8007b66:	0092      	lsls	r2, r2, #2
 8007b68:	300c      	adds	r0, #12
 8007b6a:	f7ff fae2 	bl	8007132 <memcpy>
 8007b6e:	4621      	mov	r1, r4
 8007b70:	4638      	mov	r0, r7
 8007b72:	f7ff ffa5 	bl	8007ac0 <_Bfree>
 8007b76:	4644      	mov	r4, r8
 8007b78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b7c:	3501      	adds	r5, #1
 8007b7e:	615e      	str	r6, [r3, #20]
 8007b80:	6125      	str	r5, [r4, #16]
 8007b82:	4620      	mov	r0, r4
 8007b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b88:	080090f6 	.word	0x080090f6
 8007b8c:	08009167 	.word	0x08009167

08007b90 <__s2b>:
 8007b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b94:	460c      	mov	r4, r1
 8007b96:	4615      	mov	r5, r2
 8007b98:	461f      	mov	r7, r3
 8007b9a:	2209      	movs	r2, #9
 8007b9c:	3308      	adds	r3, #8
 8007b9e:	4606      	mov	r6, r0
 8007ba0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	db09      	blt.n	8007bc0 <__s2b+0x30>
 8007bac:	4630      	mov	r0, r6
 8007bae:	f7ff ff47 	bl	8007a40 <_Balloc>
 8007bb2:	b940      	cbnz	r0, 8007bc6 <__s2b+0x36>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	4b19      	ldr	r3, [pc, #100]	@ (8007c1c <__s2b+0x8c>)
 8007bb8:	4819      	ldr	r0, [pc, #100]	@ (8007c20 <__s2b+0x90>)
 8007bba:	21d3      	movs	r1, #211	@ 0xd3
 8007bbc:	f7ff fad6 	bl	800716c <__assert_func>
 8007bc0:	0052      	lsls	r2, r2, #1
 8007bc2:	3101      	adds	r1, #1
 8007bc4:	e7f0      	b.n	8007ba8 <__s2b+0x18>
 8007bc6:	9b08      	ldr	r3, [sp, #32]
 8007bc8:	6143      	str	r3, [r0, #20]
 8007bca:	2d09      	cmp	r5, #9
 8007bcc:	f04f 0301 	mov.w	r3, #1
 8007bd0:	6103      	str	r3, [r0, #16]
 8007bd2:	dd16      	ble.n	8007c02 <__s2b+0x72>
 8007bd4:	f104 0909 	add.w	r9, r4, #9
 8007bd8:	46c8      	mov	r8, r9
 8007bda:	442c      	add	r4, r5
 8007bdc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007be0:	4601      	mov	r1, r0
 8007be2:	3b30      	subs	r3, #48	@ 0x30
 8007be4:	220a      	movs	r2, #10
 8007be6:	4630      	mov	r0, r6
 8007be8:	f7ff ff8c 	bl	8007b04 <__multadd>
 8007bec:	45a0      	cmp	r8, r4
 8007bee:	d1f5      	bne.n	8007bdc <__s2b+0x4c>
 8007bf0:	f1a5 0408 	sub.w	r4, r5, #8
 8007bf4:	444c      	add	r4, r9
 8007bf6:	1b2d      	subs	r5, r5, r4
 8007bf8:	1963      	adds	r3, r4, r5
 8007bfa:	42bb      	cmp	r3, r7
 8007bfc:	db04      	blt.n	8007c08 <__s2b+0x78>
 8007bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c02:	340a      	adds	r4, #10
 8007c04:	2509      	movs	r5, #9
 8007c06:	e7f6      	b.n	8007bf6 <__s2b+0x66>
 8007c08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007c0c:	4601      	mov	r1, r0
 8007c0e:	3b30      	subs	r3, #48	@ 0x30
 8007c10:	220a      	movs	r2, #10
 8007c12:	4630      	mov	r0, r6
 8007c14:	f7ff ff76 	bl	8007b04 <__multadd>
 8007c18:	e7ee      	b.n	8007bf8 <__s2b+0x68>
 8007c1a:	bf00      	nop
 8007c1c:	080090f6 	.word	0x080090f6
 8007c20:	08009167 	.word	0x08009167

08007c24 <__hi0bits>:
 8007c24:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007c28:	4603      	mov	r3, r0
 8007c2a:	bf36      	itet	cc
 8007c2c:	0403      	lslcc	r3, r0, #16
 8007c2e:	2000      	movcs	r0, #0
 8007c30:	2010      	movcc	r0, #16
 8007c32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c36:	bf3c      	itt	cc
 8007c38:	021b      	lslcc	r3, r3, #8
 8007c3a:	3008      	addcc	r0, #8
 8007c3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c40:	bf3c      	itt	cc
 8007c42:	011b      	lslcc	r3, r3, #4
 8007c44:	3004      	addcc	r0, #4
 8007c46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c4a:	bf3c      	itt	cc
 8007c4c:	009b      	lslcc	r3, r3, #2
 8007c4e:	3002      	addcc	r0, #2
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	db05      	blt.n	8007c60 <__hi0bits+0x3c>
 8007c54:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007c58:	f100 0001 	add.w	r0, r0, #1
 8007c5c:	bf08      	it	eq
 8007c5e:	2020      	moveq	r0, #32
 8007c60:	4770      	bx	lr

08007c62 <__lo0bits>:
 8007c62:	6803      	ldr	r3, [r0, #0]
 8007c64:	4602      	mov	r2, r0
 8007c66:	f013 0007 	ands.w	r0, r3, #7
 8007c6a:	d00b      	beq.n	8007c84 <__lo0bits+0x22>
 8007c6c:	07d9      	lsls	r1, r3, #31
 8007c6e:	d421      	bmi.n	8007cb4 <__lo0bits+0x52>
 8007c70:	0798      	lsls	r0, r3, #30
 8007c72:	bf49      	itett	mi
 8007c74:	085b      	lsrmi	r3, r3, #1
 8007c76:	089b      	lsrpl	r3, r3, #2
 8007c78:	2001      	movmi	r0, #1
 8007c7a:	6013      	strmi	r3, [r2, #0]
 8007c7c:	bf5c      	itt	pl
 8007c7e:	6013      	strpl	r3, [r2, #0]
 8007c80:	2002      	movpl	r0, #2
 8007c82:	4770      	bx	lr
 8007c84:	b299      	uxth	r1, r3
 8007c86:	b909      	cbnz	r1, 8007c8c <__lo0bits+0x2a>
 8007c88:	0c1b      	lsrs	r3, r3, #16
 8007c8a:	2010      	movs	r0, #16
 8007c8c:	b2d9      	uxtb	r1, r3
 8007c8e:	b909      	cbnz	r1, 8007c94 <__lo0bits+0x32>
 8007c90:	3008      	adds	r0, #8
 8007c92:	0a1b      	lsrs	r3, r3, #8
 8007c94:	0719      	lsls	r1, r3, #28
 8007c96:	bf04      	itt	eq
 8007c98:	091b      	lsreq	r3, r3, #4
 8007c9a:	3004      	addeq	r0, #4
 8007c9c:	0799      	lsls	r1, r3, #30
 8007c9e:	bf04      	itt	eq
 8007ca0:	089b      	lsreq	r3, r3, #2
 8007ca2:	3002      	addeq	r0, #2
 8007ca4:	07d9      	lsls	r1, r3, #31
 8007ca6:	d403      	bmi.n	8007cb0 <__lo0bits+0x4e>
 8007ca8:	085b      	lsrs	r3, r3, #1
 8007caa:	f100 0001 	add.w	r0, r0, #1
 8007cae:	d003      	beq.n	8007cb8 <__lo0bits+0x56>
 8007cb0:	6013      	str	r3, [r2, #0]
 8007cb2:	4770      	bx	lr
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	4770      	bx	lr
 8007cb8:	2020      	movs	r0, #32
 8007cba:	4770      	bx	lr

08007cbc <__i2b>:
 8007cbc:	b510      	push	{r4, lr}
 8007cbe:	460c      	mov	r4, r1
 8007cc0:	2101      	movs	r1, #1
 8007cc2:	f7ff febd 	bl	8007a40 <_Balloc>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	b928      	cbnz	r0, 8007cd6 <__i2b+0x1a>
 8007cca:	4b05      	ldr	r3, [pc, #20]	@ (8007ce0 <__i2b+0x24>)
 8007ccc:	4805      	ldr	r0, [pc, #20]	@ (8007ce4 <__i2b+0x28>)
 8007cce:	f240 1145 	movw	r1, #325	@ 0x145
 8007cd2:	f7ff fa4b 	bl	800716c <__assert_func>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	6144      	str	r4, [r0, #20]
 8007cda:	6103      	str	r3, [r0, #16]
 8007cdc:	bd10      	pop	{r4, pc}
 8007cde:	bf00      	nop
 8007ce0:	080090f6 	.word	0x080090f6
 8007ce4:	08009167 	.word	0x08009167

08007ce8 <__multiply>:
 8007ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cec:	4614      	mov	r4, r2
 8007cee:	690a      	ldr	r2, [r1, #16]
 8007cf0:	6923      	ldr	r3, [r4, #16]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	bfa8      	it	ge
 8007cf6:	4623      	movge	r3, r4
 8007cf8:	460f      	mov	r7, r1
 8007cfa:	bfa4      	itt	ge
 8007cfc:	460c      	movge	r4, r1
 8007cfe:	461f      	movge	r7, r3
 8007d00:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007d04:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007d08:	68a3      	ldr	r3, [r4, #8]
 8007d0a:	6861      	ldr	r1, [r4, #4]
 8007d0c:	eb0a 0609 	add.w	r6, sl, r9
 8007d10:	42b3      	cmp	r3, r6
 8007d12:	b085      	sub	sp, #20
 8007d14:	bfb8      	it	lt
 8007d16:	3101      	addlt	r1, #1
 8007d18:	f7ff fe92 	bl	8007a40 <_Balloc>
 8007d1c:	b930      	cbnz	r0, 8007d2c <__multiply+0x44>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	4b44      	ldr	r3, [pc, #272]	@ (8007e34 <__multiply+0x14c>)
 8007d22:	4845      	ldr	r0, [pc, #276]	@ (8007e38 <__multiply+0x150>)
 8007d24:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007d28:	f7ff fa20 	bl	800716c <__assert_func>
 8007d2c:	f100 0514 	add.w	r5, r0, #20
 8007d30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007d34:	462b      	mov	r3, r5
 8007d36:	2200      	movs	r2, #0
 8007d38:	4543      	cmp	r3, r8
 8007d3a:	d321      	bcc.n	8007d80 <__multiply+0x98>
 8007d3c:	f107 0114 	add.w	r1, r7, #20
 8007d40:	f104 0214 	add.w	r2, r4, #20
 8007d44:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007d48:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007d4c:	9302      	str	r3, [sp, #8]
 8007d4e:	1b13      	subs	r3, r2, r4
 8007d50:	3b15      	subs	r3, #21
 8007d52:	f023 0303 	bic.w	r3, r3, #3
 8007d56:	3304      	adds	r3, #4
 8007d58:	f104 0715 	add.w	r7, r4, #21
 8007d5c:	42ba      	cmp	r2, r7
 8007d5e:	bf38      	it	cc
 8007d60:	2304      	movcc	r3, #4
 8007d62:	9301      	str	r3, [sp, #4]
 8007d64:	9b02      	ldr	r3, [sp, #8]
 8007d66:	9103      	str	r1, [sp, #12]
 8007d68:	428b      	cmp	r3, r1
 8007d6a:	d80c      	bhi.n	8007d86 <__multiply+0x9e>
 8007d6c:	2e00      	cmp	r6, #0
 8007d6e:	dd03      	ble.n	8007d78 <__multiply+0x90>
 8007d70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d05b      	beq.n	8007e30 <__multiply+0x148>
 8007d78:	6106      	str	r6, [r0, #16]
 8007d7a:	b005      	add	sp, #20
 8007d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d80:	f843 2b04 	str.w	r2, [r3], #4
 8007d84:	e7d8      	b.n	8007d38 <__multiply+0x50>
 8007d86:	f8b1 a000 	ldrh.w	sl, [r1]
 8007d8a:	f1ba 0f00 	cmp.w	sl, #0
 8007d8e:	d024      	beq.n	8007dda <__multiply+0xf2>
 8007d90:	f104 0e14 	add.w	lr, r4, #20
 8007d94:	46a9      	mov	r9, r5
 8007d96:	f04f 0c00 	mov.w	ip, #0
 8007d9a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007d9e:	f8d9 3000 	ldr.w	r3, [r9]
 8007da2:	fa1f fb87 	uxth.w	fp, r7
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	fb0a 330b 	mla	r3, sl, fp, r3
 8007dac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007db0:	f8d9 7000 	ldr.w	r7, [r9]
 8007db4:	4463      	add	r3, ip
 8007db6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007dba:	fb0a c70b 	mla	r7, sl, fp, ip
 8007dbe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007dc8:	4572      	cmp	r2, lr
 8007dca:	f849 3b04 	str.w	r3, [r9], #4
 8007dce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007dd2:	d8e2      	bhi.n	8007d9a <__multiply+0xb2>
 8007dd4:	9b01      	ldr	r3, [sp, #4]
 8007dd6:	f845 c003 	str.w	ip, [r5, r3]
 8007dda:	9b03      	ldr	r3, [sp, #12]
 8007ddc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007de0:	3104      	adds	r1, #4
 8007de2:	f1b9 0f00 	cmp.w	r9, #0
 8007de6:	d021      	beq.n	8007e2c <__multiply+0x144>
 8007de8:	682b      	ldr	r3, [r5, #0]
 8007dea:	f104 0c14 	add.w	ip, r4, #20
 8007dee:	46ae      	mov	lr, r5
 8007df0:	f04f 0a00 	mov.w	sl, #0
 8007df4:	f8bc b000 	ldrh.w	fp, [ip]
 8007df8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007dfc:	fb09 770b 	mla	r7, r9, fp, r7
 8007e00:	4457      	add	r7, sl
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007e08:	f84e 3b04 	str.w	r3, [lr], #4
 8007e0c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007e10:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e14:	f8be 3000 	ldrh.w	r3, [lr]
 8007e18:	fb09 330a 	mla	r3, r9, sl, r3
 8007e1c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007e20:	4562      	cmp	r2, ip
 8007e22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e26:	d8e5      	bhi.n	8007df4 <__multiply+0x10c>
 8007e28:	9f01      	ldr	r7, [sp, #4]
 8007e2a:	51eb      	str	r3, [r5, r7]
 8007e2c:	3504      	adds	r5, #4
 8007e2e:	e799      	b.n	8007d64 <__multiply+0x7c>
 8007e30:	3e01      	subs	r6, #1
 8007e32:	e79b      	b.n	8007d6c <__multiply+0x84>
 8007e34:	080090f6 	.word	0x080090f6
 8007e38:	08009167 	.word	0x08009167

08007e3c <__pow5mult>:
 8007e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e40:	4615      	mov	r5, r2
 8007e42:	f012 0203 	ands.w	r2, r2, #3
 8007e46:	4607      	mov	r7, r0
 8007e48:	460e      	mov	r6, r1
 8007e4a:	d007      	beq.n	8007e5c <__pow5mult+0x20>
 8007e4c:	4c25      	ldr	r4, [pc, #148]	@ (8007ee4 <__pow5mult+0xa8>)
 8007e4e:	3a01      	subs	r2, #1
 8007e50:	2300      	movs	r3, #0
 8007e52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e56:	f7ff fe55 	bl	8007b04 <__multadd>
 8007e5a:	4606      	mov	r6, r0
 8007e5c:	10ad      	asrs	r5, r5, #2
 8007e5e:	d03d      	beq.n	8007edc <__pow5mult+0xa0>
 8007e60:	69fc      	ldr	r4, [r7, #28]
 8007e62:	b97c      	cbnz	r4, 8007e84 <__pow5mult+0x48>
 8007e64:	2010      	movs	r0, #16
 8007e66:	f7ff fd23 	bl	80078b0 <malloc>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	61f8      	str	r0, [r7, #28]
 8007e6e:	b928      	cbnz	r0, 8007e7c <__pow5mult+0x40>
 8007e70:	4b1d      	ldr	r3, [pc, #116]	@ (8007ee8 <__pow5mult+0xac>)
 8007e72:	481e      	ldr	r0, [pc, #120]	@ (8007eec <__pow5mult+0xb0>)
 8007e74:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007e78:	f7ff f978 	bl	800716c <__assert_func>
 8007e7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e80:	6004      	str	r4, [r0, #0]
 8007e82:	60c4      	str	r4, [r0, #12]
 8007e84:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007e88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e8c:	b94c      	cbnz	r4, 8007ea2 <__pow5mult+0x66>
 8007e8e:	f240 2171 	movw	r1, #625	@ 0x271
 8007e92:	4638      	mov	r0, r7
 8007e94:	f7ff ff12 	bl	8007cbc <__i2b>
 8007e98:	2300      	movs	r3, #0
 8007e9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e9e:	4604      	mov	r4, r0
 8007ea0:	6003      	str	r3, [r0, #0]
 8007ea2:	f04f 0900 	mov.w	r9, #0
 8007ea6:	07eb      	lsls	r3, r5, #31
 8007ea8:	d50a      	bpl.n	8007ec0 <__pow5mult+0x84>
 8007eaa:	4631      	mov	r1, r6
 8007eac:	4622      	mov	r2, r4
 8007eae:	4638      	mov	r0, r7
 8007eb0:	f7ff ff1a 	bl	8007ce8 <__multiply>
 8007eb4:	4631      	mov	r1, r6
 8007eb6:	4680      	mov	r8, r0
 8007eb8:	4638      	mov	r0, r7
 8007eba:	f7ff fe01 	bl	8007ac0 <_Bfree>
 8007ebe:	4646      	mov	r6, r8
 8007ec0:	106d      	asrs	r5, r5, #1
 8007ec2:	d00b      	beq.n	8007edc <__pow5mult+0xa0>
 8007ec4:	6820      	ldr	r0, [r4, #0]
 8007ec6:	b938      	cbnz	r0, 8007ed8 <__pow5mult+0x9c>
 8007ec8:	4622      	mov	r2, r4
 8007eca:	4621      	mov	r1, r4
 8007ecc:	4638      	mov	r0, r7
 8007ece:	f7ff ff0b 	bl	8007ce8 <__multiply>
 8007ed2:	6020      	str	r0, [r4, #0]
 8007ed4:	f8c0 9000 	str.w	r9, [r0]
 8007ed8:	4604      	mov	r4, r0
 8007eda:	e7e4      	b.n	8007ea6 <__pow5mult+0x6a>
 8007edc:	4630      	mov	r0, r6
 8007ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ee2:	bf00      	nop
 8007ee4:	080091c0 	.word	0x080091c0
 8007ee8:	08009041 	.word	0x08009041
 8007eec:	08009167 	.word	0x08009167

08007ef0 <__lshift>:
 8007ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ef4:	460c      	mov	r4, r1
 8007ef6:	6849      	ldr	r1, [r1, #4]
 8007ef8:	6923      	ldr	r3, [r4, #16]
 8007efa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007efe:	68a3      	ldr	r3, [r4, #8]
 8007f00:	4607      	mov	r7, r0
 8007f02:	4691      	mov	r9, r2
 8007f04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f08:	f108 0601 	add.w	r6, r8, #1
 8007f0c:	42b3      	cmp	r3, r6
 8007f0e:	db0b      	blt.n	8007f28 <__lshift+0x38>
 8007f10:	4638      	mov	r0, r7
 8007f12:	f7ff fd95 	bl	8007a40 <_Balloc>
 8007f16:	4605      	mov	r5, r0
 8007f18:	b948      	cbnz	r0, 8007f2e <__lshift+0x3e>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	4b28      	ldr	r3, [pc, #160]	@ (8007fc0 <__lshift+0xd0>)
 8007f1e:	4829      	ldr	r0, [pc, #164]	@ (8007fc4 <__lshift+0xd4>)
 8007f20:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007f24:	f7ff f922 	bl	800716c <__assert_func>
 8007f28:	3101      	adds	r1, #1
 8007f2a:	005b      	lsls	r3, r3, #1
 8007f2c:	e7ee      	b.n	8007f0c <__lshift+0x1c>
 8007f2e:	2300      	movs	r3, #0
 8007f30:	f100 0114 	add.w	r1, r0, #20
 8007f34:	f100 0210 	add.w	r2, r0, #16
 8007f38:	4618      	mov	r0, r3
 8007f3a:	4553      	cmp	r3, sl
 8007f3c:	db33      	blt.n	8007fa6 <__lshift+0xb6>
 8007f3e:	6920      	ldr	r0, [r4, #16]
 8007f40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f44:	f104 0314 	add.w	r3, r4, #20
 8007f48:	f019 091f 	ands.w	r9, r9, #31
 8007f4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f54:	d02b      	beq.n	8007fae <__lshift+0xbe>
 8007f56:	f1c9 0e20 	rsb	lr, r9, #32
 8007f5a:	468a      	mov	sl, r1
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	6818      	ldr	r0, [r3, #0]
 8007f60:	fa00 f009 	lsl.w	r0, r0, r9
 8007f64:	4310      	orrs	r0, r2
 8007f66:	f84a 0b04 	str.w	r0, [sl], #4
 8007f6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f6e:	459c      	cmp	ip, r3
 8007f70:	fa22 f20e 	lsr.w	r2, r2, lr
 8007f74:	d8f3      	bhi.n	8007f5e <__lshift+0x6e>
 8007f76:	ebac 0304 	sub.w	r3, ip, r4
 8007f7a:	3b15      	subs	r3, #21
 8007f7c:	f023 0303 	bic.w	r3, r3, #3
 8007f80:	3304      	adds	r3, #4
 8007f82:	f104 0015 	add.w	r0, r4, #21
 8007f86:	4584      	cmp	ip, r0
 8007f88:	bf38      	it	cc
 8007f8a:	2304      	movcc	r3, #4
 8007f8c:	50ca      	str	r2, [r1, r3]
 8007f8e:	b10a      	cbz	r2, 8007f94 <__lshift+0xa4>
 8007f90:	f108 0602 	add.w	r6, r8, #2
 8007f94:	3e01      	subs	r6, #1
 8007f96:	4638      	mov	r0, r7
 8007f98:	612e      	str	r6, [r5, #16]
 8007f9a:	4621      	mov	r1, r4
 8007f9c:	f7ff fd90 	bl	8007ac0 <_Bfree>
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fa6:	f842 0f04 	str.w	r0, [r2, #4]!
 8007faa:	3301      	adds	r3, #1
 8007fac:	e7c5      	b.n	8007f3a <__lshift+0x4a>
 8007fae:	3904      	subs	r1, #4
 8007fb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fb4:	f841 2f04 	str.w	r2, [r1, #4]!
 8007fb8:	459c      	cmp	ip, r3
 8007fba:	d8f9      	bhi.n	8007fb0 <__lshift+0xc0>
 8007fbc:	e7ea      	b.n	8007f94 <__lshift+0xa4>
 8007fbe:	bf00      	nop
 8007fc0:	080090f6 	.word	0x080090f6
 8007fc4:	08009167 	.word	0x08009167

08007fc8 <__mcmp>:
 8007fc8:	690a      	ldr	r2, [r1, #16]
 8007fca:	4603      	mov	r3, r0
 8007fcc:	6900      	ldr	r0, [r0, #16]
 8007fce:	1a80      	subs	r0, r0, r2
 8007fd0:	b530      	push	{r4, r5, lr}
 8007fd2:	d10e      	bne.n	8007ff2 <__mcmp+0x2a>
 8007fd4:	3314      	adds	r3, #20
 8007fd6:	3114      	adds	r1, #20
 8007fd8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007fdc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007fe0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007fe4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007fe8:	4295      	cmp	r5, r2
 8007fea:	d003      	beq.n	8007ff4 <__mcmp+0x2c>
 8007fec:	d205      	bcs.n	8007ffa <__mcmp+0x32>
 8007fee:	f04f 30ff 	mov.w	r0, #4294967295
 8007ff2:	bd30      	pop	{r4, r5, pc}
 8007ff4:	42a3      	cmp	r3, r4
 8007ff6:	d3f3      	bcc.n	8007fe0 <__mcmp+0x18>
 8007ff8:	e7fb      	b.n	8007ff2 <__mcmp+0x2a>
 8007ffa:	2001      	movs	r0, #1
 8007ffc:	e7f9      	b.n	8007ff2 <__mcmp+0x2a>
	...

08008000 <__mdiff>:
 8008000:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008004:	4689      	mov	r9, r1
 8008006:	4606      	mov	r6, r0
 8008008:	4611      	mov	r1, r2
 800800a:	4648      	mov	r0, r9
 800800c:	4614      	mov	r4, r2
 800800e:	f7ff ffdb 	bl	8007fc8 <__mcmp>
 8008012:	1e05      	subs	r5, r0, #0
 8008014:	d112      	bne.n	800803c <__mdiff+0x3c>
 8008016:	4629      	mov	r1, r5
 8008018:	4630      	mov	r0, r6
 800801a:	f7ff fd11 	bl	8007a40 <_Balloc>
 800801e:	4602      	mov	r2, r0
 8008020:	b928      	cbnz	r0, 800802e <__mdiff+0x2e>
 8008022:	4b3f      	ldr	r3, [pc, #252]	@ (8008120 <__mdiff+0x120>)
 8008024:	f240 2137 	movw	r1, #567	@ 0x237
 8008028:	483e      	ldr	r0, [pc, #248]	@ (8008124 <__mdiff+0x124>)
 800802a:	f7ff f89f 	bl	800716c <__assert_func>
 800802e:	2301      	movs	r3, #1
 8008030:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008034:	4610      	mov	r0, r2
 8008036:	b003      	add	sp, #12
 8008038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800803c:	bfbc      	itt	lt
 800803e:	464b      	movlt	r3, r9
 8008040:	46a1      	movlt	r9, r4
 8008042:	4630      	mov	r0, r6
 8008044:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008048:	bfba      	itte	lt
 800804a:	461c      	movlt	r4, r3
 800804c:	2501      	movlt	r5, #1
 800804e:	2500      	movge	r5, #0
 8008050:	f7ff fcf6 	bl	8007a40 <_Balloc>
 8008054:	4602      	mov	r2, r0
 8008056:	b918      	cbnz	r0, 8008060 <__mdiff+0x60>
 8008058:	4b31      	ldr	r3, [pc, #196]	@ (8008120 <__mdiff+0x120>)
 800805a:	f240 2145 	movw	r1, #581	@ 0x245
 800805e:	e7e3      	b.n	8008028 <__mdiff+0x28>
 8008060:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008064:	6926      	ldr	r6, [r4, #16]
 8008066:	60c5      	str	r5, [r0, #12]
 8008068:	f109 0310 	add.w	r3, r9, #16
 800806c:	f109 0514 	add.w	r5, r9, #20
 8008070:	f104 0e14 	add.w	lr, r4, #20
 8008074:	f100 0b14 	add.w	fp, r0, #20
 8008078:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800807c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008080:	9301      	str	r3, [sp, #4]
 8008082:	46d9      	mov	r9, fp
 8008084:	f04f 0c00 	mov.w	ip, #0
 8008088:	9b01      	ldr	r3, [sp, #4]
 800808a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800808e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008092:	9301      	str	r3, [sp, #4]
 8008094:	fa1f f38a 	uxth.w	r3, sl
 8008098:	4619      	mov	r1, r3
 800809a:	b283      	uxth	r3, r0
 800809c:	1acb      	subs	r3, r1, r3
 800809e:	0c00      	lsrs	r0, r0, #16
 80080a0:	4463      	add	r3, ip
 80080a2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80080a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80080b0:	4576      	cmp	r6, lr
 80080b2:	f849 3b04 	str.w	r3, [r9], #4
 80080b6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80080ba:	d8e5      	bhi.n	8008088 <__mdiff+0x88>
 80080bc:	1b33      	subs	r3, r6, r4
 80080be:	3b15      	subs	r3, #21
 80080c0:	f023 0303 	bic.w	r3, r3, #3
 80080c4:	3415      	adds	r4, #21
 80080c6:	3304      	adds	r3, #4
 80080c8:	42a6      	cmp	r6, r4
 80080ca:	bf38      	it	cc
 80080cc:	2304      	movcc	r3, #4
 80080ce:	441d      	add	r5, r3
 80080d0:	445b      	add	r3, fp
 80080d2:	461e      	mov	r6, r3
 80080d4:	462c      	mov	r4, r5
 80080d6:	4544      	cmp	r4, r8
 80080d8:	d30e      	bcc.n	80080f8 <__mdiff+0xf8>
 80080da:	f108 0103 	add.w	r1, r8, #3
 80080de:	1b49      	subs	r1, r1, r5
 80080e0:	f021 0103 	bic.w	r1, r1, #3
 80080e4:	3d03      	subs	r5, #3
 80080e6:	45a8      	cmp	r8, r5
 80080e8:	bf38      	it	cc
 80080ea:	2100      	movcc	r1, #0
 80080ec:	440b      	add	r3, r1
 80080ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80080f2:	b191      	cbz	r1, 800811a <__mdiff+0x11a>
 80080f4:	6117      	str	r7, [r2, #16]
 80080f6:	e79d      	b.n	8008034 <__mdiff+0x34>
 80080f8:	f854 1b04 	ldr.w	r1, [r4], #4
 80080fc:	46e6      	mov	lr, ip
 80080fe:	0c08      	lsrs	r0, r1, #16
 8008100:	fa1c fc81 	uxtah	ip, ip, r1
 8008104:	4471      	add	r1, lr
 8008106:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800810a:	b289      	uxth	r1, r1
 800810c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008110:	f846 1b04 	str.w	r1, [r6], #4
 8008114:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008118:	e7dd      	b.n	80080d6 <__mdiff+0xd6>
 800811a:	3f01      	subs	r7, #1
 800811c:	e7e7      	b.n	80080ee <__mdiff+0xee>
 800811e:	bf00      	nop
 8008120:	080090f6 	.word	0x080090f6
 8008124:	08009167 	.word	0x08009167

08008128 <__ulp>:
 8008128:	b082      	sub	sp, #8
 800812a:	ed8d 0b00 	vstr	d0, [sp]
 800812e:	9a01      	ldr	r2, [sp, #4]
 8008130:	4b0f      	ldr	r3, [pc, #60]	@ (8008170 <__ulp+0x48>)
 8008132:	4013      	ands	r3, r2
 8008134:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008138:	2b00      	cmp	r3, #0
 800813a:	dc08      	bgt.n	800814e <__ulp+0x26>
 800813c:	425b      	negs	r3, r3
 800813e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008142:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008146:	da04      	bge.n	8008152 <__ulp+0x2a>
 8008148:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800814c:	4113      	asrs	r3, r2
 800814e:	2200      	movs	r2, #0
 8008150:	e008      	b.n	8008164 <__ulp+0x3c>
 8008152:	f1a2 0314 	sub.w	r3, r2, #20
 8008156:	2b1e      	cmp	r3, #30
 8008158:	bfda      	itte	le
 800815a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800815e:	40da      	lsrle	r2, r3
 8008160:	2201      	movgt	r2, #1
 8008162:	2300      	movs	r3, #0
 8008164:	4619      	mov	r1, r3
 8008166:	4610      	mov	r0, r2
 8008168:	ec41 0b10 	vmov	d0, r0, r1
 800816c:	b002      	add	sp, #8
 800816e:	4770      	bx	lr
 8008170:	7ff00000 	.word	0x7ff00000

08008174 <__b2d>:
 8008174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008178:	6906      	ldr	r6, [r0, #16]
 800817a:	f100 0814 	add.w	r8, r0, #20
 800817e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008182:	1f37      	subs	r7, r6, #4
 8008184:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008188:	4610      	mov	r0, r2
 800818a:	f7ff fd4b 	bl	8007c24 <__hi0bits>
 800818e:	f1c0 0320 	rsb	r3, r0, #32
 8008192:	280a      	cmp	r0, #10
 8008194:	600b      	str	r3, [r1, #0]
 8008196:	491b      	ldr	r1, [pc, #108]	@ (8008204 <__b2d+0x90>)
 8008198:	dc15      	bgt.n	80081c6 <__b2d+0x52>
 800819a:	f1c0 0c0b 	rsb	ip, r0, #11
 800819e:	fa22 f30c 	lsr.w	r3, r2, ip
 80081a2:	45b8      	cmp	r8, r7
 80081a4:	ea43 0501 	orr.w	r5, r3, r1
 80081a8:	bf34      	ite	cc
 80081aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80081ae:	2300      	movcs	r3, #0
 80081b0:	3015      	adds	r0, #21
 80081b2:	fa02 f000 	lsl.w	r0, r2, r0
 80081b6:	fa23 f30c 	lsr.w	r3, r3, ip
 80081ba:	4303      	orrs	r3, r0
 80081bc:	461c      	mov	r4, r3
 80081be:	ec45 4b10 	vmov	d0, r4, r5
 80081c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081c6:	45b8      	cmp	r8, r7
 80081c8:	bf3a      	itte	cc
 80081ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80081ce:	f1a6 0708 	subcc.w	r7, r6, #8
 80081d2:	2300      	movcs	r3, #0
 80081d4:	380b      	subs	r0, #11
 80081d6:	d012      	beq.n	80081fe <__b2d+0x8a>
 80081d8:	f1c0 0120 	rsb	r1, r0, #32
 80081dc:	fa23 f401 	lsr.w	r4, r3, r1
 80081e0:	4082      	lsls	r2, r0
 80081e2:	4322      	orrs	r2, r4
 80081e4:	4547      	cmp	r7, r8
 80081e6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80081ea:	bf8c      	ite	hi
 80081ec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80081f0:	2200      	movls	r2, #0
 80081f2:	4083      	lsls	r3, r0
 80081f4:	40ca      	lsrs	r2, r1
 80081f6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80081fa:	4313      	orrs	r3, r2
 80081fc:	e7de      	b.n	80081bc <__b2d+0x48>
 80081fe:	ea42 0501 	orr.w	r5, r2, r1
 8008202:	e7db      	b.n	80081bc <__b2d+0x48>
 8008204:	3ff00000 	.word	0x3ff00000

08008208 <__d2b>:
 8008208:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800820c:	460f      	mov	r7, r1
 800820e:	2101      	movs	r1, #1
 8008210:	ec59 8b10 	vmov	r8, r9, d0
 8008214:	4616      	mov	r6, r2
 8008216:	f7ff fc13 	bl	8007a40 <_Balloc>
 800821a:	4604      	mov	r4, r0
 800821c:	b930      	cbnz	r0, 800822c <__d2b+0x24>
 800821e:	4602      	mov	r2, r0
 8008220:	4b23      	ldr	r3, [pc, #140]	@ (80082b0 <__d2b+0xa8>)
 8008222:	4824      	ldr	r0, [pc, #144]	@ (80082b4 <__d2b+0xac>)
 8008224:	f240 310f 	movw	r1, #783	@ 0x30f
 8008228:	f7fe ffa0 	bl	800716c <__assert_func>
 800822c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008230:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008234:	b10d      	cbz	r5, 800823a <__d2b+0x32>
 8008236:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800823a:	9301      	str	r3, [sp, #4]
 800823c:	f1b8 0300 	subs.w	r3, r8, #0
 8008240:	d023      	beq.n	800828a <__d2b+0x82>
 8008242:	4668      	mov	r0, sp
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	f7ff fd0c 	bl	8007c62 <__lo0bits>
 800824a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800824e:	b1d0      	cbz	r0, 8008286 <__d2b+0x7e>
 8008250:	f1c0 0320 	rsb	r3, r0, #32
 8008254:	fa02 f303 	lsl.w	r3, r2, r3
 8008258:	430b      	orrs	r3, r1
 800825a:	40c2      	lsrs	r2, r0
 800825c:	6163      	str	r3, [r4, #20]
 800825e:	9201      	str	r2, [sp, #4]
 8008260:	9b01      	ldr	r3, [sp, #4]
 8008262:	61a3      	str	r3, [r4, #24]
 8008264:	2b00      	cmp	r3, #0
 8008266:	bf0c      	ite	eq
 8008268:	2201      	moveq	r2, #1
 800826a:	2202      	movne	r2, #2
 800826c:	6122      	str	r2, [r4, #16]
 800826e:	b1a5      	cbz	r5, 800829a <__d2b+0x92>
 8008270:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008274:	4405      	add	r5, r0
 8008276:	603d      	str	r5, [r7, #0]
 8008278:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800827c:	6030      	str	r0, [r6, #0]
 800827e:	4620      	mov	r0, r4
 8008280:	b003      	add	sp, #12
 8008282:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008286:	6161      	str	r1, [r4, #20]
 8008288:	e7ea      	b.n	8008260 <__d2b+0x58>
 800828a:	a801      	add	r0, sp, #4
 800828c:	f7ff fce9 	bl	8007c62 <__lo0bits>
 8008290:	9b01      	ldr	r3, [sp, #4]
 8008292:	6163      	str	r3, [r4, #20]
 8008294:	3020      	adds	r0, #32
 8008296:	2201      	movs	r2, #1
 8008298:	e7e8      	b.n	800826c <__d2b+0x64>
 800829a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800829e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80082a2:	6038      	str	r0, [r7, #0]
 80082a4:	6918      	ldr	r0, [r3, #16]
 80082a6:	f7ff fcbd 	bl	8007c24 <__hi0bits>
 80082aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80082ae:	e7e5      	b.n	800827c <__d2b+0x74>
 80082b0:	080090f6 	.word	0x080090f6
 80082b4:	08009167 	.word	0x08009167

080082b8 <__ratio>:
 80082b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082bc:	b085      	sub	sp, #20
 80082be:	e9cd 1000 	strd	r1, r0, [sp]
 80082c2:	a902      	add	r1, sp, #8
 80082c4:	f7ff ff56 	bl	8008174 <__b2d>
 80082c8:	9800      	ldr	r0, [sp, #0]
 80082ca:	a903      	add	r1, sp, #12
 80082cc:	ec55 4b10 	vmov	r4, r5, d0
 80082d0:	f7ff ff50 	bl	8008174 <__b2d>
 80082d4:	9b01      	ldr	r3, [sp, #4]
 80082d6:	6919      	ldr	r1, [r3, #16]
 80082d8:	9b00      	ldr	r3, [sp, #0]
 80082da:	691b      	ldr	r3, [r3, #16]
 80082dc:	1ac9      	subs	r1, r1, r3
 80082de:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80082e2:	1a9b      	subs	r3, r3, r2
 80082e4:	ec5b ab10 	vmov	sl, fp, d0
 80082e8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	bfce      	itee	gt
 80082f0:	462a      	movgt	r2, r5
 80082f2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80082f6:	465a      	movle	r2, fp
 80082f8:	462f      	mov	r7, r5
 80082fa:	46d9      	mov	r9, fp
 80082fc:	bfcc      	ite	gt
 80082fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008302:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008306:	464b      	mov	r3, r9
 8008308:	4652      	mov	r2, sl
 800830a:	4620      	mov	r0, r4
 800830c:	4639      	mov	r1, r7
 800830e:	f7f8 faa5 	bl	800085c <__aeabi_ddiv>
 8008312:	ec41 0b10 	vmov	d0, r0, r1
 8008316:	b005      	add	sp, #20
 8008318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800831c <__copybits>:
 800831c:	3901      	subs	r1, #1
 800831e:	b570      	push	{r4, r5, r6, lr}
 8008320:	1149      	asrs	r1, r1, #5
 8008322:	6914      	ldr	r4, [r2, #16]
 8008324:	3101      	adds	r1, #1
 8008326:	f102 0314 	add.w	r3, r2, #20
 800832a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800832e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008332:	1f05      	subs	r5, r0, #4
 8008334:	42a3      	cmp	r3, r4
 8008336:	d30c      	bcc.n	8008352 <__copybits+0x36>
 8008338:	1aa3      	subs	r3, r4, r2
 800833a:	3b11      	subs	r3, #17
 800833c:	f023 0303 	bic.w	r3, r3, #3
 8008340:	3211      	adds	r2, #17
 8008342:	42a2      	cmp	r2, r4
 8008344:	bf88      	it	hi
 8008346:	2300      	movhi	r3, #0
 8008348:	4418      	add	r0, r3
 800834a:	2300      	movs	r3, #0
 800834c:	4288      	cmp	r0, r1
 800834e:	d305      	bcc.n	800835c <__copybits+0x40>
 8008350:	bd70      	pop	{r4, r5, r6, pc}
 8008352:	f853 6b04 	ldr.w	r6, [r3], #4
 8008356:	f845 6f04 	str.w	r6, [r5, #4]!
 800835a:	e7eb      	b.n	8008334 <__copybits+0x18>
 800835c:	f840 3b04 	str.w	r3, [r0], #4
 8008360:	e7f4      	b.n	800834c <__copybits+0x30>

08008362 <__any_on>:
 8008362:	f100 0214 	add.w	r2, r0, #20
 8008366:	6900      	ldr	r0, [r0, #16]
 8008368:	114b      	asrs	r3, r1, #5
 800836a:	4298      	cmp	r0, r3
 800836c:	b510      	push	{r4, lr}
 800836e:	db11      	blt.n	8008394 <__any_on+0x32>
 8008370:	dd0a      	ble.n	8008388 <__any_on+0x26>
 8008372:	f011 011f 	ands.w	r1, r1, #31
 8008376:	d007      	beq.n	8008388 <__any_on+0x26>
 8008378:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800837c:	fa24 f001 	lsr.w	r0, r4, r1
 8008380:	fa00 f101 	lsl.w	r1, r0, r1
 8008384:	428c      	cmp	r4, r1
 8008386:	d10b      	bne.n	80083a0 <__any_on+0x3e>
 8008388:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800838c:	4293      	cmp	r3, r2
 800838e:	d803      	bhi.n	8008398 <__any_on+0x36>
 8008390:	2000      	movs	r0, #0
 8008392:	bd10      	pop	{r4, pc}
 8008394:	4603      	mov	r3, r0
 8008396:	e7f7      	b.n	8008388 <__any_on+0x26>
 8008398:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800839c:	2900      	cmp	r1, #0
 800839e:	d0f5      	beq.n	800838c <__any_on+0x2a>
 80083a0:	2001      	movs	r0, #1
 80083a2:	e7f6      	b.n	8008392 <__any_on+0x30>

080083a4 <__ascii_wctomb>:
 80083a4:	4603      	mov	r3, r0
 80083a6:	4608      	mov	r0, r1
 80083a8:	b141      	cbz	r1, 80083bc <__ascii_wctomb+0x18>
 80083aa:	2aff      	cmp	r2, #255	@ 0xff
 80083ac:	d904      	bls.n	80083b8 <__ascii_wctomb+0x14>
 80083ae:	228a      	movs	r2, #138	@ 0x8a
 80083b0:	601a      	str	r2, [r3, #0]
 80083b2:	f04f 30ff 	mov.w	r0, #4294967295
 80083b6:	4770      	bx	lr
 80083b8:	700a      	strb	r2, [r1, #0]
 80083ba:	2001      	movs	r0, #1
 80083bc:	4770      	bx	lr

080083be <__sfputc_r>:
 80083be:	6893      	ldr	r3, [r2, #8]
 80083c0:	3b01      	subs	r3, #1
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	b410      	push	{r4}
 80083c6:	6093      	str	r3, [r2, #8]
 80083c8:	da08      	bge.n	80083dc <__sfputc_r+0x1e>
 80083ca:	6994      	ldr	r4, [r2, #24]
 80083cc:	42a3      	cmp	r3, r4
 80083ce:	db01      	blt.n	80083d4 <__sfputc_r+0x16>
 80083d0:	290a      	cmp	r1, #10
 80083d2:	d103      	bne.n	80083dc <__sfputc_r+0x1e>
 80083d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083d8:	f000 bbb2 	b.w	8008b40 <__swbuf_r>
 80083dc:	6813      	ldr	r3, [r2, #0]
 80083de:	1c58      	adds	r0, r3, #1
 80083e0:	6010      	str	r0, [r2, #0]
 80083e2:	7019      	strb	r1, [r3, #0]
 80083e4:	4608      	mov	r0, r1
 80083e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <__sfputs_r>:
 80083ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ee:	4606      	mov	r6, r0
 80083f0:	460f      	mov	r7, r1
 80083f2:	4614      	mov	r4, r2
 80083f4:	18d5      	adds	r5, r2, r3
 80083f6:	42ac      	cmp	r4, r5
 80083f8:	d101      	bne.n	80083fe <__sfputs_r+0x12>
 80083fa:	2000      	movs	r0, #0
 80083fc:	e007      	b.n	800840e <__sfputs_r+0x22>
 80083fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008402:	463a      	mov	r2, r7
 8008404:	4630      	mov	r0, r6
 8008406:	f7ff ffda 	bl	80083be <__sfputc_r>
 800840a:	1c43      	adds	r3, r0, #1
 800840c:	d1f3      	bne.n	80083f6 <__sfputs_r+0xa>
 800840e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008410 <_vfiprintf_r>:
 8008410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008414:	460d      	mov	r5, r1
 8008416:	b09d      	sub	sp, #116	@ 0x74
 8008418:	4614      	mov	r4, r2
 800841a:	4698      	mov	r8, r3
 800841c:	4606      	mov	r6, r0
 800841e:	b118      	cbz	r0, 8008428 <_vfiprintf_r+0x18>
 8008420:	6a03      	ldr	r3, [r0, #32]
 8008422:	b90b      	cbnz	r3, 8008428 <_vfiprintf_r+0x18>
 8008424:	f7fe fd08 	bl	8006e38 <__sinit>
 8008428:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800842a:	07d9      	lsls	r1, r3, #31
 800842c:	d405      	bmi.n	800843a <_vfiprintf_r+0x2a>
 800842e:	89ab      	ldrh	r3, [r5, #12]
 8008430:	059a      	lsls	r2, r3, #22
 8008432:	d402      	bmi.n	800843a <_vfiprintf_r+0x2a>
 8008434:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008436:	f7fe fe7a 	bl	800712e <__retarget_lock_acquire_recursive>
 800843a:	89ab      	ldrh	r3, [r5, #12]
 800843c:	071b      	lsls	r3, r3, #28
 800843e:	d501      	bpl.n	8008444 <_vfiprintf_r+0x34>
 8008440:	692b      	ldr	r3, [r5, #16]
 8008442:	b99b      	cbnz	r3, 800846c <_vfiprintf_r+0x5c>
 8008444:	4629      	mov	r1, r5
 8008446:	4630      	mov	r0, r6
 8008448:	f000 fbb8 	bl	8008bbc <__swsetup_r>
 800844c:	b170      	cbz	r0, 800846c <_vfiprintf_r+0x5c>
 800844e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008450:	07dc      	lsls	r4, r3, #31
 8008452:	d504      	bpl.n	800845e <_vfiprintf_r+0x4e>
 8008454:	f04f 30ff 	mov.w	r0, #4294967295
 8008458:	b01d      	add	sp, #116	@ 0x74
 800845a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800845e:	89ab      	ldrh	r3, [r5, #12]
 8008460:	0598      	lsls	r0, r3, #22
 8008462:	d4f7      	bmi.n	8008454 <_vfiprintf_r+0x44>
 8008464:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008466:	f7fe fe63 	bl	8007130 <__retarget_lock_release_recursive>
 800846a:	e7f3      	b.n	8008454 <_vfiprintf_r+0x44>
 800846c:	2300      	movs	r3, #0
 800846e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008470:	2320      	movs	r3, #32
 8008472:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008476:	f8cd 800c 	str.w	r8, [sp, #12]
 800847a:	2330      	movs	r3, #48	@ 0x30
 800847c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800862c <_vfiprintf_r+0x21c>
 8008480:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008484:	f04f 0901 	mov.w	r9, #1
 8008488:	4623      	mov	r3, r4
 800848a:	469a      	mov	sl, r3
 800848c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008490:	b10a      	cbz	r2, 8008496 <_vfiprintf_r+0x86>
 8008492:	2a25      	cmp	r2, #37	@ 0x25
 8008494:	d1f9      	bne.n	800848a <_vfiprintf_r+0x7a>
 8008496:	ebba 0b04 	subs.w	fp, sl, r4
 800849a:	d00b      	beq.n	80084b4 <_vfiprintf_r+0xa4>
 800849c:	465b      	mov	r3, fp
 800849e:	4622      	mov	r2, r4
 80084a0:	4629      	mov	r1, r5
 80084a2:	4630      	mov	r0, r6
 80084a4:	f7ff ffa2 	bl	80083ec <__sfputs_r>
 80084a8:	3001      	adds	r0, #1
 80084aa:	f000 80a7 	beq.w	80085fc <_vfiprintf_r+0x1ec>
 80084ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084b0:	445a      	add	r2, fp
 80084b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80084b4:	f89a 3000 	ldrb.w	r3, [sl]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	f000 809f 	beq.w	80085fc <_vfiprintf_r+0x1ec>
 80084be:	2300      	movs	r3, #0
 80084c0:	f04f 32ff 	mov.w	r2, #4294967295
 80084c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084c8:	f10a 0a01 	add.w	sl, sl, #1
 80084cc:	9304      	str	r3, [sp, #16]
 80084ce:	9307      	str	r3, [sp, #28]
 80084d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80084d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80084d6:	4654      	mov	r4, sl
 80084d8:	2205      	movs	r2, #5
 80084da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084de:	4853      	ldr	r0, [pc, #332]	@ (800862c <_vfiprintf_r+0x21c>)
 80084e0:	f7f7 fe86 	bl	80001f0 <memchr>
 80084e4:	9a04      	ldr	r2, [sp, #16]
 80084e6:	b9d8      	cbnz	r0, 8008520 <_vfiprintf_r+0x110>
 80084e8:	06d1      	lsls	r1, r2, #27
 80084ea:	bf44      	itt	mi
 80084ec:	2320      	movmi	r3, #32
 80084ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084f2:	0713      	lsls	r3, r2, #28
 80084f4:	bf44      	itt	mi
 80084f6:	232b      	movmi	r3, #43	@ 0x2b
 80084f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084fc:	f89a 3000 	ldrb.w	r3, [sl]
 8008500:	2b2a      	cmp	r3, #42	@ 0x2a
 8008502:	d015      	beq.n	8008530 <_vfiprintf_r+0x120>
 8008504:	9a07      	ldr	r2, [sp, #28]
 8008506:	4654      	mov	r4, sl
 8008508:	2000      	movs	r0, #0
 800850a:	f04f 0c0a 	mov.w	ip, #10
 800850e:	4621      	mov	r1, r4
 8008510:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008514:	3b30      	subs	r3, #48	@ 0x30
 8008516:	2b09      	cmp	r3, #9
 8008518:	d94b      	bls.n	80085b2 <_vfiprintf_r+0x1a2>
 800851a:	b1b0      	cbz	r0, 800854a <_vfiprintf_r+0x13a>
 800851c:	9207      	str	r2, [sp, #28]
 800851e:	e014      	b.n	800854a <_vfiprintf_r+0x13a>
 8008520:	eba0 0308 	sub.w	r3, r0, r8
 8008524:	fa09 f303 	lsl.w	r3, r9, r3
 8008528:	4313      	orrs	r3, r2
 800852a:	9304      	str	r3, [sp, #16]
 800852c:	46a2      	mov	sl, r4
 800852e:	e7d2      	b.n	80084d6 <_vfiprintf_r+0xc6>
 8008530:	9b03      	ldr	r3, [sp, #12]
 8008532:	1d19      	adds	r1, r3, #4
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	9103      	str	r1, [sp, #12]
 8008538:	2b00      	cmp	r3, #0
 800853a:	bfbb      	ittet	lt
 800853c:	425b      	neglt	r3, r3
 800853e:	f042 0202 	orrlt.w	r2, r2, #2
 8008542:	9307      	strge	r3, [sp, #28]
 8008544:	9307      	strlt	r3, [sp, #28]
 8008546:	bfb8      	it	lt
 8008548:	9204      	strlt	r2, [sp, #16]
 800854a:	7823      	ldrb	r3, [r4, #0]
 800854c:	2b2e      	cmp	r3, #46	@ 0x2e
 800854e:	d10a      	bne.n	8008566 <_vfiprintf_r+0x156>
 8008550:	7863      	ldrb	r3, [r4, #1]
 8008552:	2b2a      	cmp	r3, #42	@ 0x2a
 8008554:	d132      	bne.n	80085bc <_vfiprintf_r+0x1ac>
 8008556:	9b03      	ldr	r3, [sp, #12]
 8008558:	1d1a      	adds	r2, r3, #4
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	9203      	str	r2, [sp, #12]
 800855e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008562:	3402      	adds	r4, #2
 8008564:	9305      	str	r3, [sp, #20]
 8008566:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800863c <_vfiprintf_r+0x22c>
 800856a:	7821      	ldrb	r1, [r4, #0]
 800856c:	2203      	movs	r2, #3
 800856e:	4650      	mov	r0, sl
 8008570:	f7f7 fe3e 	bl	80001f0 <memchr>
 8008574:	b138      	cbz	r0, 8008586 <_vfiprintf_r+0x176>
 8008576:	9b04      	ldr	r3, [sp, #16]
 8008578:	eba0 000a 	sub.w	r0, r0, sl
 800857c:	2240      	movs	r2, #64	@ 0x40
 800857e:	4082      	lsls	r2, r0
 8008580:	4313      	orrs	r3, r2
 8008582:	3401      	adds	r4, #1
 8008584:	9304      	str	r3, [sp, #16]
 8008586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800858a:	4829      	ldr	r0, [pc, #164]	@ (8008630 <_vfiprintf_r+0x220>)
 800858c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008590:	2206      	movs	r2, #6
 8008592:	f7f7 fe2d 	bl	80001f0 <memchr>
 8008596:	2800      	cmp	r0, #0
 8008598:	d03f      	beq.n	800861a <_vfiprintf_r+0x20a>
 800859a:	4b26      	ldr	r3, [pc, #152]	@ (8008634 <_vfiprintf_r+0x224>)
 800859c:	bb1b      	cbnz	r3, 80085e6 <_vfiprintf_r+0x1d6>
 800859e:	9b03      	ldr	r3, [sp, #12]
 80085a0:	3307      	adds	r3, #7
 80085a2:	f023 0307 	bic.w	r3, r3, #7
 80085a6:	3308      	adds	r3, #8
 80085a8:	9303      	str	r3, [sp, #12]
 80085aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085ac:	443b      	add	r3, r7
 80085ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80085b0:	e76a      	b.n	8008488 <_vfiprintf_r+0x78>
 80085b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80085b6:	460c      	mov	r4, r1
 80085b8:	2001      	movs	r0, #1
 80085ba:	e7a8      	b.n	800850e <_vfiprintf_r+0xfe>
 80085bc:	2300      	movs	r3, #0
 80085be:	3401      	adds	r4, #1
 80085c0:	9305      	str	r3, [sp, #20]
 80085c2:	4619      	mov	r1, r3
 80085c4:	f04f 0c0a 	mov.w	ip, #10
 80085c8:	4620      	mov	r0, r4
 80085ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085ce:	3a30      	subs	r2, #48	@ 0x30
 80085d0:	2a09      	cmp	r2, #9
 80085d2:	d903      	bls.n	80085dc <_vfiprintf_r+0x1cc>
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d0c6      	beq.n	8008566 <_vfiprintf_r+0x156>
 80085d8:	9105      	str	r1, [sp, #20]
 80085da:	e7c4      	b.n	8008566 <_vfiprintf_r+0x156>
 80085dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80085e0:	4604      	mov	r4, r0
 80085e2:	2301      	movs	r3, #1
 80085e4:	e7f0      	b.n	80085c8 <_vfiprintf_r+0x1b8>
 80085e6:	ab03      	add	r3, sp, #12
 80085e8:	9300      	str	r3, [sp, #0]
 80085ea:	462a      	mov	r2, r5
 80085ec:	4b12      	ldr	r3, [pc, #72]	@ (8008638 <_vfiprintf_r+0x228>)
 80085ee:	a904      	add	r1, sp, #16
 80085f0:	4630      	mov	r0, r6
 80085f2:	f3af 8000 	nop.w
 80085f6:	4607      	mov	r7, r0
 80085f8:	1c78      	adds	r0, r7, #1
 80085fa:	d1d6      	bne.n	80085aa <_vfiprintf_r+0x19a>
 80085fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085fe:	07d9      	lsls	r1, r3, #31
 8008600:	d405      	bmi.n	800860e <_vfiprintf_r+0x1fe>
 8008602:	89ab      	ldrh	r3, [r5, #12]
 8008604:	059a      	lsls	r2, r3, #22
 8008606:	d402      	bmi.n	800860e <_vfiprintf_r+0x1fe>
 8008608:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800860a:	f7fe fd91 	bl	8007130 <__retarget_lock_release_recursive>
 800860e:	89ab      	ldrh	r3, [r5, #12]
 8008610:	065b      	lsls	r3, r3, #25
 8008612:	f53f af1f 	bmi.w	8008454 <_vfiprintf_r+0x44>
 8008616:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008618:	e71e      	b.n	8008458 <_vfiprintf_r+0x48>
 800861a:	ab03      	add	r3, sp, #12
 800861c:	9300      	str	r3, [sp, #0]
 800861e:	462a      	mov	r2, r5
 8008620:	4b05      	ldr	r3, [pc, #20]	@ (8008638 <_vfiprintf_r+0x228>)
 8008622:	a904      	add	r1, sp, #16
 8008624:	4630      	mov	r0, r6
 8008626:	f000 f879 	bl	800871c <_printf_i>
 800862a:	e7e4      	b.n	80085f6 <_vfiprintf_r+0x1e6>
 800862c:	080092c0 	.word	0x080092c0
 8008630:	080092ca 	.word	0x080092ca
 8008634:	00000000 	.word	0x00000000
 8008638:	080083ed 	.word	0x080083ed
 800863c:	080092c6 	.word	0x080092c6

08008640 <_printf_common>:
 8008640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008644:	4616      	mov	r6, r2
 8008646:	4698      	mov	r8, r3
 8008648:	688a      	ldr	r2, [r1, #8]
 800864a:	690b      	ldr	r3, [r1, #16]
 800864c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008650:	4293      	cmp	r3, r2
 8008652:	bfb8      	it	lt
 8008654:	4613      	movlt	r3, r2
 8008656:	6033      	str	r3, [r6, #0]
 8008658:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800865c:	4607      	mov	r7, r0
 800865e:	460c      	mov	r4, r1
 8008660:	b10a      	cbz	r2, 8008666 <_printf_common+0x26>
 8008662:	3301      	adds	r3, #1
 8008664:	6033      	str	r3, [r6, #0]
 8008666:	6823      	ldr	r3, [r4, #0]
 8008668:	0699      	lsls	r1, r3, #26
 800866a:	bf42      	ittt	mi
 800866c:	6833      	ldrmi	r3, [r6, #0]
 800866e:	3302      	addmi	r3, #2
 8008670:	6033      	strmi	r3, [r6, #0]
 8008672:	6825      	ldr	r5, [r4, #0]
 8008674:	f015 0506 	ands.w	r5, r5, #6
 8008678:	d106      	bne.n	8008688 <_printf_common+0x48>
 800867a:	f104 0a19 	add.w	sl, r4, #25
 800867e:	68e3      	ldr	r3, [r4, #12]
 8008680:	6832      	ldr	r2, [r6, #0]
 8008682:	1a9b      	subs	r3, r3, r2
 8008684:	42ab      	cmp	r3, r5
 8008686:	dc26      	bgt.n	80086d6 <_printf_common+0x96>
 8008688:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800868c:	6822      	ldr	r2, [r4, #0]
 800868e:	3b00      	subs	r3, #0
 8008690:	bf18      	it	ne
 8008692:	2301      	movne	r3, #1
 8008694:	0692      	lsls	r2, r2, #26
 8008696:	d42b      	bmi.n	80086f0 <_printf_common+0xb0>
 8008698:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800869c:	4641      	mov	r1, r8
 800869e:	4638      	mov	r0, r7
 80086a0:	47c8      	blx	r9
 80086a2:	3001      	adds	r0, #1
 80086a4:	d01e      	beq.n	80086e4 <_printf_common+0xa4>
 80086a6:	6823      	ldr	r3, [r4, #0]
 80086a8:	6922      	ldr	r2, [r4, #16]
 80086aa:	f003 0306 	and.w	r3, r3, #6
 80086ae:	2b04      	cmp	r3, #4
 80086b0:	bf02      	ittt	eq
 80086b2:	68e5      	ldreq	r5, [r4, #12]
 80086b4:	6833      	ldreq	r3, [r6, #0]
 80086b6:	1aed      	subeq	r5, r5, r3
 80086b8:	68a3      	ldr	r3, [r4, #8]
 80086ba:	bf0c      	ite	eq
 80086bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086c0:	2500      	movne	r5, #0
 80086c2:	4293      	cmp	r3, r2
 80086c4:	bfc4      	itt	gt
 80086c6:	1a9b      	subgt	r3, r3, r2
 80086c8:	18ed      	addgt	r5, r5, r3
 80086ca:	2600      	movs	r6, #0
 80086cc:	341a      	adds	r4, #26
 80086ce:	42b5      	cmp	r5, r6
 80086d0:	d11a      	bne.n	8008708 <_printf_common+0xc8>
 80086d2:	2000      	movs	r0, #0
 80086d4:	e008      	b.n	80086e8 <_printf_common+0xa8>
 80086d6:	2301      	movs	r3, #1
 80086d8:	4652      	mov	r2, sl
 80086da:	4641      	mov	r1, r8
 80086dc:	4638      	mov	r0, r7
 80086de:	47c8      	blx	r9
 80086e0:	3001      	adds	r0, #1
 80086e2:	d103      	bne.n	80086ec <_printf_common+0xac>
 80086e4:	f04f 30ff 	mov.w	r0, #4294967295
 80086e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ec:	3501      	adds	r5, #1
 80086ee:	e7c6      	b.n	800867e <_printf_common+0x3e>
 80086f0:	18e1      	adds	r1, r4, r3
 80086f2:	1c5a      	adds	r2, r3, #1
 80086f4:	2030      	movs	r0, #48	@ 0x30
 80086f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80086fa:	4422      	add	r2, r4
 80086fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008700:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008704:	3302      	adds	r3, #2
 8008706:	e7c7      	b.n	8008698 <_printf_common+0x58>
 8008708:	2301      	movs	r3, #1
 800870a:	4622      	mov	r2, r4
 800870c:	4641      	mov	r1, r8
 800870e:	4638      	mov	r0, r7
 8008710:	47c8      	blx	r9
 8008712:	3001      	adds	r0, #1
 8008714:	d0e6      	beq.n	80086e4 <_printf_common+0xa4>
 8008716:	3601      	adds	r6, #1
 8008718:	e7d9      	b.n	80086ce <_printf_common+0x8e>
	...

0800871c <_printf_i>:
 800871c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008720:	7e0f      	ldrb	r7, [r1, #24]
 8008722:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008724:	2f78      	cmp	r7, #120	@ 0x78
 8008726:	4691      	mov	r9, r2
 8008728:	4680      	mov	r8, r0
 800872a:	460c      	mov	r4, r1
 800872c:	469a      	mov	sl, r3
 800872e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008732:	d807      	bhi.n	8008744 <_printf_i+0x28>
 8008734:	2f62      	cmp	r7, #98	@ 0x62
 8008736:	d80a      	bhi.n	800874e <_printf_i+0x32>
 8008738:	2f00      	cmp	r7, #0
 800873a:	f000 80d2 	beq.w	80088e2 <_printf_i+0x1c6>
 800873e:	2f58      	cmp	r7, #88	@ 0x58
 8008740:	f000 80b9 	beq.w	80088b6 <_printf_i+0x19a>
 8008744:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008748:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800874c:	e03a      	b.n	80087c4 <_printf_i+0xa8>
 800874e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008752:	2b15      	cmp	r3, #21
 8008754:	d8f6      	bhi.n	8008744 <_printf_i+0x28>
 8008756:	a101      	add	r1, pc, #4	@ (adr r1, 800875c <_printf_i+0x40>)
 8008758:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800875c:	080087b5 	.word	0x080087b5
 8008760:	080087c9 	.word	0x080087c9
 8008764:	08008745 	.word	0x08008745
 8008768:	08008745 	.word	0x08008745
 800876c:	08008745 	.word	0x08008745
 8008770:	08008745 	.word	0x08008745
 8008774:	080087c9 	.word	0x080087c9
 8008778:	08008745 	.word	0x08008745
 800877c:	08008745 	.word	0x08008745
 8008780:	08008745 	.word	0x08008745
 8008784:	08008745 	.word	0x08008745
 8008788:	080088c9 	.word	0x080088c9
 800878c:	080087f3 	.word	0x080087f3
 8008790:	08008883 	.word	0x08008883
 8008794:	08008745 	.word	0x08008745
 8008798:	08008745 	.word	0x08008745
 800879c:	080088eb 	.word	0x080088eb
 80087a0:	08008745 	.word	0x08008745
 80087a4:	080087f3 	.word	0x080087f3
 80087a8:	08008745 	.word	0x08008745
 80087ac:	08008745 	.word	0x08008745
 80087b0:	0800888b 	.word	0x0800888b
 80087b4:	6833      	ldr	r3, [r6, #0]
 80087b6:	1d1a      	adds	r2, r3, #4
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	6032      	str	r2, [r6, #0]
 80087bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80087c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80087c4:	2301      	movs	r3, #1
 80087c6:	e09d      	b.n	8008904 <_printf_i+0x1e8>
 80087c8:	6833      	ldr	r3, [r6, #0]
 80087ca:	6820      	ldr	r0, [r4, #0]
 80087cc:	1d19      	adds	r1, r3, #4
 80087ce:	6031      	str	r1, [r6, #0]
 80087d0:	0606      	lsls	r6, r0, #24
 80087d2:	d501      	bpl.n	80087d8 <_printf_i+0xbc>
 80087d4:	681d      	ldr	r5, [r3, #0]
 80087d6:	e003      	b.n	80087e0 <_printf_i+0xc4>
 80087d8:	0645      	lsls	r5, r0, #25
 80087da:	d5fb      	bpl.n	80087d4 <_printf_i+0xb8>
 80087dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80087e0:	2d00      	cmp	r5, #0
 80087e2:	da03      	bge.n	80087ec <_printf_i+0xd0>
 80087e4:	232d      	movs	r3, #45	@ 0x2d
 80087e6:	426d      	negs	r5, r5
 80087e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087ec:	4859      	ldr	r0, [pc, #356]	@ (8008954 <_printf_i+0x238>)
 80087ee:	230a      	movs	r3, #10
 80087f0:	e011      	b.n	8008816 <_printf_i+0xfa>
 80087f2:	6821      	ldr	r1, [r4, #0]
 80087f4:	6833      	ldr	r3, [r6, #0]
 80087f6:	0608      	lsls	r0, r1, #24
 80087f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80087fc:	d402      	bmi.n	8008804 <_printf_i+0xe8>
 80087fe:	0649      	lsls	r1, r1, #25
 8008800:	bf48      	it	mi
 8008802:	b2ad      	uxthmi	r5, r5
 8008804:	2f6f      	cmp	r7, #111	@ 0x6f
 8008806:	4853      	ldr	r0, [pc, #332]	@ (8008954 <_printf_i+0x238>)
 8008808:	6033      	str	r3, [r6, #0]
 800880a:	bf14      	ite	ne
 800880c:	230a      	movne	r3, #10
 800880e:	2308      	moveq	r3, #8
 8008810:	2100      	movs	r1, #0
 8008812:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008816:	6866      	ldr	r6, [r4, #4]
 8008818:	60a6      	str	r6, [r4, #8]
 800881a:	2e00      	cmp	r6, #0
 800881c:	bfa2      	ittt	ge
 800881e:	6821      	ldrge	r1, [r4, #0]
 8008820:	f021 0104 	bicge.w	r1, r1, #4
 8008824:	6021      	strge	r1, [r4, #0]
 8008826:	b90d      	cbnz	r5, 800882c <_printf_i+0x110>
 8008828:	2e00      	cmp	r6, #0
 800882a:	d04b      	beq.n	80088c4 <_printf_i+0x1a8>
 800882c:	4616      	mov	r6, r2
 800882e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008832:	fb03 5711 	mls	r7, r3, r1, r5
 8008836:	5dc7      	ldrb	r7, [r0, r7]
 8008838:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800883c:	462f      	mov	r7, r5
 800883e:	42bb      	cmp	r3, r7
 8008840:	460d      	mov	r5, r1
 8008842:	d9f4      	bls.n	800882e <_printf_i+0x112>
 8008844:	2b08      	cmp	r3, #8
 8008846:	d10b      	bne.n	8008860 <_printf_i+0x144>
 8008848:	6823      	ldr	r3, [r4, #0]
 800884a:	07df      	lsls	r7, r3, #31
 800884c:	d508      	bpl.n	8008860 <_printf_i+0x144>
 800884e:	6923      	ldr	r3, [r4, #16]
 8008850:	6861      	ldr	r1, [r4, #4]
 8008852:	4299      	cmp	r1, r3
 8008854:	bfde      	ittt	le
 8008856:	2330      	movle	r3, #48	@ 0x30
 8008858:	f806 3c01 	strble.w	r3, [r6, #-1]
 800885c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008860:	1b92      	subs	r2, r2, r6
 8008862:	6122      	str	r2, [r4, #16]
 8008864:	f8cd a000 	str.w	sl, [sp]
 8008868:	464b      	mov	r3, r9
 800886a:	aa03      	add	r2, sp, #12
 800886c:	4621      	mov	r1, r4
 800886e:	4640      	mov	r0, r8
 8008870:	f7ff fee6 	bl	8008640 <_printf_common>
 8008874:	3001      	adds	r0, #1
 8008876:	d14a      	bne.n	800890e <_printf_i+0x1f2>
 8008878:	f04f 30ff 	mov.w	r0, #4294967295
 800887c:	b004      	add	sp, #16
 800887e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008882:	6823      	ldr	r3, [r4, #0]
 8008884:	f043 0320 	orr.w	r3, r3, #32
 8008888:	6023      	str	r3, [r4, #0]
 800888a:	4833      	ldr	r0, [pc, #204]	@ (8008958 <_printf_i+0x23c>)
 800888c:	2778      	movs	r7, #120	@ 0x78
 800888e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008892:	6823      	ldr	r3, [r4, #0]
 8008894:	6831      	ldr	r1, [r6, #0]
 8008896:	061f      	lsls	r7, r3, #24
 8008898:	f851 5b04 	ldr.w	r5, [r1], #4
 800889c:	d402      	bmi.n	80088a4 <_printf_i+0x188>
 800889e:	065f      	lsls	r7, r3, #25
 80088a0:	bf48      	it	mi
 80088a2:	b2ad      	uxthmi	r5, r5
 80088a4:	6031      	str	r1, [r6, #0]
 80088a6:	07d9      	lsls	r1, r3, #31
 80088a8:	bf44      	itt	mi
 80088aa:	f043 0320 	orrmi.w	r3, r3, #32
 80088ae:	6023      	strmi	r3, [r4, #0]
 80088b0:	b11d      	cbz	r5, 80088ba <_printf_i+0x19e>
 80088b2:	2310      	movs	r3, #16
 80088b4:	e7ac      	b.n	8008810 <_printf_i+0xf4>
 80088b6:	4827      	ldr	r0, [pc, #156]	@ (8008954 <_printf_i+0x238>)
 80088b8:	e7e9      	b.n	800888e <_printf_i+0x172>
 80088ba:	6823      	ldr	r3, [r4, #0]
 80088bc:	f023 0320 	bic.w	r3, r3, #32
 80088c0:	6023      	str	r3, [r4, #0]
 80088c2:	e7f6      	b.n	80088b2 <_printf_i+0x196>
 80088c4:	4616      	mov	r6, r2
 80088c6:	e7bd      	b.n	8008844 <_printf_i+0x128>
 80088c8:	6833      	ldr	r3, [r6, #0]
 80088ca:	6825      	ldr	r5, [r4, #0]
 80088cc:	6961      	ldr	r1, [r4, #20]
 80088ce:	1d18      	adds	r0, r3, #4
 80088d0:	6030      	str	r0, [r6, #0]
 80088d2:	062e      	lsls	r6, r5, #24
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	d501      	bpl.n	80088dc <_printf_i+0x1c0>
 80088d8:	6019      	str	r1, [r3, #0]
 80088da:	e002      	b.n	80088e2 <_printf_i+0x1c6>
 80088dc:	0668      	lsls	r0, r5, #25
 80088de:	d5fb      	bpl.n	80088d8 <_printf_i+0x1bc>
 80088e0:	8019      	strh	r1, [r3, #0]
 80088e2:	2300      	movs	r3, #0
 80088e4:	6123      	str	r3, [r4, #16]
 80088e6:	4616      	mov	r6, r2
 80088e8:	e7bc      	b.n	8008864 <_printf_i+0x148>
 80088ea:	6833      	ldr	r3, [r6, #0]
 80088ec:	1d1a      	adds	r2, r3, #4
 80088ee:	6032      	str	r2, [r6, #0]
 80088f0:	681e      	ldr	r6, [r3, #0]
 80088f2:	6862      	ldr	r2, [r4, #4]
 80088f4:	2100      	movs	r1, #0
 80088f6:	4630      	mov	r0, r6
 80088f8:	f7f7 fc7a 	bl	80001f0 <memchr>
 80088fc:	b108      	cbz	r0, 8008902 <_printf_i+0x1e6>
 80088fe:	1b80      	subs	r0, r0, r6
 8008900:	6060      	str	r0, [r4, #4]
 8008902:	6863      	ldr	r3, [r4, #4]
 8008904:	6123      	str	r3, [r4, #16]
 8008906:	2300      	movs	r3, #0
 8008908:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800890c:	e7aa      	b.n	8008864 <_printf_i+0x148>
 800890e:	6923      	ldr	r3, [r4, #16]
 8008910:	4632      	mov	r2, r6
 8008912:	4649      	mov	r1, r9
 8008914:	4640      	mov	r0, r8
 8008916:	47d0      	blx	sl
 8008918:	3001      	adds	r0, #1
 800891a:	d0ad      	beq.n	8008878 <_printf_i+0x15c>
 800891c:	6823      	ldr	r3, [r4, #0]
 800891e:	079b      	lsls	r3, r3, #30
 8008920:	d413      	bmi.n	800894a <_printf_i+0x22e>
 8008922:	68e0      	ldr	r0, [r4, #12]
 8008924:	9b03      	ldr	r3, [sp, #12]
 8008926:	4298      	cmp	r0, r3
 8008928:	bfb8      	it	lt
 800892a:	4618      	movlt	r0, r3
 800892c:	e7a6      	b.n	800887c <_printf_i+0x160>
 800892e:	2301      	movs	r3, #1
 8008930:	4632      	mov	r2, r6
 8008932:	4649      	mov	r1, r9
 8008934:	4640      	mov	r0, r8
 8008936:	47d0      	blx	sl
 8008938:	3001      	adds	r0, #1
 800893a:	d09d      	beq.n	8008878 <_printf_i+0x15c>
 800893c:	3501      	adds	r5, #1
 800893e:	68e3      	ldr	r3, [r4, #12]
 8008940:	9903      	ldr	r1, [sp, #12]
 8008942:	1a5b      	subs	r3, r3, r1
 8008944:	42ab      	cmp	r3, r5
 8008946:	dcf2      	bgt.n	800892e <_printf_i+0x212>
 8008948:	e7eb      	b.n	8008922 <_printf_i+0x206>
 800894a:	2500      	movs	r5, #0
 800894c:	f104 0619 	add.w	r6, r4, #25
 8008950:	e7f5      	b.n	800893e <_printf_i+0x222>
 8008952:	bf00      	nop
 8008954:	080092d1 	.word	0x080092d1
 8008958:	080092e2 	.word	0x080092e2

0800895c <__sflush_r>:
 800895c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008964:	0716      	lsls	r6, r2, #28
 8008966:	4605      	mov	r5, r0
 8008968:	460c      	mov	r4, r1
 800896a:	d454      	bmi.n	8008a16 <__sflush_r+0xba>
 800896c:	684b      	ldr	r3, [r1, #4]
 800896e:	2b00      	cmp	r3, #0
 8008970:	dc02      	bgt.n	8008978 <__sflush_r+0x1c>
 8008972:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008974:	2b00      	cmp	r3, #0
 8008976:	dd48      	ble.n	8008a0a <__sflush_r+0xae>
 8008978:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800897a:	2e00      	cmp	r6, #0
 800897c:	d045      	beq.n	8008a0a <__sflush_r+0xae>
 800897e:	2300      	movs	r3, #0
 8008980:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008984:	682f      	ldr	r7, [r5, #0]
 8008986:	6a21      	ldr	r1, [r4, #32]
 8008988:	602b      	str	r3, [r5, #0]
 800898a:	d030      	beq.n	80089ee <__sflush_r+0x92>
 800898c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800898e:	89a3      	ldrh	r3, [r4, #12]
 8008990:	0759      	lsls	r1, r3, #29
 8008992:	d505      	bpl.n	80089a0 <__sflush_r+0x44>
 8008994:	6863      	ldr	r3, [r4, #4]
 8008996:	1ad2      	subs	r2, r2, r3
 8008998:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800899a:	b10b      	cbz	r3, 80089a0 <__sflush_r+0x44>
 800899c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800899e:	1ad2      	subs	r2, r2, r3
 80089a0:	2300      	movs	r3, #0
 80089a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089a4:	6a21      	ldr	r1, [r4, #32]
 80089a6:	4628      	mov	r0, r5
 80089a8:	47b0      	blx	r6
 80089aa:	1c43      	adds	r3, r0, #1
 80089ac:	89a3      	ldrh	r3, [r4, #12]
 80089ae:	d106      	bne.n	80089be <__sflush_r+0x62>
 80089b0:	6829      	ldr	r1, [r5, #0]
 80089b2:	291d      	cmp	r1, #29
 80089b4:	d82b      	bhi.n	8008a0e <__sflush_r+0xb2>
 80089b6:	4a2a      	ldr	r2, [pc, #168]	@ (8008a60 <__sflush_r+0x104>)
 80089b8:	410a      	asrs	r2, r1
 80089ba:	07d6      	lsls	r6, r2, #31
 80089bc:	d427      	bmi.n	8008a0e <__sflush_r+0xb2>
 80089be:	2200      	movs	r2, #0
 80089c0:	6062      	str	r2, [r4, #4]
 80089c2:	04d9      	lsls	r1, r3, #19
 80089c4:	6922      	ldr	r2, [r4, #16]
 80089c6:	6022      	str	r2, [r4, #0]
 80089c8:	d504      	bpl.n	80089d4 <__sflush_r+0x78>
 80089ca:	1c42      	adds	r2, r0, #1
 80089cc:	d101      	bne.n	80089d2 <__sflush_r+0x76>
 80089ce:	682b      	ldr	r3, [r5, #0]
 80089d0:	b903      	cbnz	r3, 80089d4 <__sflush_r+0x78>
 80089d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80089d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089d6:	602f      	str	r7, [r5, #0]
 80089d8:	b1b9      	cbz	r1, 8008a0a <__sflush_r+0xae>
 80089da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089de:	4299      	cmp	r1, r3
 80089e0:	d002      	beq.n	80089e8 <__sflush_r+0x8c>
 80089e2:	4628      	mov	r0, r5
 80089e4:	f7fe fbe0 	bl	80071a8 <_free_r>
 80089e8:	2300      	movs	r3, #0
 80089ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80089ec:	e00d      	b.n	8008a0a <__sflush_r+0xae>
 80089ee:	2301      	movs	r3, #1
 80089f0:	4628      	mov	r0, r5
 80089f2:	47b0      	blx	r6
 80089f4:	4602      	mov	r2, r0
 80089f6:	1c50      	adds	r0, r2, #1
 80089f8:	d1c9      	bne.n	800898e <__sflush_r+0x32>
 80089fa:	682b      	ldr	r3, [r5, #0]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d0c6      	beq.n	800898e <__sflush_r+0x32>
 8008a00:	2b1d      	cmp	r3, #29
 8008a02:	d001      	beq.n	8008a08 <__sflush_r+0xac>
 8008a04:	2b16      	cmp	r3, #22
 8008a06:	d11e      	bne.n	8008a46 <__sflush_r+0xea>
 8008a08:	602f      	str	r7, [r5, #0]
 8008a0a:	2000      	movs	r0, #0
 8008a0c:	e022      	b.n	8008a54 <__sflush_r+0xf8>
 8008a0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a12:	b21b      	sxth	r3, r3
 8008a14:	e01b      	b.n	8008a4e <__sflush_r+0xf2>
 8008a16:	690f      	ldr	r7, [r1, #16]
 8008a18:	2f00      	cmp	r7, #0
 8008a1a:	d0f6      	beq.n	8008a0a <__sflush_r+0xae>
 8008a1c:	0793      	lsls	r3, r2, #30
 8008a1e:	680e      	ldr	r6, [r1, #0]
 8008a20:	bf08      	it	eq
 8008a22:	694b      	ldreq	r3, [r1, #20]
 8008a24:	600f      	str	r7, [r1, #0]
 8008a26:	bf18      	it	ne
 8008a28:	2300      	movne	r3, #0
 8008a2a:	eba6 0807 	sub.w	r8, r6, r7
 8008a2e:	608b      	str	r3, [r1, #8]
 8008a30:	f1b8 0f00 	cmp.w	r8, #0
 8008a34:	dde9      	ble.n	8008a0a <__sflush_r+0xae>
 8008a36:	6a21      	ldr	r1, [r4, #32]
 8008a38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008a3a:	4643      	mov	r3, r8
 8008a3c:	463a      	mov	r2, r7
 8008a3e:	4628      	mov	r0, r5
 8008a40:	47b0      	blx	r6
 8008a42:	2800      	cmp	r0, #0
 8008a44:	dc08      	bgt.n	8008a58 <__sflush_r+0xfc>
 8008a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a4e:	81a3      	strh	r3, [r4, #12]
 8008a50:	f04f 30ff 	mov.w	r0, #4294967295
 8008a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a58:	4407      	add	r7, r0
 8008a5a:	eba8 0800 	sub.w	r8, r8, r0
 8008a5e:	e7e7      	b.n	8008a30 <__sflush_r+0xd4>
 8008a60:	dfbffffe 	.word	0xdfbffffe

08008a64 <_fflush_r>:
 8008a64:	b538      	push	{r3, r4, r5, lr}
 8008a66:	690b      	ldr	r3, [r1, #16]
 8008a68:	4605      	mov	r5, r0
 8008a6a:	460c      	mov	r4, r1
 8008a6c:	b913      	cbnz	r3, 8008a74 <_fflush_r+0x10>
 8008a6e:	2500      	movs	r5, #0
 8008a70:	4628      	mov	r0, r5
 8008a72:	bd38      	pop	{r3, r4, r5, pc}
 8008a74:	b118      	cbz	r0, 8008a7e <_fflush_r+0x1a>
 8008a76:	6a03      	ldr	r3, [r0, #32]
 8008a78:	b90b      	cbnz	r3, 8008a7e <_fflush_r+0x1a>
 8008a7a:	f7fe f9dd 	bl	8006e38 <__sinit>
 8008a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d0f3      	beq.n	8008a6e <_fflush_r+0xa>
 8008a86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008a88:	07d0      	lsls	r0, r2, #31
 8008a8a:	d404      	bmi.n	8008a96 <_fflush_r+0x32>
 8008a8c:	0599      	lsls	r1, r3, #22
 8008a8e:	d402      	bmi.n	8008a96 <_fflush_r+0x32>
 8008a90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a92:	f7fe fb4c 	bl	800712e <__retarget_lock_acquire_recursive>
 8008a96:	4628      	mov	r0, r5
 8008a98:	4621      	mov	r1, r4
 8008a9a:	f7ff ff5f 	bl	800895c <__sflush_r>
 8008a9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008aa0:	07da      	lsls	r2, r3, #31
 8008aa2:	4605      	mov	r5, r0
 8008aa4:	d4e4      	bmi.n	8008a70 <_fflush_r+0xc>
 8008aa6:	89a3      	ldrh	r3, [r4, #12]
 8008aa8:	059b      	lsls	r3, r3, #22
 8008aaa:	d4e1      	bmi.n	8008a70 <_fflush_r+0xc>
 8008aac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008aae:	f7fe fb3f 	bl	8007130 <__retarget_lock_release_recursive>
 8008ab2:	e7dd      	b.n	8008a70 <_fflush_r+0xc>

08008ab4 <fiprintf>:
 8008ab4:	b40e      	push	{r1, r2, r3}
 8008ab6:	b503      	push	{r0, r1, lr}
 8008ab8:	4601      	mov	r1, r0
 8008aba:	ab03      	add	r3, sp, #12
 8008abc:	4805      	ldr	r0, [pc, #20]	@ (8008ad4 <fiprintf+0x20>)
 8008abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ac2:	6800      	ldr	r0, [r0, #0]
 8008ac4:	9301      	str	r3, [sp, #4]
 8008ac6:	f7ff fca3 	bl	8008410 <_vfiprintf_r>
 8008aca:	b002      	add	sp, #8
 8008acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ad0:	b003      	add	sp, #12
 8008ad2:	4770      	bx	lr
 8008ad4:	200001ac 	.word	0x200001ac

08008ad8 <_putc_r>:
 8008ad8:	b570      	push	{r4, r5, r6, lr}
 8008ada:	460d      	mov	r5, r1
 8008adc:	4614      	mov	r4, r2
 8008ade:	4606      	mov	r6, r0
 8008ae0:	b118      	cbz	r0, 8008aea <_putc_r+0x12>
 8008ae2:	6a03      	ldr	r3, [r0, #32]
 8008ae4:	b90b      	cbnz	r3, 8008aea <_putc_r+0x12>
 8008ae6:	f7fe f9a7 	bl	8006e38 <__sinit>
 8008aea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008aec:	07d8      	lsls	r0, r3, #31
 8008aee:	d405      	bmi.n	8008afc <_putc_r+0x24>
 8008af0:	89a3      	ldrh	r3, [r4, #12]
 8008af2:	0599      	lsls	r1, r3, #22
 8008af4:	d402      	bmi.n	8008afc <_putc_r+0x24>
 8008af6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008af8:	f7fe fb19 	bl	800712e <__retarget_lock_acquire_recursive>
 8008afc:	68a3      	ldr	r3, [r4, #8]
 8008afe:	3b01      	subs	r3, #1
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	60a3      	str	r3, [r4, #8]
 8008b04:	da05      	bge.n	8008b12 <_putc_r+0x3a>
 8008b06:	69a2      	ldr	r2, [r4, #24]
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	db12      	blt.n	8008b32 <_putc_r+0x5a>
 8008b0c:	b2eb      	uxtb	r3, r5
 8008b0e:	2b0a      	cmp	r3, #10
 8008b10:	d00f      	beq.n	8008b32 <_putc_r+0x5a>
 8008b12:	6823      	ldr	r3, [r4, #0]
 8008b14:	1c5a      	adds	r2, r3, #1
 8008b16:	6022      	str	r2, [r4, #0]
 8008b18:	701d      	strb	r5, [r3, #0]
 8008b1a:	b2ed      	uxtb	r5, r5
 8008b1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b1e:	07da      	lsls	r2, r3, #31
 8008b20:	d405      	bmi.n	8008b2e <_putc_r+0x56>
 8008b22:	89a3      	ldrh	r3, [r4, #12]
 8008b24:	059b      	lsls	r3, r3, #22
 8008b26:	d402      	bmi.n	8008b2e <_putc_r+0x56>
 8008b28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b2a:	f7fe fb01 	bl	8007130 <__retarget_lock_release_recursive>
 8008b2e:	4628      	mov	r0, r5
 8008b30:	bd70      	pop	{r4, r5, r6, pc}
 8008b32:	4629      	mov	r1, r5
 8008b34:	4622      	mov	r2, r4
 8008b36:	4630      	mov	r0, r6
 8008b38:	f000 f802 	bl	8008b40 <__swbuf_r>
 8008b3c:	4605      	mov	r5, r0
 8008b3e:	e7ed      	b.n	8008b1c <_putc_r+0x44>

08008b40 <__swbuf_r>:
 8008b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b42:	460e      	mov	r6, r1
 8008b44:	4614      	mov	r4, r2
 8008b46:	4605      	mov	r5, r0
 8008b48:	b118      	cbz	r0, 8008b52 <__swbuf_r+0x12>
 8008b4a:	6a03      	ldr	r3, [r0, #32]
 8008b4c:	b90b      	cbnz	r3, 8008b52 <__swbuf_r+0x12>
 8008b4e:	f7fe f973 	bl	8006e38 <__sinit>
 8008b52:	69a3      	ldr	r3, [r4, #24]
 8008b54:	60a3      	str	r3, [r4, #8]
 8008b56:	89a3      	ldrh	r3, [r4, #12]
 8008b58:	071a      	lsls	r2, r3, #28
 8008b5a:	d501      	bpl.n	8008b60 <__swbuf_r+0x20>
 8008b5c:	6923      	ldr	r3, [r4, #16]
 8008b5e:	b943      	cbnz	r3, 8008b72 <__swbuf_r+0x32>
 8008b60:	4621      	mov	r1, r4
 8008b62:	4628      	mov	r0, r5
 8008b64:	f000 f82a 	bl	8008bbc <__swsetup_r>
 8008b68:	b118      	cbz	r0, 8008b72 <__swbuf_r+0x32>
 8008b6a:	f04f 37ff 	mov.w	r7, #4294967295
 8008b6e:	4638      	mov	r0, r7
 8008b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b72:	6823      	ldr	r3, [r4, #0]
 8008b74:	6922      	ldr	r2, [r4, #16]
 8008b76:	1a98      	subs	r0, r3, r2
 8008b78:	6963      	ldr	r3, [r4, #20]
 8008b7a:	b2f6      	uxtb	r6, r6
 8008b7c:	4283      	cmp	r3, r0
 8008b7e:	4637      	mov	r7, r6
 8008b80:	dc05      	bgt.n	8008b8e <__swbuf_r+0x4e>
 8008b82:	4621      	mov	r1, r4
 8008b84:	4628      	mov	r0, r5
 8008b86:	f7ff ff6d 	bl	8008a64 <_fflush_r>
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	d1ed      	bne.n	8008b6a <__swbuf_r+0x2a>
 8008b8e:	68a3      	ldr	r3, [r4, #8]
 8008b90:	3b01      	subs	r3, #1
 8008b92:	60a3      	str	r3, [r4, #8]
 8008b94:	6823      	ldr	r3, [r4, #0]
 8008b96:	1c5a      	adds	r2, r3, #1
 8008b98:	6022      	str	r2, [r4, #0]
 8008b9a:	701e      	strb	r6, [r3, #0]
 8008b9c:	6962      	ldr	r2, [r4, #20]
 8008b9e:	1c43      	adds	r3, r0, #1
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d004      	beq.n	8008bae <__swbuf_r+0x6e>
 8008ba4:	89a3      	ldrh	r3, [r4, #12]
 8008ba6:	07db      	lsls	r3, r3, #31
 8008ba8:	d5e1      	bpl.n	8008b6e <__swbuf_r+0x2e>
 8008baa:	2e0a      	cmp	r6, #10
 8008bac:	d1df      	bne.n	8008b6e <__swbuf_r+0x2e>
 8008bae:	4621      	mov	r1, r4
 8008bb0:	4628      	mov	r0, r5
 8008bb2:	f7ff ff57 	bl	8008a64 <_fflush_r>
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	d0d9      	beq.n	8008b6e <__swbuf_r+0x2e>
 8008bba:	e7d6      	b.n	8008b6a <__swbuf_r+0x2a>

08008bbc <__swsetup_r>:
 8008bbc:	b538      	push	{r3, r4, r5, lr}
 8008bbe:	4b29      	ldr	r3, [pc, #164]	@ (8008c64 <__swsetup_r+0xa8>)
 8008bc0:	4605      	mov	r5, r0
 8008bc2:	6818      	ldr	r0, [r3, #0]
 8008bc4:	460c      	mov	r4, r1
 8008bc6:	b118      	cbz	r0, 8008bd0 <__swsetup_r+0x14>
 8008bc8:	6a03      	ldr	r3, [r0, #32]
 8008bca:	b90b      	cbnz	r3, 8008bd0 <__swsetup_r+0x14>
 8008bcc:	f7fe f934 	bl	8006e38 <__sinit>
 8008bd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bd4:	0719      	lsls	r1, r3, #28
 8008bd6:	d422      	bmi.n	8008c1e <__swsetup_r+0x62>
 8008bd8:	06da      	lsls	r2, r3, #27
 8008bda:	d407      	bmi.n	8008bec <__swsetup_r+0x30>
 8008bdc:	2209      	movs	r2, #9
 8008bde:	602a      	str	r2, [r5, #0]
 8008be0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008be4:	81a3      	strh	r3, [r4, #12]
 8008be6:	f04f 30ff 	mov.w	r0, #4294967295
 8008bea:	e033      	b.n	8008c54 <__swsetup_r+0x98>
 8008bec:	0758      	lsls	r0, r3, #29
 8008bee:	d512      	bpl.n	8008c16 <__swsetup_r+0x5a>
 8008bf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008bf2:	b141      	cbz	r1, 8008c06 <__swsetup_r+0x4a>
 8008bf4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008bf8:	4299      	cmp	r1, r3
 8008bfa:	d002      	beq.n	8008c02 <__swsetup_r+0x46>
 8008bfc:	4628      	mov	r0, r5
 8008bfe:	f7fe fad3 	bl	80071a8 <_free_r>
 8008c02:	2300      	movs	r3, #0
 8008c04:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c06:	89a3      	ldrh	r3, [r4, #12]
 8008c08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008c0c:	81a3      	strh	r3, [r4, #12]
 8008c0e:	2300      	movs	r3, #0
 8008c10:	6063      	str	r3, [r4, #4]
 8008c12:	6923      	ldr	r3, [r4, #16]
 8008c14:	6023      	str	r3, [r4, #0]
 8008c16:	89a3      	ldrh	r3, [r4, #12]
 8008c18:	f043 0308 	orr.w	r3, r3, #8
 8008c1c:	81a3      	strh	r3, [r4, #12]
 8008c1e:	6923      	ldr	r3, [r4, #16]
 8008c20:	b94b      	cbnz	r3, 8008c36 <__swsetup_r+0x7a>
 8008c22:	89a3      	ldrh	r3, [r4, #12]
 8008c24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008c28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c2c:	d003      	beq.n	8008c36 <__swsetup_r+0x7a>
 8008c2e:	4621      	mov	r1, r4
 8008c30:	4628      	mov	r0, r5
 8008c32:	f000 f86a 	bl	8008d0a <__smakebuf_r>
 8008c36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c3a:	f013 0201 	ands.w	r2, r3, #1
 8008c3e:	d00a      	beq.n	8008c56 <__swsetup_r+0x9a>
 8008c40:	2200      	movs	r2, #0
 8008c42:	60a2      	str	r2, [r4, #8]
 8008c44:	6962      	ldr	r2, [r4, #20]
 8008c46:	4252      	negs	r2, r2
 8008c48:	61a2      	str	r2, [r4, #24]
 8008c4a:	6922      	ldr	r2, [r4, #16]
 8008c4c:	b942      	cbnz	r2, 8008c60 <__swsetup_r+0xa4>
 8008c4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008c52:	d1c5      	bne.n	8008be0 <__swsetup_r+0x24>
 8008c54:	bd38      	pop	{r3, r4, r5, pc}
 8008c56:	0799      	lsls	r1, r3, #30
 8008c58:	bf58      	it	pl
 8008c5a:	6962      	ldrpl	r2, [r4, #20]
 8008c5c:	60a2      	str	r2, [r4, #8]
 8008c5e:	e7f4      	b.n	8008c4a <__swsetup_r+0x8e>
 8008c60:	2000      	movs	r0, #0
 8008c62:	e7f7      	b.n	8008c54 <__swsetup_r+0x98>
 8008c64:	200001ac 	.word	0x200001ac

08008c68 <_sbrk_r>:
 8008c68:	b538      	push	{r3, r4, r5, lr}
 8008c6a:	4d06      	ldr	r5, [pc, #24]	@ (8008c84 <_sbrk_r+0x1c>)
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	4604      	mov	r4, r0
 8008c70:	4608      	mov	r0, r1
 8008c72:	602b      	str	r3, [r5, #0]
 8008c74:	f7f9 f898 	bl	8001da8 <_sbrk>
 8008c78:	1c43      	adds	r3, r0, #1
 8008c7a:	d102      	bne.n	8008c82 <_sbrk_r+0x1a>
 8008c7c:	682b      	ldr	r3, [r5, #0]
 8008c7e:	b103      	cbz	r3, 8008c82 <_sbrk_r+0x1a>
 8008c80:	6023      	str	r3, [r4, #0]
 8008c82:	bd38      	pop	{r3, r4, r5, pc}
 8008c84:	20000540 	.word	0x20000540

08008c88 <abort>:
 8008c88:	b508      	push	{r3, lr}
 8008c8a:	2006      	movs	r0, #6
 8008c8c:	f000 f8a2 	bl	8008dd4 <raise>
 8008c90:	2001      	movs	r0, #1
 8008c92:	f7f9 f811 	bl	8001cb8 <_exit>

08008c96 <_calloc_r>:
 8008c96:	b570      	push	{r4, r5, r6, lr}
 8008c98:	fba1 5402 	umull	r5, r4, r1, r2
 8008c9c:	b93c      	cbnz	r4, 8008cae <_calloc_r+0x18>
 8008c9e:	4629      	mov	r1, r5
 8008ca0:	f7fe fe30 	bl	8007904 <_malloc_r>
 8008ca4:	4606      	mov	r6, r0
 8008ca6:	b928      	cbnz	r0, 8008cb4 <_calloc_r+0x1e>
 8008ca8:	2600      	movs	r6, #0
 8008caa:	4630      	mov	r0, r6
 8008cac:	bd70      	pop	{r4, r5, r6, pc}
 8008cae:	220c      	movs	r2, #12
 8008cb0:	6002      	str	r2, [r0, #0]
 8008cb2:	e7f9      	b.n	8008ca8 <_calloc_r+0x12>
 8008cb4:	462a      	mov	r2, r5
 8008cb6:	4621      	mov	r1, r4
 8008cb8:	f7fe f951 	bl	8006f5e <memset>
 8008cbc:	e7f5      	b.n	8008caa <_calloc_r+0x14>

08008cbe <__swhatbuf_r>:
 8008cbe:	b570      	push	{r4, r5, r6, lr}
 8008cc0:	460c      	mov	r4, r1
 8008cc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cc6:	2900      	cmp	r1, #0
 8008cc8:	b096      	sub	sp, #88	@ 0x58
 8008cca:	4615      	mov	r5, r2
 8008ccc:	461e      	mov	r6, r3
 8008cce:	da0d      	bge.n	8008cec <__swhatbuf_r+0x2e>
 8008cd0:	89a3      	ldrh	r3, [r4, #12]
 8008cd2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008cd6:	f04f 0100 	mov.w	r1, #0
 8008cda:	bf14      	ite	ne
 8008cdc:	2340      	movne	r3, #64	@ 0x40
 8008cde:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008ce2:	2000      	movs	r0, #0
 8008ce4:	6031      	str	r1, [r6, #0]
 8008ce6:	602b      	str	r3, [r5, #0]
 8008ce8:	b016      	add	sp, #88	@ 0x58
 8008cea:	bd70      	pop	{r4, r5, r6, pc}
 8008cec:	466a      	mov	r2, sp
 8008cee:	f000 f879 	bl	8008de4 <_fstat_r>
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	dbec      	blt.n	8008cd0 <__swhatbuf_r+0x12>
 8008cf6:	9901      	ldr	r1, [sp, #4]
 8008cf8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008cfc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008d00:	4259      	negs	r1, r3
 8008d02:	4159      	adcs	r1, r3
 8008d04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d08:	e7eb      	b.n	8008ce2 <__swhatbuf_r+0x24>

08008d0a <__smakebuf_r>:
 8008d0a:	898b      	ldrh	r3, [r1, #12]
 8008d0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d0e:	079d      	lsls	r5, r3, #30
 8008d10:	4606      	mov	r6, r0
 8008d12:	460c      	mov	r4, r1
 8008d14:	d507      	bpl.n	8008d26 <__smakebuf_r+0x1c>
 8008d16:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008d1a:	6023      	str	r3, [r4, #0]
 8008d1c:	6123      	str	r3, [r4, #16]
 8008d1e:	2301      	movs	r3, #1
 8008d20:	6163      	str	r3, [r4, #20]
 8008d22:	b003      	add	sp, #12
 8008d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d26:	ab01      	add	r3, sp, #4
 8008d28:	466a      	mov	r2, sp
 8008d2a:	f7ff ffc8 	bl	8008cbe <__swhatbuf_r>
 8008d2e:	9f00      	ldr	r7, [sp, #0]
 8008d30:	4605      	mov	r5, r0
 8008d32:	4639      	mov	r1, r7
 8008d34:	4630      	mov	r0, r6
 8008d36:	f7fe fde5 	bl	8007904 <_malloc_r>
 8008d3a:	b948      	cbnz	r0, 8008d50 <__smakebuf_r+0x46>
 8008d3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d40:	059a      	lsls	r2, r3, #22
 8008d42:	d4ee      	bmi.n	8008d22 <__smakebuf_r+0x18>
 8008d44:	f023 0303 	bic.w	r3, r3, #3
 8008d48:	f043 0302 	orr.w	r3, r3, #2
 8008d4c:	81a3      	strh	r3, [r4, #12]
 8008d4e:	e7e2      	b.n	8008d16 <__smakebuf_r+0xc>
 8008d50:	89a3      	ldrh	r3, [r4, #12]
 8008d52:	6020      	str	r0, [r4, #0]
 8008d54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d58:	81a3      	strh	r3, [r4, #12]
 8008d5a:	9b01      	ldr	r3, [sp, #4]
 8008d5c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008d60:	b15b      	cbz	r3, 8008d7a <__smakebuf_r+0x70>
 8008d62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d66:	4630      	mov	r0, r6
 8008d68:	f000 f84e 	bl	8008e08 <_isatty_r>
 8008d6c:	b128      	cbz	r0, 8008d7a <__smakebuf_r+0x70>
 8008d6e:	89a3      	ldrh	r3, [r4, #12]
 8008d70:	f023 0303 	bic.w	r3, r3, #3
 8008d74:	f043 0301 	orr.w	r3, r3, #1
 8008d78:	81a3      	strh	r3, [r4, #12]
 8008d7a:	89a3      	ldrh	r3, [r4, #12]
 8008d7c:	431d      	orrs	r5, r3
 8008d7e:	81a5      	strh	r5, [r4, #12]
 8008d80:	e7cf      	b.n	8008d22 <__smakebuf_r+0x18>

08008d82 <_raise_r>:
 8008d82:	291f      	cmp	r1, #31
 8008d84:	b538      	push	{r3, r4, r5, lr}
 8008d86:	4605      	mov	r5, r0
 8008d88:	460c      	mov	r4, r1
 8008d8a:	d904      	bls.n	8008d96 <_raise_r+0x14>
 8008d8c:	2316      	movs	r3, #22
 8008d8e:	6003      	str	r3, [r0, #0]
 8008d90:	f04f 30ff 	mov.w	r0, #4294967295
 8008d94:	bd38      	pop	{r3, r4, r5, pc}
 8008d96:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008d98:	b112      	cbz	r2, 8008da0 <_raise_r+0x1e>
 8008d9a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d9e:	b94b      	cbnz	r3, 8008db4 <_raise_r+0x32>
 8008da0:	4628      	mov	r0, r5
 8008da2:	f000 f853 	bl	8008e4c <_getpid_r>
 8008da6:	4622      	mov	r2, r4
 8008da8:	4601      	mov	r1, r0
 8008daa:	4628      	mov	r0, r5
 8008dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008db0:	f000 b83a 	b.w	8008e28 <_kill_r>
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d00a      	beq.n	8008dce <_raise_r+0x4c>
 8008db8:	1c59      	adds	r1, r3, #1
 8008dba:	d103      	bne.n	8008dc4 <_raise_r+0x42>
 8008dbc:	2316      	movs	r3, #22
 8008dbe:	6003      	str	r3, [r0, #0]
 8008dc0:	2001      	movs	r0, #1
 8008dc2:	e7e7      	b.n	8008d94 <_raise_r+0x12>
 8008dc4:	2100      	movs	r1, #0
 8008dc6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008dca:	4620      	mov	r0, r4
 8008dcc:	4798      	blx	r3
 8008dce:	2000      	movs	r0, #0
 8008dd0:	e7e0      	b.n	8008d94 <_raise_r+0x12>
	...

08008dd4 <raise>:
 8008dd4:	4b02      	ldr	r3, [pc, #8]	@ (8008de0 <raise+0xc>)
 8008dd6:	4601      	mov	r1, r0
 8008dd8:	6818      	ldr	r0, [r3, #0]
 8008dda:	f7ff bfd2 	b.w	8008d82 <_raise_r>
 8008dde:	bf00      	nop
 8008de0:	200001ac 	.word	0x200001ac

08008de4 <_fstat_r>:
 8008de4:	b538      	push	{r3, r4, r5, lr}
 8008de6:	4d07      	ldr	r5, [pc, #28]	@ (8008e04 <_fstat_r+0x20>)
 8008de8:	2300      	movs	r3, #0
 8008dea:	4604      	mov	r4, r0
 8008dec:	4608      	mov	r0, r1
 8008dee:	4611      	mov	r1, r2
 8008df0:	602b      	str	r3, [r5, #0]
 8008df2:	f7f8 ffb1 	bl	8001d58 <_fstat>
 8008df6:	1c43      	adds	r3, r0, #1
 8008df8:	d102      	bne.n	8008e00 <_fstat_r+0x1c>
 8008dfa:	682b      	ldr	r3, [r5, #0]
 8008dfc:	b103      	cbz	r3, 8008e00 <_fstat_r+0x1c>
 8008dfe:	6023      	str	r3, [r4, #0]
 8008e00:	bd38      	pop	{r3, r4, r5, pc}
 8008e02:	bf00      	nop
 8008e04:	20000540 	.word	0x20000540

08008e08 <_isatty_r>:
 8008e08:	b538      	push	{r3, r4, r5, lr}
 8008e0a:	4d06      	ldr	r5, [pc, #24]	@ (8008e24 <_isatty_r+0x1c>)
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	4604      	mov	r4, r0
 8008e10:	4608      	mov	r0, r1
 8008e12:	602b      	str	r3, [r5, #0]
 8008e14:	f7f8 ffb0 	bl	8001d78 <_isatty>
 8008e18:	1c43      	adds	r3, r0, #1
 8008e1a:	d102      	bne.n	8008e22 <_isatty_r+0x1a>
 8008e1c:	682b      	ldr	r3, [r5, #0]
 8008e1e:	b103      	cbz	r3, 8008e22 <_isatty_r+0x1a>
 8008e20:	6023      	str	r3, [r4, #0]
 8008e22:	bd38      	pop	{r3, r4, r5, pc}
 8008e24:	20000540 	.word	0x20000540

08008e28 <_kill_r>:
 8008e28:	b538      	push	{r3, r4, r5, lr}
 8008e2a:	4d07      	ldr	r5, [pc, #28]	@ (8008e48 <_kill_r+0x20>)
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	4604      	mov	r4, r0
 8008e30:	4608      	mov	r0, r1
 8008e32:	4611      	mov	r1, r2
 8008e34:	602b      	str	r3, [r5, #0]
 8008e36:	f7f8 ff2f 	bl	8001c98 <_kill>
 8008e3a:	1c43      	adds	r3, r0, #1
 8008e3c:	d102      	bne.n	8008e44 <_kill_r+0x1c>
 8008e3e:	682b      	ldr	r3, [r5, #0]
 8008e40:	b103      	cbz	r3, 8008e44 <_kill_r+0x1c>
 8008e42:	6023      	str	r3, [r4, #0]
 8008e44:	bd38      	pop	{r3, r4, r5, pc}
 8008e46:	bf00      	nop
 8008e48:	20000540 	.word	0x20000540

08008e4c <_getpid_r>:
 8008e4c:	f7f8 bf1c 	b.w	8001c88 <_getpid>

08008e50 <_init>:
 8008e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e52:	bf00      	nop
 8008e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e56:	bc08      	pop	{r3}
 8008e58:	469e      	mov	lr, r3
 8008e5a:	4770      	bx	lr

08008e5c <_fini>:
 8008e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e5e:	bf00      	nop
 8008e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e62:	bc08      	pop	{r3}
 8008e64:	469e      	mov	lr, r3
 8008e66:	4770      	bx	lr
